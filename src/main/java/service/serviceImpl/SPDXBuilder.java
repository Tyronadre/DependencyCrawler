package service.serviceImpl;

import data.Component;
import data.Dependency;
import data.ExternalReference;
import data.Hash;
import exceptions.SPDXBuilderException;
import logger.Logger;
import org.spdx.jacksonstore.MultiFormatStore;
import org.spdx.library.InvalidSPDXAnalysisException;
import org.spdx.library.ModelCopyManager;
import org.spdx.library.SpdxConstants;
import org.spdx.library.Version;
import org.spdx.library.model.ReferenceType;
import org.spdx.library.model.Relationship;
import org.spdx.library.model.SpdxCreatorInformation;
import org.spdx.library.model.SpdxDocument;
import org.spdx.library.model.SpdxElement;
import org.spdx.library.model.SpdxPackage;
import org.spdx.library.model.enumerations.ChecksumAlgorithm;
import org.spdx.library.model.enumerations.Purpose;
import org.spdx.library.model.enumerations.ReferenceCategory;
import org.spdx.library.model.enumerations.RelationshipType;
import org.spdx.library.model.license.LicenseInfoFactory;
import org.spdx.storage.simple.InMemSpdxStore;
import service.DocumentBuilder;
import util.Pair;

import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;


public class SPDXBuilder implements DocumentBuilder<Component, Pair<SpdxDocument, Component>> {
    private static final Logger logger = Logger.of("SPDXBuilder");

    MultiFormatStore store;
    ModelCopyManager copyManager;
    String uri;
    SpdxDocument spdxDocument;
    Component root;

    HashMap<String, SpdxElement> buildSPDXElements = new HashMap<>();

    @Override
    public void buildDocument(Component root, String outputFileName) {
        var start = System.currentTimeMillis();
        logger.appendInfo("Creating SPDX for " + root.getQualifiedName() + "...");
        this.root = root;


        var outputFileDir = outputFileName.split("/", 2);
        if (outputFileDir.length > 1) {
            //create out dir if not exists
            File outDir = new File(outputFileDir[0]);
            if (!outDir.exists()) {
                if (!outDir.mkdirs()) {
                    logger.error("Could not create output folder for SPDX file: " + outDir.getAbsoluteFile());
                    throw new IllegalStateException();
                }
            }
        }

        // spdx json
        try (var out = new FileOutputStream(outputFileName + ".spdx.json")) {

            store = new MultiFormatStore(new InMemSpdxStore(), MultiFormatStore.Format.JSON_PRETTY, MultiFormatStore.Verbose.COMPACT);
            uri = "spdx-document/" + UUID.randomUUID();
            copyManager = new ModelCopyManager();
            spdxDocument = new SpdxDocument(store, uri, copyManager, true);
            buildDocument();

            // Save the SPDX document
            store.serialize(uri, out);

            logger.success(new File(outputFileName).getAbsolutePath() + ".spdx.json saved (" + (System.currentTimeMillis() - start) + "ms)");
        } catch (Exception e) {
            logger.error("Error building SPDX document" + e.getMessage());
            e.printStackTrace();
        }


    }

    private SpdxCreatorInformation buildCreationInfo() {
        try {
            var creationInfo = new SpdxCreatorInformation(store, uri, UUID.randomUUID().toString(), copyManager, true);
            creationInfo.setComment("Automatically generated SPDX Document");
            creationInfo.setCreated(new SimpleDateFormat(SpdxConstants.SPDX_DATE_FORMAT).format(new Date()));
            creationInfo.getCreators().add("Tool: Dependency-Crawler-1.0");
            creationInfo.getCreators().add("Organization: Technische UniversitÃ¤t Darmstadt");
            creationInfo.getCreators().add("Person: Henrik Bornemann");
//        creationInfo.setLicenseListVersion("3.0");
            return creationInfo;
        } catch (InvalidSPDXAnalysisException e) {
            logger.appendError("Error building CreationInfo" + e.getMessage());
        }
        return null;
    }

    private void buildDocument() {
        try {
            spdxDocument.setCreationInfo(buildCreationInfo());
            spdxDocument.setSpecVersion(Version.CURRENT_SPDX_VERSION);
            spdxDocument.setName("SPDX-" + root.getQualifiedName());
            spdxDocument.setDataLicense(LicenseInfoFactory.parseSPDXLicenseString("CC0-1.0", store, uri, copyManager));
            spdxDocument.setComment("This SPDX document was generated by Dependency-Crawler-1.0");
            spdxDocument.getExternalDocumentRefs();
            spdxDocument.getAnnotations();
            spdxDocument.getDocumentDescribes().add(buildSPDXElement(root));
        } catch (InvalidSPDXAnalysisException | SPDXBuilderException e) {
            logger.error("Error building SPDX document" + e.getMessage());
        }
    }

    private SpdxElement buildSPDXElement(Component component) throws SPDXBuilderException {
        if (buildSPDXElements.containsKey(component.getQualifiedName())) {
            return buildSPDXElements.get(component.getQualifiedName());
        }

        try {
            var spdxPackage = new SpdxPackage(store, uri, SpdxConstants.SPDX_ELEMENT_REF_PRENUM + component.getQualifiedName(), copyManager, true);
            buildSPDXElements.put(component.getQualifiedName(), spdxPackage);

            buildAllHashes(component, spdxPackage);
            buildAllExternalRefs(component, spdxPackage);
            buildLicense(component, spdxPackage);

//            spdxPackage.setBuiltDate();
            spdxPackage.setName(component.getQualifiedName().replace(':', ' '));
            var supplier = component.getSupplier();
            if (supplier != null) {
                spdxPackage.setSupplier("Organization: " + supplier.getName());
                spdxPackage.setOriginator("Organization: " + supplier.getName());
            }

            spdxPackage.setPackageFileName(component.getPurl());
            spdxPackage.setDownloadLocation(component.getDownloadLocation());
//            spdxPackage.setFilesAnalyzed();
            if (component.getAllLicenses() != null) {
            }
//            spdxPackage.setPackageVerificationCode();
            spdxPackage.setPrimaryPurpose(Purpose.LIBRARY);
//            spdxPackage.setReleaseDate();
//            spdxPackage.setSourceInfo();
//            spdxPackage.setSummary();
//            spdxPackage.setValidUntilDate();
            spdxPackage.setRelationships(buildAllDependencies(component));
            spdxPackage.setVersionInfo(component.getVersion().version());
            Optional.ofNullable(component.getPurl()).ifPresent(purl -> {
                try {
                    spdxPackage.addExternalRef(spdxPackage.createExternalRef(ReferenceCategory.OTHER, new ReferenceType("purl"), purl.replace(" ", "_"), null));
                } catch (InvalidSPDXAnalysisException e) {
                    logger.error("Could not set purl for " + component.getQualifiedName() + ". ", e);
                }
            });
//            spdxPackage.getFiles();

            return spdxPackage;
        } catch (InvalidSPDXAnalysisException e) {
            throw new SPDXBuilderException(e.getMessage() + Arrays.toString(e.getStackTrace()));
        }
    }

    private void buildAllHashes(Component component, SpdxPackage spdxPackage) {
        if (component.getAllHashes() != null) {
            for (Hash hash : component.getAllHashes()) {
                try {
                    var checksum = spdxPackage.createChecksum(switch (hash.getAlgorithm().toUpperCase()) {
                        case "SHA1", "HASH_ALG_SHA_1" -> ChecksumAlgorithm.SHA1;
                        case "SHA256", "HASH_ALG_SHA_256" -> ChecksumAlgorithm.SHA256;
                        case "SHA512", "HASH_ALG_SHA_512" -> ChecksumAlgorithm.SHA512;
                        case "MD5", "HASH_ALG_MD_5" -> ChecksumAlgorithm.MD5;
                        default -> throw new SPDXBuilderException("Unexpected value: " + hash.getAlgorithm());
                    }, hash.getValue());
                    spdxPackage.addChecksum(checksum);
                } catch (Exception e) {
                    logger.error(hash.getValue() + " " + component + " " + e.getMessage());
                }
            }
        }
    }

    private void buildAllExternalRefs(Component component, SpdxPackage spdxPackage) {
        if (component.getAllExternalReferences() != null) {
            for (ExternalReference externalReference : component.getAllExternalReferences()) {
                try {
                    var ref = spdxPackage.createExternalRef(ReferenceCategory.OTHER, new ReferenceType(externalReference.getType()), externalReference.getUrl(), null);
                    spdxPackage.addExternalRef(ref);
                } catch (InvalidSPDXAnalysisException e) {
                    logger.error("Could not build external reference for " + component.getQualifiedName() + ". " + e.getMessage());
                }
            }
        }
    }

    private Collection<Relationship> buildAllDependencies(Component component) {
        var list = new ArrayList<Relationship>();

        for (var dependencyComponent : component.getDependenciesFiltered().stream().map(Dependency::getComponent).filter(Objects::nonNull).toList()) {
            try {
                var newRel = new Relationship(store, uri, UUID.randomUUID().toString(), copyManager, true)
                        .setRelationshipType(RelationshipType.DEPENDS_ON)
                        .setRelatedSpdxElement(buildSPDXElement(dependencyComponent));

                list.add(newRel);
            } catch (InvalidSPDXAnalysisException | SPDXBuilderException e) {
                throw new RuntimeException(e);
            }
        }
        return list;
    }

    private void buildLicense(Component component, SpdxPackage spdxPackage) {
        if (component.getAllLicenses() == null || component.getAllLicenses().isEmpty()) {
            return;
        }
        var licenseChoice = component.getAllLicenses().getFirst();
        try {
            var license = LicenseInfoFactory.parseSPDXLicenseString(licenseChoice.getLicense().getId(), store, uri, copyManager);
            spdxPackage.setLicenseDeclared(license);
        } catch (InvalidSPDXAnalysisException e) {
            logger.info("Could not build license  " + licenseChoice.getLicense() + ". " + e.getMessage());
        }

    }


    @Override
    public void rebuildDocument(Pair<SpdxDocument, Component> data, String outputFileName) {
        var component = data.second();
        spdxDocument = data.first();

        var start = System.currentTimeMillis();
        logger.appendInfo("Rewriting SPDX...");

        var outputFileDir = outputFileName.split("/", 2);
        if (outputFileDir.length > 1) {
            //create out dir if not exists
            File outDir = new File(outputFileDir[0]);
            if (!outDir.exists()) {
                if (!outDir.mkdirs()) {
                    logger.error("Could not create output folder for SPDX file: " + outDir.getAbsoluteFile());
                    throw new IllegalStateException();
                }
            }
        }

        // spdx json
        try (var out = new FileOutputStream(outputFileName + ".spdx.json")) {
            updateSpdxDocument(spdxDocument, component);
            Objects.requireNonNull(spdxDocument.getCreationInfo()).setComment("Updated: " + new SimpleDateFormat(SpdxConstants.SPDX_DATE_FORMAT).format(new Date()) + " by Dependency-Crawler-1.0");

            new MultiFormatStore(spdxDocument.getModelStore(), MultiFormatStore.Format.JSON_PRETTY, MultiFormatStore.Verbose.FULL).serialize(spdxDocument.getDocumentUri(), out);

            logger.success(new File(outputFileName).getAbsolutePath() + ".spdx.json saved (" + (System.currentTimeMillis() - start) + "ms)");
        } catch (Exception e) {
            logger.error("Error building SPDX document", e);
        }
    }

    private void updateSpdxDocument(SpdxDocument spdxDocument, Component rootComponent) throws InvalidSPDXAnalysisException {
        var componentsToBuild = new ArrayDeque<>(spdxDocument.getDocumentDescribes());
        var buildComponents = new ArrayList<SpdxElement>();
        var loadedComponents = new HashMap<String, Component>();
        for (var c : rootComponent.getDependencyComponentsFlatFiltered()) {
            loadedComponents.put(c.getQualifiedName(), c);
        }
        loadedComponents.put(rootComponent.getQualifiedName(), rootComponent);



        while (!componentsToBuild.isEmpty()) {
            var spdxPackage = (SpdxPackage) componentsToBuild.poll();
            Component finalComponent = loadedComponents.get(spdxPackage.getId());
            buildComponents.add(spdxPackage);

            //update the spdx from the component
            buildLicense(finalComponent, spdxPackage);
            Optional.ofNullable(finalComponent.getSupplier()).ifPresent(manufacturer -> {
                try {
                    spdxPackage.setSupplier("Organization: " + manufacturer.getName());
                } catch (InvalidSPDXAnalysisException e) {
                    logger.error("Could not set supplier for " + finalComponent.getQualifiedName() + ". " + e.getMessage());
                }
            });
            Optional.ofNullable(finalComponent.getDownloadLocation()).ifPresent(downloadLocation -> {
                try {
                    spdxPackage.setDownloadLocation(downloadLocation);
                } catch (InvalidSPDXAnalysisException e) {
                    logger.error("Could not set download location for " + finalComponent.getQualifiedName() + ". " + e.getMessage());
                }
            });
            spdxPackage.getChecksums().clear();
            buildAllHashes(finalComponent, spdxPackage);
            spdxPackage.getExternalRefs().clear();
            buildAllExternalRefs(finalComponent, spdxPackage);


            //relationship of the element
            for (var relationship : spdxPackage.getRelationships()) {
                if (relationship.getRelationshipType().toString().equals("DEPENDS_ON")) {
                    var relationElement = relationship.getRelatedSpdxElement().get();
                    var relationComponent = loadedComponents.get(relationElement.getId());
                    if (relationComponent == null) {
                        relationElement.removeRelationship(relationship);
                        continue;
                    }
                    if (buildComponents.contains(relationElement)) continue;
                    componentsToBuild.add(relationElement);
                }
            }
        }
    }


}

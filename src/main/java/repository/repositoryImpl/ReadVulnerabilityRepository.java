package repository.repositoryImpl;

import data.Component;
import data.Vulnerability;
import data.readData.ReadSBomVulnerability;
import data.readData.ReadVexVulnerability;
import repository.VulnerabilityRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class ReadVulnerabilityRepository implements VulnerabilityRepository {
    VulnerabilityRepositoryImpl vulnerabilityRepository = VulnerabilityRepositoryImpl.getInstance();
    List<List<Vulnerability>> vulnerabilities = new ArrayList<>();

    private static ReadVulnerabilityRepository instance;

    public static ReadVulnerabilityRepository getInstance() {
        if (instance == null) {
            instance = new ReadVulnerabilityRepository();
        }
        return instance;
    }

    public void updateReadVulnerabilities(Component component) {
        var vulComponent = new ArrayList<>(component.getAllVulnerabilities());
        var vulLoaded = vulnerabilityRepository.getVulnerabilities(component);

        var vulComponentToDelete = vulComponent.stream().filter(vulComp -> vulLoaded.stream().anyMatch(vulNet -> vulComp.getId().equals(vulNet.getId()))).toList();
        var vulLoadedToAdd = vulLoaded.stream().filter(vulNet -> vulComponent.stream().noneMatch(vulComp -> vulComp.getId().equals(vulNet.getId()))).toList();

        vulComponentToDelete.forEach(component::removeVulnerability);
        vulLoadedToAdd.forEach(component::addVulnerability);
    }

    private void updateReadVulnerability(Vulnerability vulnerability, Vulnerability loadedVulnerability) {
        vulnerability.getComponent().removeVulnerability(vulnerability);
        vulnerability.getComponent().addVulnerability(loadedVulnerability);
    }


    @Override
    public List<Vulnerability> getVulnerabilities(Component component) {
        throw new UnsupportedOperationException();
    }

    public void addReadVulnerability(Vulnerability vulnerability) {
        vulnerabilities.add(List.of(vulnerability));
    }

    public List<Vulnerability> getAllVulnerabilities() {
        return vulnerabilities.stream().flatMap(List::stream).toList();
    }
}

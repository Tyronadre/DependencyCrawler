package data.dataImpl;

import com.google.gson.JsonObject;
import data.Property;
import data.Vulnerability;
import data.VulnerabilityRating;
import exceptions.VulnerabilityException;
import us.springett.cvss.Cvss;


public class OSVVulnerabilityRating implements VulnerabilityRating {
    Vulnerability vulnerability;
    JsonObject severity, database_specific;
    Cvss cvss;
    String cvssVersion;

    public OSVVulnerabilityRating(Vulnerability vulnerability, JsonObject severity, JsonObject database_specific) {
        this.vulnerability = vulnerability;
        this.severity = severity;
        this.database_specific = database_specific;
        this.calculateCVSS();
    }

    private void calculateCVSS() {
        var cvssVector = severity.get("score").getAsString();
        var version = cvssVector.substring(0, cvssVector.indexOf("/"));
        cvssVersion = switch (version) {
            case "CVSS:3.1" -> "3.1";
            case "CVSS:3.0" -> "3.0";
            case "CVSS:2.0" -> "2.0";
            default ->
                    throw new VulnerabilityException(vulnerability, "Could not parse the CVSS version. Unsupported version :" + version);
        };
        cvss = Cvss.fromVector(cvssVector);
    }

    @Override
    public Double getBaseScore() {
        return cvss.calculateScore().getBaseScore();
    }

    @Override
    public Double getImpactScore() {
        return cvss.calculateScore().getImpactSubScore();
    }

    @Override
    public Double getExploitabilityScore() {
        return cvss.calculateScore().getExploitabilitySubScore();
    }

    @Override
    public String getSeverity() {
        return database_specific.get("severity").getAsString();
    }

    @Override
    public String getMethod() {
        return cvssVersion;
    }

    @Override
    public String getVector() {
        return severity.get("score").getAsString();
    }

    @Override
    public Property getSource() {
        return null;
    }

    @Override
    public String getJustification() {
        return null;
    }


}

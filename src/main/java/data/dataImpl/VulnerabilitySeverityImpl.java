package data.dataImpl;

import com.google.gson.JsonObject;
import cyclonedx.v1_6.Bom16;
import data.Vulnerability;
import data.VulnerabilitySeverity;
import exceptions.VulnerabilityException;
import us.springett.cvss.Cvss;

import java.util.Optional;

public class VulnerabilitySeverityImpl implements VulnerabilitySeverity {
    Vulnerability vulnerability;
    JsonObject severity, database_specific;
    Cvss cvss;
    String cvssVersion;

    public VulnerabilitySeverityImpl(Vulnerability vulnerability, JsonObject severity, JsonObject database_specific) {
        this.vulnerability = vulnerability;
        this.severity = severity;
        this.database_specific = database_specific;
        this.calculateCVSS();
    }

    private void calculateCVSS() {
        var cvssVector = severity.get("score").getAsString();
        var version = cvssVector.substring(0, cvssVector.indexOf("/"));
        cvssVersion = switch (version) {
            case "CVSS:3.1" -> "3.1";
            case "CVSS:3.0" -> "3.0";
            case "CVSS:2.0" -> "2.0";
            default ->
                    throw new VulnerabilityException(vulnerability, "Could not parse the CVSS version. Unsupported version :" + version);
        };
        cvss = Cvss.fromVector(cvssVector);
    }

    @Override
    public Bom16.VulnerabilityRating toBom16() {
        var builder = Bom16.VulnerabilityRating.newBuilder();

        Optional.ofNullable(getScore()).ifPresent(builder::setScore);
        Optional.ofNullable(database_specific.get("severity")).ifPresentOrElse(severity -> builder.setSeverity(switch (severity.getAsString().toUpperCase()) {
            case "CRITICAL" -> Bom16.Severity.SEVERITY_CRITICAL;
            case "HIGH" -> Bom16.Severity.SEVERITY_HIGH;
            case "MEDIUM" -> Bom16.Severity.SEVERITY_MEDIUM;
            case "LOW" -> Bom16.Severity.SEVERITY_LOW;
            case "INFO" -> Bom16.Severity.SEVERITY_INFO;
            default -> Bom16.Severity.SEVERITY_NONE;
        }), () -> builder.setSeverity(Bom16.Severity.SEVERITY_UNKNOWN));
        Optional.ofNullable(this.cvssVersion).ifPresentOrElse(version -> {
            switch (version) {
                case "3.1" -> builder.setMethod(Bom16.ScoreMethod.SCORE_METHOD_CVSSV31);
                case "3.0" -> builder.setMethod(Bom16.ScoreMethod.SCORE_METHOD_CVSSV3);
                case "2.0" -> builder.setMethod(Bom16.ScoreMethod.SCORE_METHOD_CVSSV2);
            }
        }, () -> builder.setMethod(Bom16.ScoreMethod.SCORE_METHOD_NULL));
        Optional.ofNullable(severity.get("score").getAsString()).ifPresent(builder::setVector);

        return builder.build();
    }

    @Override
    public Double getScore() {
        return cvss.calculateScore().getBaseScore();
    }
}

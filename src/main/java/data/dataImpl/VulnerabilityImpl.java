package data.dataImpl;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.protobuf.Timestamp;
import cyclonedx.v1_6.Bom16;
import data.Component;
import data.Vulnerability;
import data.VulnerabilityAffects;
import data.VulnerabilityReference;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class VulnerabilityImpl implements Vulnerability {
    Component component;
    JsonObject data;
    List<VulnerabilityReference> vulnerabilityReferences;
    List<VulnerabilityAffects> vulerabilityAffects;

    public VulnerabilityImpl(Component component, JsonObject data) {
        this.component = component;
        this.data = data;
        this.vulnerabilityReferences = new ArrayList<>();
        for (JsonElement reference : data.get("references").getAsJsonArray()) {
            vulnerabilityReferences.add(new VulnerabilityReferenceImpl(this, reference.getAsJsonObject()));
        }
        this.vulerabilityAffects = new ArrayList<>();
        for (JsonElement affects : data.get("affected").getAsJsonArray()) {
            vulerabilityAffects.add(new VulnerabilityAffectsImpl(affects.getAsJsonObject()));
        }
    }

    @Override
    public Component getComponent() {
        return component;
    }

    @Override
    public String getId() {
        return data.get("id").getAsString();
    }

    @Override
    public String getSummary() {
        return data.get("summary").getAsString();
    }

    @Override
    public String getDetails() {
        return data.get("details").getAsString();
    }

    @Override
    public List<String> getAllAliases() {
        var l = new ArrayList<String>();
        for (var alias : data.get("aliases").getAsJsonArray()) {
            l.add(alias.getAsString());
        }
        return l;
    }

    @Override
    public String getModified() {
        return data.get("modified").getAsString();
    }

    @Override
    public String getPublished() {
        return data.get("published").getAsString();
    }

    @Override
    public List<VulnerabilitySeverity> getAllSeverity() {
        return data.get("severity").getAsJsonArray().getAsJsonObject().get("score").getAsString();
    }

    @Override
    public List<VulnerabilityReference> getAllReferences() {
        return vulnerabilityReferences;
    }

    @Override
    public List<VulnerabilityAffects> getAllAffects() {
        return vulerabilityAffects;
    }

    @Override
    public Bom16.Vulnerability toBom16() {
        var bom16VulnerabilityBuilder = Bom16.Vulnerability.newBuilder();
        bom16VulnerabilityBuilder.setBomRef(UUID.randomUUID().toString());
        bom16VulnerabilityBuilder.setId(this.getId());
        bom16VulnerabilityBuilder.setSource(Bom16.Source.newBuilder().setName("NVD").setUrl("https://osv.dev").build());
        bom16VulnerabilityBuilder.addAllReferences(this.getAllAliases().stream().map(alias -> {
            var aliasBuilder = Bom16.VulnerabilityReference.newBuilder();
            aliasBuilder.setId(alias);
            return aliasBuilder.build();
        }).toList());
        bom16VulnerabilityBuilder.addAllRatings(this.getAllSeverity().stream().map(severity -> {
            var ratingBuilder = Bom16.Rating.newBuilder();
            ratingBuilder.setScore(severity);
            return ratingBuilder.build();
        }).toList());
//        bom16VulnerabilityBuilder.addAllCwes();
        bom16VulnerabilityBuilder.setDescription(this.getSummary());
        bom16VulnerabilityBuilder.setDetail(this.getDetails());
//        bom16VulnerabilityBuilder.setRecommendation();
//        bom16VulnerabilityBuilder.addAllAdvisories()
        var published = LocalDateTime.parse(this.getPublished());
        bom16VulnerabilityBuilder.setPublished(Timestamp.newBuilder().setSeconds(published.getNano() / 1000 / 1000).setNanos((published.getNano() / 1000 % 1000) * 1000000).build());
        var modified = LocalDateTime.parse(this.getModified());
        bom16VulnerabilityBuilder.setUpdated(Timestamp.newBuilder().setSeconds(modified.getNano() / 1000 / 1000).setNanos((modified.getNano() / 1000 % 1000) * 1000000).build());
//        bom16VulnerabilityBuilder.setCredits();
//        bom16VulnerabilityBuilder.setAnalysis();

        return null;
    }
}

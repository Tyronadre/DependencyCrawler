package data.dataImpl;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.protobuf.Timestamp;
import cyclonedx.v1_6.Bom16;
import data.*;

import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class VulnerabilityImpl implements Vulnerability {
    Component component;
    JsonObject data;
    List<VulnerabilityReference> vulnerabilityReferences;
    List<VulnerabilityAffects> vulnerabilityAffects;
    List<VulnerabilitySeverity> vulnerabilitySeverities;

    public VulnerabilityImpl(Component component, JsonObject data) {
        this.component = component;
        this.data = data;
        this.vulnerabilityReferences = new ArrayList<>();
        for (JsonElement reference : data.get("references").getAsJsonArray()) {
            vulnerabilityReferences.add(new VulnerabilityReferenceImpl(this, reference.getAsJsonObject()));
        }
        this.vulnerabilityAffects = new ArrayList<>();
        for (JsonElement affects : data.get("affected").getAsJsonArray()) {
            vulnerabilityAffects.add(new VulnerabilityAffectsImpl(this, affects.getAsJsonObject()));
        }
        this.vulnerabilitySeverities = new ArrayList<>();
        if (data.has("severity"))
            for (JsonElement severity : data.get("severity").getAsJsonArray()) {
                vulnerabilitySeverities.add(new VulnerabilitySeverityImpl(this, severity.getAsJsonObject(), data.get("database_specific").getAsJsonObject()));
            }
    }

    @Override
    public Component getComponent() {
        return component;
    }

    @Override
    public String getId() {
        return data.get("id").getAsString();
    }

    @Override
    public String getSummary() {
        return data.get("summary").getAsString();
    }

    @Override
    public String getDetails() {
        return data.get("details").getAsString();
    }

    @Override
    public List<String> getAllAliases() {
        var l = new ArrayList<String>();
        if (data.get("aliases") == null) return l;
        for (var alias : data.get("aliases").getAsJsonArray()) {
            l.add(alias.getAsString());
        }
        return l;
    }

    @Override
    public String getModified() {
        return data.get("modified").getAsString();
    }

    @Override
    public String getPublished() {
        return data.get("published").getAsString();
    }

    @Override
    public List<VulnerabilitySeverity> getAllSeverities() {
        return this.vulnerabilitySeverities;
    }

    @Override
    public List<VulnerabilityReference> getAllReferences() {
        return vulnerabilityReferences;
    }

    @Override
    public List<VulnerabilityAffects> getAllAffects() {
        return vulnerabilityAffects;
    }

    @Override
    public Bom16.Vulnerability toBom16() {
        var bom16VulnerabilityBuilder = Bom16.Vulnerability.newBuilder();

        bom16VulnerabilityBuilder.setBomRef(UUID.randomUUID().toString());
        bom16VulnerabilityBuilder.setId(this.getId());
        bom16VulnerabilityBuilder.setSource(Bom16.Source.newBuilder().setName("NVD").setUrl("https://osv.dev").build());
        bom16VulnerabilityBuilder.addAllReferences(this.getAllReferences().stream().map(Bom16Component::toBom16).toList());
        bom16VulnerabilityBuilder.addAllRatings(this.getAllSeverities().stream().map(Bom16Component::toBom16).toList());
        bom16VulnerabilityBuilder.addAllAffects(this.getAllAffects().stream().map(Bom16Component::toBom16).toList());
        this.data.get("database_specific").getAsJsonObject().get("cwe_ids").getAsJsonArray().forEach(cwe -> bom16VulnerabilityBuilder.addCwes(Integer.parseInt(cwe.getAsString().substring(4))));
        bom16VulnerabilityBuilder.setDescription(this.getSummary());
        bom16VulnerabilityBuilder.setDetail(this.getDetails());
        var published = LocalDateTime.parse(this.getPublished(), DateTimeFormatter.ISO_DATE_TIME);
        bom16VulnerabilityBuilder.setPublished(Timestamp.newBuilder().setSeconds(published.toEpochSecond(ZoneOffset.UTC)).build());
        var modified = LocalDateTime.parse(this.getModified(), DateTimeFormatter.ISO_DATE_TIME);
        bom16VulnerabilityBuilder.setUpdated(Timestamp.newBuilder().setSeconds(modified.toEpochSecond(ZoneOffset.UTC)).build());
        bom16VulnerabilityBuilder.addAllProperties(this.getAllAliases().stream().map(alias -> Bom16.Property.newBuilder().setName("alias").setValue(alias).build()).toList());

        return bom16VulnerabilityBuilder.build();
    }
}

package data.dataImpl;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import cyclonedx.v1_6.Bom16;
import data.Version;
import data.Vulnerability;
import data.VulnerabilityAffects;
import enums.ComponentType;

import java.util.ArrayList;
import java.util.List;

public class VulnerabilityAffectsImpl implements VulnerabilityAffects {
    JsonObject data;
    Vulnerability vulnerability;

    public VulnerabilityAffectsImpl(Vulnerability vulnerability, JsonObject data) {
        this.vulnerability = vulnerability;
        this.data = data;
    }

    @Override
    public String getPackage() {
        return data.get("package").getAsJsonObject().get("purl").getAsString();
    }

    @Override
    public List<Version> getAllAffects() {
        var l = new ArrayList<Version>();
        if (data.get("versions") == null) return l;
        for (var version : data.get("versions").getAsJsonArray()) {
            l.add(Version.of(ComponentType.UNKNOWN, version.getAsString()));
        }
        return l;
    }

    @Override
    public String getDatabaseSpecific() {
        return data.get("database_specific").getAsString();
    }

    @Override
    public Version getIntroduced() {
        var ranges = data.get("introduced").getAsJsonArray();
        for (JsonElement range : ranges) {
            var r = range.getAsJsonObject();
            if (r.get("type").getAsString().equals("ECOSYSTEM")) {
                var events = r.get("events").getAsJsonObject();
                if (events.has("introduced")) {
                    return Version.of(ComponentType.UNKNOWN, events.get("introduced").getAsString());
                }
            }
        }
        return null;
    }

    @Override
    public Version getFixed() {
        var ranges = data.get("fixed").getAsJsonArray();
        for (JsonElement range : ranges) {
            var r = range.getAsJsonObject();
            if (r.get("type").getAsString().equals("ECOSYSTEM")) {
                var events = r.get("events").getAsJsonObject();
                if (events.has("fixed")) {
                    return Version.of(ComponentType.UNKNOWN, events.get("fixed").getAsString());
                }
            }
        }
        return null;
    }

    @Override
    public Bom16.VulnerabilityAffects toBom16() {
        var builder = Bom16.VulnerabilityAffects.newBuilder();
        builder.addAllVersions(getAllAffects().stream().map(version -> {
            var v = Bom16.VulnerabilityAffectedVersions.newBuilder();
            v.setVersion(version.getVersion());
            v.setStatus(Bom16.VulnerabilityAffectedStatus.VULNERABILITY_AFFECTED_STATUS_AFFECTED);
            return v.build();
        }).toList());
        builder.setRef(vulnerability.getComponent().getBomRef());
        return builder.build();
    }
}

package data.readData;

import cyclonedx.sbom.Bom16;
import data.Component;
import data.Property;
import data.Timestamp;
import data.Vulnerability;
import data.VulnerabilityAffects;
import data.VulnerabilityRating;
import data.VulnerabilityReference;
import data.internalData.OSVVulnerability;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

import static service.converter.BomToInternalMavenConverter.*;

public class ReadSBomVulnerability implements Vulnerability {
    Bom16.Vulnerability bomVulnerability;
    Component component;
    Vulnerability loadedVulnerability;

    public ReadSBomVulnerability(Bom16.Vulnerability bomVulnerability, Component component) {
        this.bomVulnerability = bomVulnerability;
        this.component = component;
    }

    @Override
    public Component getComponent() {
        return component;
    }

    @Override
    public String getId() {
        return bomVulnerability.hasId() ? bomVulnerability.getId() : null;
    }

    @Override
    public String getDescription() {
        if (loadedVulnerability != null && loadedVulnerability.getDescription() != null && !loadedVulnerability.getDescription().isEmpty()) {
            return loadedVulnerability.getDescription();
        }
        if (bomVulnerability.hasDescription() && !bomVulnerability.getDescription().isEmpty()) {
            return bomVulnerability.getDescription();
        }
        return null;
    }

    @Override
    public String getDetails() {
        if (loadedVulnerability != null && loadedVulnerability.getDetails() != null && !loadedVulnerability.getDetails().isEmpty()) {
            return loadedVulnerability.getDetails();
        }
        if (bomVulnerability.hasDescription() && !bomVulnerability.getDescription().isEmpty()) {
            return bomVulnerability.getDescription();
        }
        return null;
    }

    @Override
    public List<Property> getAllProperties() {
        var properties = new HashSet<Property>();

        if (loadedVulnerability != null && loadedVulnerability.getAllProperties() != null && !loadedVulnerability.getAllProperties().isEmpty()) {
            properties.addAll(loadedVulnerability.getAllProperties());
        }
        properties.addAll(buildAllProperties(bomVulnerability.getPropertiesList()));
        return properties.isEmpty() ? null : new ArrayList<>(properties);
    }

    @Override
    public Timestamp getModified() {
        if (loadedVulnerability != null && loadedVulnerability.getModified() != null) {
            return loadedVulnerability.getModified();
        }
        if (bomVulnerability.hasUpdated()) {
            return buildTimestamp(bomVulnerability.getUpdated());
        }
        return null;
    }

    @Override
    public Timestamp getPublished() {
        if (loadedVulnerability != null && loadedVulnerability.getPublished() != null) {
            return loadedVulnerability.getPublished();
        }
        if (bomVulnerability.hasPublished()) {
            return buildTimestamp(bomVulnerability.getPublished());
        }
        return null;
    }

    @Override
    public List<VulnerabilityRating> getAllRatings() {
        var ratings = new HashSet<VulnerabilityRating>();
        if (loadedVulnerability != null && loadedVulnerability.getAllRatings() != null && !loadedVulnerability.getAllRatings().isEmpty()) {
            ratings.addAll(loadedVulnerability.getAllRatings());
        }
        ratings.addAll(buildVulnerabilityRatings(bomVulnerability.getRatingsList()));
        return ratings.isEmpty() ? null : new ArrayList<>(ratings);
    }

    @Override
    public List<VulnerabilityReference> getAllReferences() {
        var references = new HashSet<VulnerabilityReference>();
        if (loadedVulnerability != null && loadedVulnerability.getAllReferences() != null && !loadedVulnerability.getAllReferences().isEmpty()) {
            references.addAll(loadedVulnerability.getAllReferences());
        }
        references.addAll(buildVulnerabilityReferences(bomVulnerability.getReferencesList()));
        return references.isEmpty() ? null : new ArrayList<>(references);
    }

    @Override
    public List<VulnerabilityAffects> getAllAffects() {
        var affects = new HashSet<VulnerabilityAffects>();
        if (loadedVulnerability != null && loadedVulnerability.getAllAffects() != null && !loadedVulnerability.getAllAffects().isEmpty()) {
            affects.addAll(loadedVulnerability.getAllAffects());
        }
        affects.addAll(buildVulnerabilityAffects(bomVulnerability.getAffectsList()));
        return affects.isEmpty() ? null : new ArrayList<>(affects);
    }

    @Override
    public List<Integer> getAllCwes() {
        var cwes = new HashSet<Integer>();
        if (loadedVulnerability != null && loadedVulnerability.getAllCwes() != null && !loadedVulnerability.getAllCwes().isEmpty()) {
            cwes.addAll(loadedVulnerability.getAllCwes());
        }
        if (!bomVulnerability.getCwesList().isEmpty()) {
            cwes.addAll(bomVulnerability.getCwesList());
        }
        return cwes.isEmpty() ? null : new ArrayList<>(cwes);
    }

    @Override
    public List<String> getAllRecommendations() {
        var recommendations = new HashSet<String>();
        if (loadedVulnerability != null && loadedVulnerability.getAllRecommendations() != null && !loadedVulnerability.getAllRecommendations().isEmpty()) {
            recommendations.addAll(loadedVulnerability.getAllRecommendations());
        }
        if (bomVulnerability.hasRecommendation()) {
            recommendations.addAll(Arrays.stream(bomVulnerability.getRecommendation().split("\n")).toList());
        }
        return recommendations.isEmpty() ? null : new ArrayList<>(recommendations);
    }

    @Override
    public Property getSource() {
        if (loadedVulnerability != null && loadedVulnerability.getSource() != null) {
            return loadedVulnerability.getSource();
        }
        if (bomVulnerability.hasSource()) {
            return buildSource(bomVulnerability.getSource());
        }
        return null;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OSVVulnerability that)) return false;

        return Objects.equals(getId(), that.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(getId());
    }

    public void setLoadedVulnerability(Vulnerability loadedVulnerability) {
        this.loadedVulnerability = loadedVulnerability;
    }
}

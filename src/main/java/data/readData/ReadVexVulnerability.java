package data.readData;

import com.google.gson.JsonObject;
import data.Component;
import data.Property;
import data.Timestamp;
import data.Vulnerability;
import data.VulnerabilityAffects;
import data.VulnerabilityRating;
import data.VulnerabilityReference;

import java.util.ArrayList;
import java.util.List;


public class ReadVexVulnerability implements Vulnerability {
    private final JsonObject data;
    private final Component component;

    public ReadVexVulnerability(Component component, JsonObject vulJson) {
        this.component = component;
        this.data = vulJson;
    }

    @Override
    public Component getComponent() {
        return component;
    }

    @Override
    public String getId() {
        return data.get("id").getAsString();
    }

    @Override
    public String getDescription() {
        if (data.has("description"))
            return data.get("description").getAsString();
        return null;
    }

    @Override
    public String getDetails() {
        return null;
    }

    @Override
    public List<Property> getAllProperties() {
        return null;
    }

    @Override
    public Timestamp getModified() {
        return null;
    }

    @Override
    public Timestamp getPublished() {
        return null;
    }

    @Override
    public List<VulnerabilityRating> getAllRatings() {
        var ratings = new ArrayList<VulnerabilityRating>();
        for (var ratingElement : data.getAsJsonArray("ratings")) {
            var rating = ratingElement.getAsJsonObject();
            ratings.add(new VulnerabilityRating() {
                @Override
                public Double baseScore() {
                    if (!rating.has("score") || !rating.get("score").getAsJsonObject().has("base")) {
                        return null;
                    }
                    return rating.get("score").getAsJsonObject().get("base").getAsDouble();
                }

                @Override
                public Double impactScore() {
                    if (!rating.has("score") || !rating.get("score").getAsJsonObject().has("impact")) {
                        return null;
                    }
                    return rating.get("score").getAsJsonObject().get("impact").getAsDouble();
                }

                @Override
                public Double exploitabilityScore() {
                    if (!rating.has("score") || !rating.get("score").getAsJsonObject().has("exploitability")) {
                        return null;
                    }
                    return rating.get("score").getAsJsonObject().get("exploitability").getAsDouble();
                }

                @Override
                public String severity() {
                    if (!rating.has("severity")) {
                        return null;
                    }
                    return rating.get("severity").getAsString();
                }

                @Override
                public String method() {
                    if (!rating.has("method")) {
                        return null;
                    }
                    return rating.get("method").getAsString();
                }

                @Override
                public String vector() {
                    if (!rating.has("vector")) {
                        return null;
                    }
                    return rating.get("vector").getAsString();
                }

                @Override
                public Property source() {
                    return null;
                }

                @Override
                public String justification() {
                    return null;
                }
            });
        }
        return ratings;
    }

    @Override
    public List<VulnerabilityReference> getAllReferences() {

        if (!data.has("advisories")) {
            return null;
        }

        var references = new ArrayList<VulnerabilityReference>();
        for (var referenceElement : data.getAsJsonArray("advisories")) {
            var reference = referenceElement.getAsString();
            references.add(new VulnerabilityReference() {
                @Override
                public String type() {
                    return "ADVISORY";
                }

                @Override
                public Property source() {
                    return Property.of("source", reference);
                }

                @Override
                public String identifier() {
                    return null;
                }
            });
        }
        return references;
    }

    @Override
    public List<VulnerabilityAffects> getAllAffects() {
        return List.of();
    }

    @Override
    public List<Integer> getAllCwes() {
        return List.of();
    }

    @Override
    public List<String> getAllRecommendations() {
        return List.of();
    }

    @Override
    public Property getSource() {
        if (data.has("source")) {
            var source = data.get("source").getAsJsonObject();
            return Property.of(source.get("name").getAsString(), source.get("value").getAsString());
        }
        return null;
    }
}

package data.internalData;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import data.Component;
import data.Version;
import data.Vulnerability;
import data.VulnerabilityAffectedVersion;
import data.VulnerabilityAffects;

import java.util.ArrayList;
import java.util.List;

public class OSVVulnerabilityAffects implements VulnerabilityAffects {
    JsonObject data;
    Vulnerability vulnerability;

    public OSVVulnerabilityAffects(Vulnerability vulnerability, JsonObject data) {
        this.vulnerability = vulnerability;
        this.data = data;
    }

    public String getPackage() {
        return data.get("package").getAsJsonObject().get("purl").getAsString();
    }

    public Version getIntroduced() {
        var ranges = data.get("introduced").getAsJsonArray();
        for (JsonElement range : ranges) {
            var r = range.getAsJsonObject();
            if (r.get("type").getAsString().equals("ECOSYSTEM")) {
                var events = r.get("events").getAsJsonObject();
                if (events.has("introduced")) {
                    return Version.of(events.get("introduced").getAsString());
                }
            }
        }
        return null;
    }

    public Version getFixed() {
        var ranges = data.get("fixed").getAsJsonArray();
        for (JsonElement range : ranges) {
            var r = range.getAsJsonObject();
            if (r.get("type").getAsString().equals("ECOSYSTEM")) {
                var events = r.get("events").getAsJsonObject();
                if (events.has("fixed")) {
                    return Version.of(events.get("fixed").getAsString());
                }
            }
        }
        return null;
    }

    @Override
    public List<VulnerabilityAffectedVersion> allVersions() {
        var l = new ArrayList<VulnerabilityAffectedVersion>();
        if (data.get("versions") == null) return l;
        for (var version : data.get("versions").getAsJsonArray()) {
            l.add(new VulnerabilityAffectedVersion() {
                @Override
                public Version version() {
                    return Version.of(version.getAsString());
                }

                @Override
                public String affectedStatus() {
                    return "VULNERABILITY_AFFECTED_STATUS_AFFECTED";
                }

                @Override
                public String versionRange() {
                    return null;
                }
            });
        }
        return l;
    }

    @Override
    public Component affectedComponent() {
        return vulnerability.getComponent();
    }
}

package data.internalData;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import data.*;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class OSVVulnerability implements Vulnerability {
    Component component;
    JsonObject data;
    List<VulnerabilityReference> vulnerabilityReferences;
    List<VulnerabilityAffects> vulnerabilityAffects;
    List<VulnerabilityRating> vulnerabilitySeverities;
    Timestamp modified ;
    Timestamp published;

    public OSVVulnerability(Component component, JsonObject data) {
        this.component = component;
        this.data = data;
        this.vulnerabilityReferences = new ArrayList<>();
        for (JsonElement reference : data.get("references").getAsJsonArray()) {
            vulnerabilityReferences.add(new OSVVulnerabilityReference(this, reference.getAsJsonObject()));
        }
        this.vulnerabilityAffects = new ArrayList<>();
        for (JsonElement affects : data.get("affected").getAsJsonArray()) {
            vulnerabilityAffects.add(new OSVVulnerabilityAffects(this, affects.getAsJsonObject()));
        }
        this.vulnerabilitySeverities = new ArrayList<>();
        if (data.has("severity")) for (JsonElement severity : data.get("severity").getAsJsonArray()) {
            vulnerabilitySeverities.add(new OSVVulnerabilityRating(this, severity.getAsJsonObject(), data.get("database_specific").getAsJsonObject()));
        }

        this.modified = Timestamp.of(LocalDateTime.parse(data.get("modified").getAsString(), DateTimeFormatter.ISO_DATE_TIME).atZone(ZoneId.of("Z")).toEpochSecond(), 0);
        this.published = Timestamp.of(LocalDateTime.parse(data.get("published").getAsString(), DateTimeFormatter.ISO_DATE_TIME).atZone(ZoneId.of("Z")).toEpochSecond(), 0);


    }

    @Override
    public Component getComponent() {
        return component;
    }

    @Override
    public String getId() {
        return data.get("id").getAsString();
    }

    @Override
    public String getDescription() {
        return data.get("summary").getAsString();
    }

    @Override
    public String getDetails() {
        return data.get("details").getAsString();
    }

    @Override
    public List<Property> getAllProperties() {
        var l = new ArrayList<Property>();
        if (data.get("aliases") == null) return l;
        for (var alias : data.get("aliases").getAsJsonArray()) {
            l.add(Property.of("alias", alias.getAsString()));
        }
        return l;
    }

    @Override
    public data.Timestamp getModified() {
        return modified;
    }

    @Override
    public data.Timestamp getPublished() {
        return published;
    }

    @Override
    public List<VulnerabilityRating> getAllRatings() {
        return this.vulnerabilitySeverities;
    }

    @Override
    public List<VulnerabilityReference> getAllReferences() {
        return vulnerabilityReferences;
    }

    @Override
    public List<VulnerabilityAffects> getAllAffects() {
        return vulnerabilityAffects;
    }

    @Override
    public List<Integer> getAllCwes() {
        var l = new ArrayList<Integer>();
        if (data.get("database_specific").getAsJsonObject().get("cwe_ids") == null) return l;
        for (var cwe : data.get("database_specific").getAsJsonObject().get("cwe_ids").getAsJsonArray()) {
            l.add(Integer.valueOf(cwe.getAsString().substring(4)));
        }
        return l;
    }

    @Override
    public List<String> getAllRecommendations() {
        var l = new ArrayList<String>();
        if (data.get("recommendations") == null) return l;
        for (var recommendation : data.get("recommendations").getAsJsonArray()) {
            l.add(recommendation.getAsString());
        }
        return l;
    }

    @Override
    public Property getSource() {
        return Property.of("NVD", "https://osv.dev");
    }

    @Override
    public final boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OSVVulnerability that)) return false;

        return Objects.equals(getId(), that.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(getId());
    }
}

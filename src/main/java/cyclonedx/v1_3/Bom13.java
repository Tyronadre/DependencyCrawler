// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bom-1.3.proto
// Protobuf Java Version: 4.26.1

package cyclonedx.v1_3;

public final class Bom13 {
  private Bom13() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      Bom13.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code cyclonedx.v1_3.Classification}
   */
  public enum Classification
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CLASSIFICATION_NULL = 0;</code>
     */
    CLASSIFICATION_NULL(0),
    /**
     * <pre>
     * A software application. Refer to https://en.wikipedia.org/wiki/Application_software for information about applications.
     * </pre>
     *
     * <code>CLASSIFICATION_APPLICATION = 1;</code>
     */
    CLASSIFICATION_APPLICATION(1),
    /**
     * <pre>
     * A software framework. Refer to https://en.wikipedia.org/wiki/Software_framework for information on how frameworks vary slightly from libraries.
     * </pre>
     *
     * <code>CLASSIFICATION_FRAMEWORK = 2;</code>
     */
    CLASSIFICATION_FRAMEWORK(2),
    /**
     * <pre>
     * A software library. Refer to https://en.wikipedia.org/wiki/Library_(computing) for information about libraries. All third-party and open source reusable components will likely be a library. If the library also has key features of a framework, then it should be classified as a framework. If not, or is unknown, then specifying library is recommended.
     * </pre>
     *
     * <code>CLASSIFICATION_LIBRARY = 3;</code>
     */
    CLASSIFICATION_LIBRARY(3),
    /**
     * <pre>
     * A software operating system without regard to deployment model (i.e. installed on physical hardware, virtual machine, image, etc) Refer to https://en.wikipedia.org/wiki/Operating_system
     * </pre>
     *
     * <code>CLASSIFICATION_OPERATING_SYSTEM = 4;</code>
     */
    CLASSIFICATION_OPERATING_SYSTEM(4),
    /**
     * <pre>
     * A hardware device such as a processor, or chip-set. A hardware device containing firmware should include a component for the physical hardware itself, and another component of type 'firmware' or 'operating-system' (whichever is relevant), describing information about the software running on the device. See also the list of known device properties: https://github.com/CycloneDX/cyclonedx-property-taxonomy/blob/main/cdx/device.md
     * </pre>
     *
     * <code>CLASSIFICATION_DEVICE = 5;</code>
     */
    CLASSIFICATION_DEVICE(5),
    /**
     * <pre>
     * A computer file. Refer to https://en.wikipedia.org/wiki/Computer_file for information about files.
     * </pre>
     *
     * <code>CLASSIFICATION_FILE = 6;</code>
     */
    CLASSIFICATION_FILE(6),
    /**
     * <pre>
     * A packaging and/or runtime format, not specific to any particular technology, which isolates software inside the container from software outside of a container through virtualization technology. Refer to https://en.wikipedia.org/wiki/OS-level_virtualization
     * </pre>
     *
     * <code>CLASSIFICATION_CONTAINER = 7;</code>
     */
    CLASSIFICATION_CONTAINER(7),
    /**
     * <pre>
     * A special type of software that provides low-level control over a devices hardware. Refer to https://en.wikipedia.org/wiki/Firmware
     * </pre>
     *
     * <code>CLASSIFICATION_FIRMWARE = 8;</code>
     */
    CLASSIFICATION_FIRMWARE(8),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Classification.class.getName());
    }
    /**
     * <code>CLASSIFICATION_NULL = 0;</code>
     */
    public static final int CLASSIFICATION_NULL_VALUE = 0;
    /**
     * <pre>
     * A software application. Refer to https://en.wikipedia.org/wiki/Application_software for information about applications.
     * </pre>
     *
     * <code>CLASSIFICATION_APPLICATION = 1;</code>
     */
    public static final int CLASSIFICATION_APPLICATION_VALUE = 1;
    /**
     * <pre>
     * A software framework. Refer to https://en.wikipedia.org/wiki/Software_framework for information on how frameworks vary slightly from libraries.
     * </pre>
     *
     * <code>CLASSIFICATION_FRAMEWORK = 2;</code>
     */
    public static final int CLASSIFICATION_FRAMEWORK_VALUE = 2;
    /**
     * <pre>
     * A software library. Refer to https://en.wikipedia.org/wiki/Library_(computing) for information about libraries. All third-party and open source reusable components will likely be a library. If the library also has key features of a framework, then it should be classified as a framework. If not, or is unknown, then specifying library is recommended.
     * </pre>
     *
     * <code>CLASSIFICATION_LIBRARY = 3;</code>
     */
    public static final int CLASSIFICATION_LIBRARY_VALUE = 3;
    /**
     * <pre>
     * A software operating system without regard to deployment model (i.e. installed on physical hardware, virtual machine, image, etc) Refer to https://en.wikipedia.org/wiki/Operating_system
     * </pre>
     *
     * <code>CLASSIFICATION_OPERATING_SYSTEM = 4;</code>
     */
    public static final int CLASSIFICATION_OPERATING_SYSTEM_VALUE = 4;
    /**
     * <pre>
     * A hardware device such as a processor, or chip-set. A hardware device containing firmware should include a component for the physical hardware itself, and another component of type 'firmware' or 'operating-system' (whichever is relevant), describing information about the software running on the device. See also the list of known device properties: https://github.com/CycloneDX/cyclonedx-property-taxonomy/blob/main/cdx/device.md
     * </pre>
     *
     * <code>CLASSIFICATION_DEVICE = 5;</code>
     */
    public static final int CLASSIFICATION_DEVICE_VALUE = 5;
    /**
     * <pre>
     * A computer file. Refer to https://en.wikipedia.org/wiki/Computer_file for information about files.
     * </pre>
     *
     * <code>CLASSIFICATION_FILE = 6;</code>
     */
    public static final int CLASSIFICATION_FILE_VALUE = 6;
    /**
     * <pre>
     * A packaging and/or runtime format, not specific to any particular technology, which isolates software inside the container from software outside of a container through virtualization technology. Refer to https://en.wikipedia.org/wiki/OS-level_virtualization
     * </pre>
     *
     * <code>CLASSIFICATION_CONTAINER = 7;</code>
     */
    public static final int CLASSIFICATION_CONTAINER_VALUE = 7;
    /**
     * <pre>
     * A special type of software that provides low-level control over a devices hardware. Refer to https://en.wikipedia.org/wiki/Firmware
     * </pre>
     *
     * <code>CLASSIFICATION_FIRMWARE = 8;</code>
     */
    public static final int CLASSIFICATION_FIRMWARE_VALUE = 8;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Classification valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Classification forNumber(int value) {
      switch (value) {
        case 0: return CLASSIFICATION_NULL;
        case 1: return CLASSIFICATION_APPLICATION;
        case 2: return CLASSIFICATION_FRAMEWORK;
        case 3: return CLASSIFICATION_LIBRARY;
        case 4: return CLASSIFICATION_OPERATING_SYSTEM;
        case 5: return CLASSIFICATION_DEVICE;
        case 6: return CLASSIFICATION_FILE;
        case 7: return CLASSIFICATION_CONTAINER;
        case 8: return CLASSIFICATION_FIRMWARE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Classification>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Classification> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Classification>() {
            public Classification findValueByNumber(int number) {
              return Classification.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.getDescriptor().getEnumTypes().get(0);
    }

    private static final Classification[] VALUES = values();

    public static Classification valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Classification(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:cyclonedx.v1_3.Classification)
  }

  /**
   * <pre>
   * Specifies the flow direction of the data. Valid values are: inbound, outbound, bi-directional, and unknown. Direction is relative to the service. Inbound flow states that data enters the service. Outbound flow states that data leaves the service. Bi-directional states that data flows both ways, and unknown states that the direction is not known.
   * </pre>
   *
   * Protobuf enum {@code cyclonedx.v1_3.DataFlow}
   */
  public enum DataFlow
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DATA_FLOW_NULL = 0;</code>
     */
    DATA_FLOW_NULL(0),
    /**
     * <code>DATA_FLOW_INBOUND = 1;</code>
     */
    DATA_FLOW_INBOUND(1),
    /**
     * <code>DATA_FLOW_OUTBOUND = 2;</code>
     */
    DATA_FLOW_OUTBOUND(2),
    /**
     * <code>DATA_FLOW_BI_DIRECTIONAL = 3;</code>
     */
    DATA_FLOW_BI_DIRECTIONAL(3),
    /**
     * <code>DATA_FLOW_UNKNOWN = 4;</code>
     */
    DATA_FLOW_UNKNOWN(4),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        DataFlow.class.getName());
    }
    /**
     * <code>DATA_FLOW_NULL = 0;</code>
     */
    public static final int DATA_FLOW_NULL_VALUE = 0;
    /**
     * <code>DATA_FLOW_INBOUND = 1;</code>
     */
    public static final int DATA_FLOW_INBOUND_VALUE = 1;
    /**
     * <code>DATA_FLOW_OUTBOUND = 2;</code>
     */
    public static final int DATA_FLOW_OUTBOUND_VALUE = 2;
    /**
     * <code>DATA_FLOW_BI_DIRECTIONAL = 3;</code>
     */
    public static final int DATA_FLOW_BI_DIRECTIONAL_VALUE = 3;
    /**
     * <code>DATA_FLOW_UNKNOWN = 4;</code>
     */
    public static final int DATA_FLOW_UNKNOWN_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DataFlow valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DataFlow forNumber(int value) {
      switch (value) {
        case 0: return DATA_FLOW_NULL;
        case 1: return DATA_FLOW_INBOUND;
        case 2: return DATA_FLOW_OUTBOUND;
        case 3: return DATA_FLOW_BI_DIRECTIONAL;
        case 4: return DATA_FLOW_UNKNOWN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DataFlow>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DataFlow> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DataFlow>() {
            public DataFlow findValueByNumber(int number) {
              return DataFlow.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.getDescriptor().getEnumTypes().get(1);
    }

    private static final DataFlow[] VALUES = values();

    public static DataFlow valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DataFlow(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:cyclonedx.v1_3.DataFlow)
  }

  /**
   * Protobuf enum {@code cyclonedx.v1_3.ExternalReferenceType}
   */
  public enum ExternalReferenceType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Use this if no other types accurately describe the purpose of the external reference
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_OTHER = 0;</code>
     */
    EXTERNAL_REFERENCE_TYPE_OTHER(0),
    /**
     * <pre>
     * Version Control System
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_VCS = 1;</code>
     */
    EXTERNAL_REFERENCE_TYPE_VCS(1),
    /**
     * <pre>
     * Issue or defect tracking system, or an Application Lifecycle Management (ALM) system
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_ISSUE_TRACKER = 2;</code>
     */
    EXTERNAL_REFERENCE_TYPE_ISSUE_TRACKER(2),
    /**
     * <pre>
     * Website
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_WEBSITE = 3;</code>
     */
    EXTERNAL_REFERENCE_TYPE_WEBSITE(3),
    /**
     * <pre>
     * Security advisories
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_ADVISORIES = 4;</code>
     */
    EXTERNAL_REFERENCE_TYPE_ADVISORIES(4),
    /**
     * <pre>
     * Bill-of-material document (CycloneDX, SPDX, SWID, etc)
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_BOM = 5;</code>
     */
    EXTERNAL_REFERENCE_TYPE_BOM(5),
    /**
     * <pre>
     * Mailing list or discussion group
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_MAILING_LIST = 6;</code>
     */
    EXTERNAL_REFERENCE_TYPE_MAILING_LIST(6),
    /**
     * <pre>
     * Social media account
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_SOCIAL = 7;</code>
     */
    EXTERNAL_REFERENCE_TYPE_SOCIAL(7),
    /**
     * <pre>
     * Real-time chat platform
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_CHAT = 8;</code>
     */
    EXTERNAL_REFERENCE_TYPE_CHAT(8),
    /**
     * <pre>
     * Documentation, guides, or how-to instructions
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_DOCUMENTATION = 9;</code>
     */
    EXTERNAL_REFERENCE_TYPE_DOCUMENTATION(9),
    /**
     * <pre>
     * Community or commercial support
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_SUPPORT = 10;</code>
     */
    EXTERNAL_REFERENCE_TYPE_SUPPORT(10),
    /**
     * <pre>
     * Direct or repository download location
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_DISTRIBUTION = 11;</code>
     */
    EXTERNAL_REFERENCE_TYPE_DISTRIBUTION(11),
    /**
     * <pre>
     * The URL to the license file. If a license URL has been defined in the license node, it should also be defined as an external reference for completeness
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_LICENSE = 12;</code>
     */
    EXTERNAL_REFERENCE_TYPE_LICENSE(12),
    /**
     * <pre>
     * Build-system specific meta file (i.e. pom.xml, package.json, .nuspec, etc)
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_BUILD_META = 13;</code>
     */
    EXTERNAL_REFERENCE_TYPE_BUILD_META(13),
    /**
     * <pre>
     * URL to an automated build system
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_BUILD_SYSTEM = 14;</code>
     */
    EXTERNAL_REFERENCE_TYPE_BUILD_SYSTEM(14),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        ExternalReferenceType.class.getName());
    }
    /**
     * <pre>
     * Use this if no other types accurately describe the purpose of the external reference
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_OTHER = 0;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_OTHER_VALUE = 0;
    /**
     * <pre>
     * Version Control System
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_VCS = 1;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_VCS_VALUE = 1;
    /**
     * <pre>
     * Issue or defect tracking system, or an Application Lifecycle Management (ALM) system
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_ISSUE_TRACKER = 2;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_ISSUE_TRACKER_VALUE = 2;
    /**
     * <pre>
     * Website
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_WEBSITE = 3;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_WEBSITE_VALUE = 3;
    /**
     * <pre>
     * Security advisories
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_ADVISORIES = 4;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_ADVISORIES_VALUE = 4;
    /**
     * <pre>
     * Bill-of-material document (CycloneDX, SPDX, SWID, etc)
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_BOM = 5;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_BOM_VALUE = 5;
    /**
     * <pre>
     * Mailing list or discussion group
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_MAILING_LIST = 6;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_MAILING_LIST_VALUE = 6;
    /**
     * <pre>
     * Social media account
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_SOCIAL = 7;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_SOCIAL_VALUE = 7;
    /**
     * <pre>
     * Real-time chat platform
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_CHAT = 8;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_CHAT_VALUE = 8;
    /**
     * <pre>
     * Documentation, guides, or how-to instructions
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_DOCUMENTATION = 9;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_DOCUMENTATION_VALUE = 9;
    /**
     * <pre>
     * Community or commercial support
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_SUPPORT = 10;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_SUPPORT_VALUE = 10;
    /**
     * <pre>
     * Direct or repository download location
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_DISTRIBUTION = 11;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_DISTRIBUTION_VALUE = 11;
    /**
     * <pre>
     * The URL to the license file. If a license URL has been defined in the license node, it should also be defined as an external reference for completeness
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_LICENSE = 12;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_LICENSE_VALUE = 12;
    /**
     * <pre>
     * Build-system specific meta file (i.e. pom.xml, package.json, .nuspec, etc)
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_BUILD_META = 13;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_BUILD_META_VALUE = 13;
    /**
     * <pre>
     * URL to an automated build system
     * </pre>
     *
     * <code>EXTERNAL_REFERENCE_TYPE_BUILD_SYSTEM = 14;</code>
     */
    public static final int EXTERNAL_REFERENCE_TYPE_BUILD_SYSTEM_VALUE = 14;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ExternalReferenceType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ExternalReferenceType forNumber(int value) {
      switch (value) {
        case 0: return EXTERNAL_REFERENCE_TYPE_OTHER;
        case 1: return EXTERNAL_REFERENCE_TYPE_VCS;
        case 2: return EXTERNAL_REFERENCE_TYPE_ISSUE_TRACKER;
        case 3: return EXTERNAL_REFERENCE_TYPE_WEBSITE;
        case 4: return EXTERNAL_REFERENCE_TYPE_ADVISORIES;
        case 5: return EXTERNAL_REFERENCE_TYPE_BOM;
        case 6: return EXTERNAL_REFERENCE_TYPE_MAILING_LIST;
        case 7: return EXTERNAL_REFERENCE_TYPE_SOCIAL;
        case 8: return EXTERNAL_REFERENCE_TYPE_CHAT;
        case 9: return EXTERNAL_REFERENCE_TYPE_DOCUMENTATION;
        case 10: return EXTERNAL_REFERENCE_TYPE_SUPPORT;
        case 11: return EXTERNAL_REFERENCE_TYPE_DISTRIBUTION;
        case 12: return EXTERNAL_REFERENCE_TYPE_LICENSE;
        case 13: return EXTERNAL_REFERENCE_TYPE_BUILD_META;
        case 14: return EXTERNAL_REFERENCE_TYPE_BUILD_SYSTEM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ExternalReferenceType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ExternalReferenceType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ExternalReferenceType>() {
            public ExternalReferenceType findValueByNumber(int number) {
              return ExternalReferenceType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.getDescriptor().getEnumTypes().get(2);
    }

    private static final ExternalReferenceType[] VALUES = values();

    public static ExternalReferenceType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ExternalReferenceType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:cyclonedx.v1_3.ExternalReferenceType)
  }

  /**
   * Protobuf enum {@code cyclonedx.v1_3.HashAlg}
   */
  public enum HashAlg
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>HASH_ALG_NULL = 0;</code>
     */
    HASH_ALG_NULL(0),
    /**
     * <code>HASH_ALG_MD_5 = 1;</code>
     */
    HASH_ALG_MD_5(1),
    /**
     * <code>HASH_ALG_SHA_1 = 2;</code>
     */
    HASH_ALG_SHA_1(2),
    /**
     * <code>HASH_ALG_SHA_256 = 3;</code>
     */
    HASH_ALG_SHA_256(3),
    /**
     * <code>HASH_ALG_SHA_384 = 4;</code>
     */
    HASH_ALG_SHA_384(4),
    /**
     * <code>HASH_ALG_SHA_512 = 5;</code>
     */
    HASH_ALG_SHA_512(5),
    /**
     * <code>HASH_ALG_SHA_3_256 = 6;</code>
     */
    HASH_ALG_SHA_3_256(6),
    /**
     * <code>HASH_ALG_SHA_3_384 = 7;</code>
     */
    HASH_ALG_SHA_3_384(7),
    /**
     * <code>HASH_ALG_SHA_3_512 = 8;</code>
     */
    HASH_ALG_SHA_3_512(8),
    /**
     * <code>HASH_ALG_BLAKE_2_B_256 = 9;</code>
     */
    HASH_ALG_BLAKE_2_B_256(9),
    /**
     * <code>HASH_ALG_BLAKE_2_B_384 = 10;</code>
     */
    HASH_ALG_BLAKE_2_B_384(10),
    /**
     * <code>HASH_ALG_BLAKE_2_B_512 = 11;</code>
     */
    HASH_ALG_BLAKE_2_B_512(11),
    /**
     * <code>HASH_ALG_BLAKE_3 = 12;</code>
     */
    HASH_ALG_BLAKE_3(12),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        HashAlg.class.getName());
    }
    /**
     * <code>HASH_ALG_NULL = 0;</code>
     */
    public static final int HASH_ALG_NULL_VALUE = 0;
    /**
     * <code>HASH_ALG_MD_5 = 1;</code>
     */
    public static final int HASH_ALG_MD_5_VALUE = 1;
    /**
     * <code>HASH_ALG_SHA_1 = 2;</code>
     */
    public static final int HASH_ALG_SHA_1_VALUE = 2;
    /**
     * <code>HASH_ALG_SHA_256 = 3;</code>
     */
    public static final int HASH_ALG_SHA_256_VALUE = 3;
    /**
     * <code>HASH_ALG_SHA_384 = 4;</code>
     */
    public static final int HASH_ALG_SHA_384_VALUE = 4;
    /**
     * <code>HASH_ALG_SHA_512 = 5;</code>
     */
    public static final int HASH_ALG_SHA_512_VALUE = 5;
    /**
     * <code>HASH_ALG_SHA_3_256 = 6;</code>
     */
    public static final int HASH_ALG_SHA_3_256_VALUE = 6;
    /**
     * <code>HASH_ALG_SHA_3_384 = 7;</code>
     */
    public static final int HASH_ALG_SHA_3_384_VALUE = 7;
    /**
     * <code>HASH_ALG_SHA_3_512 = 8;</code>
     */
    public static final int HASH_ALG_SHA_3_512_VALUE = 8;
    /**
     * <code>HASH_ALG_BLAKE_2_B_256 = 9;</code>
     */
    public static final int HASH_ALG_BLAKE_2_B_256_VALUE = 9;
    /**
     * <code>HASH_ALG_BLAKE_2_B_384 = 10;</code>
     */
    public static final int HASH_ALG_BLAKE_2_B_384_VALUE = 10;
    /**
     * <code>HASH_ALG_BLAKE_2_B_512 = 11;</code>
     */
    public static final int HASH_ALG_BLAKE_2_B_512_VALUE = 11;
    /**
     * <code>HASH_ALG_BLAKE_3 = 12;</code>
     */
    public static final int HASH_ALG_BLAKE_3_VALUE = 12;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HashAlg valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static HashAlg forNumber(int value) {
      switch (value) {
        case 0: return HASH_ALG_NULL;
        case 1: return HASH_ALG_MD_5;
        case 2: return HASH_ALG_SHA_1;
        case 3: return HASH_ALG_SHA_256;
        case 4: return HASH_ALG_SHA_384;
        case 5: return HASH_ALG_SHA_512;
        case 6: return HASH_ALG_SHA_3_256;
        case 7: return HASH_ALG_SHA_3_384;
        case 8: return HASH_ALG_SHA_3_512;
        case 9: return HASH_ALG_BLAKE_2_B_256;
        case 10: return HASH_ALG_BLAKE_2_B_384;
        case 11: return HASH_ALG_BLAKE_2_B_512;
        case 12: return HASH_ALG_BLAKE_3;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HashAlg>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        HashAlg> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HashAlg>() {
            public HashAlg findValueByNumber(int number) {
              return HashAlg.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.getDescriptor().getEnumTypes().get(3);
    }

    private static final HashAlg[] VALUES = values();

    public static HashAlg valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private HashAlg(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:cyclonedx.v1_3.HashAlg)
  }

  /**
   * Protobuf enum {@code cyclonedx.v1_3.IssueClassification}
   */
  public enum IssueClassification
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ISSUE_CLASSIFICATION_NULL = 0;</code>
     */
    ISSUE_CLASSIFICATION_NULL(0),
    /**
     * <pre>
     * A fault, flaw, or bug in software
     * </pre>
     *
     * <code>ISSUE_CLASSIFICATION_DEFECT = 1;</code>
     */
    ISSUE_CLASSIFICATION_DEFECT(1),
    /**
     * <pre>
     * A new feature or behavior in software
     * </pre>
     *
     * <code>ISSUE_CLASSIFICATION_ENHANCEMENT = 2;</code>
     */
    ISSUE_CLASSIFICATION_ENHANCEMENT(2),
    /**
     * <pre>
     * A special type of defect which impacts security
     * </pre>
     *
     * <code>ISSUE_CLASSIFICATION_SECURITY = 3;</code>
     */
    ISSUE_CLASSIFICATION_SECURITY(3),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        IssueClassification.class.getName());
    }
    /**
     * <code>ISSUE_CLASSIFICATION_NULL = 0;</code>
     */
    public static final int ISSUE_CLASSIFICATION_NULL_VALUE = 0;
    /**
     * <pre>
     * A fault, flaw, or bug in software
     * </pre>
     *
     * <code>ISSUE_CLASSIFICATION_DEFECT = 1;</code>
     */
    public static final int ISSUE_CLASSIFICATION_DEFECT_VALUE = 1;
    /**
     * <pre>
     * A new feature or behavior in software
     * </pre>
     *
     * <code>ISSUE_CLASSIFICATION_ENHANCEMENT = 2;</code>
     */
    public static final int ISSUE_CLASSIFICATION_ENHANCEMENT_VALUE = 2;
    /**
     * <pre>
     * A special type of defect which impacts security
     * </pre>
     *
     * <code>ISSUE_CLASSIFICATION_SECURITY = 3;</code>
     */
    public static final int ISSUE_CLASSIFICATION_SECURITY_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static IssueClassification valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static IssueClassification forNumber(int value) {
      switch (value) {
        case 0: return ISSUE_CLASSIFICATION_NULL;
        case 1: return ISSUE_CLASSIFICATION_DEFECT;
        case 2: return ISSUE_CLASSIFICATION_ENHANCEMENT;
        case 3: return ISSUE_CLASSIFICATION_SECURITY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<IssueClassification>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        IssueClassification> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<IssueClassification>() {
            public IssueClassification findValueByNumber(int number) {
              return IssueClassification.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.getDescriptor().getEnumTypes().get(4);
    }

    private static final IssueClassification[] VALUES = values();

    public static IssueClassification valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private IssueClassification(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:cyclonedx.v1_3.IssueClassification)
  }

  /**
   * Protobuf enum {@code cyclonedx.v1_3.PatchClassification}
   */
  public enum PatchClassification
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PATCH_CLASSIFICATION_NULL = 0;</code>
     */
    PATCH_CLASSIFICATION_NULL(0),
    /**
     * <pre>
     * A patch which is not developed by the creators or maintainers of the software being patched. Refer to https://en.wikipedia.org/wiki/Unofficial_patch
     * </pre>
     *
     * <code>PATCH_CLASSIFICATION_UNOFFICIAL = 1;</code>
     */
    PATCH_CLASSIFICATION_UNOFFICIAL(1),
    /**
     * <pre>
     * A patch which dynamically modifies runtime behavior. Refer to https://en.wikipedia.org/wiki/Monkey_patch
     * </pre>
     *
     * <code>PATCH_CLASSIFICATION_MONKEY = 2;</code>
     */
    PATCH_CLASSIFICATION_MONKEY(2),
    /**
     * <pre>
     * A patch which takes code from a newer version of software and applies it to older versions of the same software. Refer to https://en.wikipedia.org/wiki/Backporting
     * </pre>
     *
     * <code>PATCH_CLASSIFICATION_BACKPORT = 3;</code>
     */
    PATCH_CLASSIFICATION_BACKPORT(3),
    /**
     * <pre>
     * A patch created by selectively applying commits from other versions or branches of the same software.
     * </pre>
     *
     * <code>PATCH_CLASSIFICATION_CHERRY_PICK = 4;</code>
     */
    PATCH_CLASSIFICATION_CHERRY_PICK(4),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        PatchClassification.class.getName());
    }
    /**
     * <code>PATCH_CLASSIFICATION_NULL = 0;</code>
     */
    public static final int PATCH_CLASSIFICATION_NULL_VALUE = 0;
    /**
     * <pre>
     * A patch which is not developed by the creators or maintainers of the software being patched. Refer to https://en.wikipedia.org/wiki/Unofficial_patch
     * </pre>
     *
     * <code>PATCH_CLASSIFICATION_UNOFFICIAL = 1;</code>
     */
    public static final int PATCH_CLASSIFICATION_UNOFFICIAL_VALUE = 1;
    /**
     * <pre>
     * A patch which dynamically modifies runtime behavior. Refer to https://en.wikipedia.org/wiki/Monkey_patch
     * </pre>
     *
     * <code>PATCH_CLASSIFICATION_MONKEY = 2;</code>
     */
    public static final int PATCH_CLASSIFICATION_MONKEY_VALUE = 2;
    /**
     * <pre>
     * A patch which takes code from a newer version of software and applies it to older versions of the same software. Refer to https://en.wikipedia.org/wiki/Backporting
     * </pre>
     *
     * <code>PATCH_CLASSIFICATION_BACKPORT = 3;</code>
     */
    public static final int PATCH_CLASSIFICATION_BACKPORT_VALUE = 3;
    /**
     * <pre>
     * A patch created by selectively applying commits from other versions or branches of the same software.
     * </pre>
     *
     * <code>PATCH_CLASSIFICATION_CHERRY_PICK = 4;</code>
     */
    public static final int PATCH_CLASSIFICATION_CHERRY_PICK_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PatchClassification valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PatchClassification forNumber(int value) {
      switch (value) {
        case 0: return PATCH_CLASSIFICATION_NULL;
        case 1: return PATCH_CLASSIFICATION_UNOFFICIAL;
        case 2: return PATCH_CLASSIFICATION_MONKEY;
        case 3: return PATCH_CLASSIFICATION_BACKPORT;
        case 4: return PATCH_CLASSIFICATION_CHERRY_PICK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PatchClassification>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PatchClassification> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PatchClassification>() {
            public PatchClassification findValueByNumber(int number) {
              return PatchClassification.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.getDescriptor().getEnumTypes().get(5);
    }

    private static final PatchClassification[] VALUES = values();

    public static PatchClassification valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PatchClassification(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:cyclonedx.v1_3.PatchClassification)
  }

  /**
   * Protobuf enum {@code cyclonedx.v1_3.Scope}
   */
  public enum Scope
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Default
     * </pre>
     *
     * <code>SCOPE_UNSPECIFIED = 0;</code>
     */
    SCOPE_UNSPECIFIED(0),
    /**
     * <pre>
     * The component is required for runtime
     * </pre>
     *
     * <code>SCOPE_REQUIRED = 1;</code>
     */
    SCOPE_REQUIRED(1),
    /**
     * <pre>
     * The component is optional at runtime. Optional components are components that are not capable of being called due to them not be installed or otherwise accessible by any means. Components that are installed but due to configuration or other restrictions are prohibited from being called must be scoped as 'required'.
     * </pre>
     *
     * <code>SCOPE_OPTIONAL = 2;</code>
     */
    SCOPE_OPTIONAL(2),
    /**
     * <pre>
     * Components that are excluded provide the ability to document component usage for test and other non-runtime purposes. Excluded components are not reachable within a call graph at runtime.
     * </pre>
     *
     * <code>SCOPE_EXCLUDED = 3;</code>
     */
    SCOPE_EXCLUDED(3),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Scope.class.getName());
    }
    /**
     * <pre>
     * Default
     * </pre>
     *
     * <code>SCOPE_UNSPECIFIED = 0;</code>
     */
    public static final int SCOPE_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * The component is required for runtime
     * </pre>
     *
     * <code>SCOPE_REQUIRED = 1;</code>
     */
    public static final int SCOPE_REQUIRED_VALUE = 1;
    /**
     * <pre>
     * The component is optional at runtime. Optional components are components that are not capable of being called due to them not be installed or otherwise accessible by any means. Components that are installed but due to configuration or other restrictions are prohibited from being called must be scoped as 'required'.
     * </pre>
     *
     * <code>SCOPE_OPTIONAL = 2;</code>
     */
    public static final int SCOPE_OPTIONAL_VALUE = 2;
    /**
     * <pre>
     * Components that are excluded provide the ability to document component usage for test and other non-runtime purposes. Excluded components are not reachable within a call graph at runtime.
     * </pre>
     *
     * <code>SCOPE_EXCLUDED = 3;</code>
     */
    public static final int SCOPE_EXCLUDED_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Scope valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Scope forNumber(int value) {
      switch (value) {
        case 0: return SCOPE_UNSPECIFIED;
        case 1: return SCOPE_REQUIRED;
        case 2: return SCOPE_OPTIONAL;
        case 3: return SCOPE_EXCLUDED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Scope>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Scope> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Scope>() {
            public Scope findValueByNumber(int number) {
              return Scope.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.getDescriptor().getEnumTypes().get(6);
    }

    private static final Scope[] VALUES = values();

    public static Scope valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Scope(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:cyclonedx.v1_3.Scope)
  }

  /**
   * Protobuf enum {@code cyclonedx.v1_3.Aggregate}
   */
  public enum Aggregate
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Default, no statement about the aggregate completeness is being made
     * </pre>
     *
     * <code>AGGREGATE_NOT_SPECIFIED = 0;</code>
     */
    AGGREGATE_NOT_SPECIFIED(0),
    /**
     * <pre>
     * The aggregate composition is complete
     * </pre>
     *
     * <code>AGGREGATE_COMPLETE = 1;</code>
     */
    AGGREGATE_COMPLETE(1),
    /**
     * <pre>
     * The aggregate composition is incomplete
     * </pre>
     *
     * <code>AGGREGATE_INCOMPLETE = 2;</code>
     */
    AGGREGATE_INCOMPLETE(2),
    /**
     * <pre>
     * The aggregate composition is incomplete for first party components, complete for third party components
     * </pre>
     *
     * <code>AGGREGATE_INCOMPLETE_FIRST_PARTY_ONLY = 3;</code>
     */
    AGGREGATE_INCOMPLETE_FIRST_PARTY_ONLY(3),
    /**
     * <pre>
     * The aggregate composition is incomplete for third party components, complete for first party components
     * </pre>
     *
     * <code>AGGREGATE_INCOMPLETE_THIRD_PARTY_ONLY = 4;</code>
     */
    AGGREGATE_INCOMPLETE_THIRD_PARTY_ONLY(4),
    /**
     * <pre>
     * The aggregate composition completeness is unknown
     * </pre>
     *
     * <code>AGGREGATE_UNKNOWN = 5;</code>
     */
    AGGREGATE_UNKNOWN(5),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Aggregate.class.getName());
    }
    /**
     * <pre>
     * Default, no statement about the aggregate completeness is being made
     * </pre>
     *
     * <code>AGGREGATE_NOT_SPECIFIED = 0;</code>
     */
    public static final int AGGREGATE_NOT_SPECIFIED_VALUE = 0;
    /**
     * <pre>
     * The aggregate composition is complete
     * </pre>
     *
     * <code>AGGREGATE_COMPLETE = 1;</code>
     */
    public static final int AGGREGATE_COMPLETE_VALUE = 1;
    /**
     * <pre>
     * The aggregate composition is incomplete
     * </pre>
     *
     * <code>AGGREGATE_INCOMPLETE = 2;</code>
     */
    public static final int AGGREGATE_INCOMPLETE_VALUE = 2;
    /**
     * <pre>
     * The aggregate composition is incomplete for first party components, complete for third party components
     * </pre>
     *
     * <code>AGGREGATE_INCOMPLETE_FIRST_PARTY_ONLY = 3;</code>
     */
    public static final int AGGREGATE_INCOMPLETE_FIRST_PARTY_ONLY_VALUE = 3;
    /**
     * <pre>
     * The aggregate composition is incomplete for third party components, complete for first party components
     * </pre>
     *
     * <code>AGGREGATE_INCOMPLETE_THIRD_PARTY_ONLY = 4;</code>
     */
    public static final int AGGREGATE_INCOMPLETE_THIRD_PARTY_ONLY_VALUE = 4;
    /**
     * <pre>
     * The aggregate composition completeness is unknown
     * </pre>
     *
     * <code>AGGREGATE_UNKNOWN = 5;</code>
     */
    public static final int AGGREGATE_UNKNOWN_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Aggregate valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Aggregate forNumber(int value) {
      switch (value) {
        case 0: return AGGREGATE_NOT_SPECIFIED;
        case 1: return AGGREGATE_COMPLETE;
        case 2: return AGGREGATE_INCOMPLETE;
        case 3: return AGGREGATE_INCOMPLETE_FIRST_PARTY_ONLY;
        case 4: return AGGREGATE_INCOMPLETE_THIRD_PARTY_ONLY;
        case 5: return AGGREGATE_UNKNOWN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Aggregate>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Aggregate> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Aggregate>() {
            public Aggregate findValueByNumber(int number) {
              return Aggregate.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.getDescriptor().getEnumTypes().get(7);
    }

    private static final Aggregate[] VALUES = values();

    public static Aggregate valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Aggregate(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:cyclonedx.v1_3.Aggregate)
  }

  public interface AttachedTextOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.AttachedText)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the content type of the text. Defaults to text/plain if not specified.
     * </pre>
     *
     * <code>optional string content_type = 1;</code>
     * @return Whether the contentType field is set.
     */
    boolean hasContentType();
    /**
     * <pre>
     * Specifies the content type of the text. Defaults to text/plain if not specified.
     * </pre>
     *
     * <code>optional string content_type = 1;</code>
     * @return The contentType.
     */
    java.lang.String getContentType();
    /**
     * <pre>
     * Specifies the content type of the text. Defaults to text/plain if not specified.
     * </pre>
     *
     * <code>optional string content_type = 1;</code>
     * @return The bytes for contentType.
     */
    com.google.protobuf.ByteString
        getContentTypeBytes();

    /**
     * <pre>
     * Specifies the optional encoding the text is represented in
     * </pre>
     *
     * <code>optional string encoding = 2;</code>
     * @return Whether the encoding field is set.
     */
    boolean hasEncoding();
    /**
     * <pre>
     * Specifies the optional encoding the text is represented in
     * </pre>
     *
     * <code>optional string encoding = 2;</code>
     * @return The encoding.
     */
    java.lang.String getEncoding();
    /**
     * <pre>
     * Specifies the optional encoding the text is represented in
     * </pre>
     *
     * <code>optional string encoding = 2;</code>
     * @return The bytes for encoding.
     */
    com.google.protobuf.ByteString
        getEncodingBytes();

    /**
     * <pre>
     * SimpleContent value of element
     * </pre>
     *
     * <code>string value = 3;</code>
     * @return The value.
     */
    java.lang.String getValue();
    /**
     * <pre>
     * SimpleContent value of element
     * </pre>
     *
     * <code>string value = 3;</code>
     * @return The bytes for value.
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * <pre>
   * Specifies attributes of the text
   * </pre>
   *
   * Protobuf type {@code cyclonedx.v1_3.AttachedText}
   */
  public static final class AttachedText extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.AttachedText)
      AttachedTextOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        AttachedText.class.getName());
    }
    // Use AttachedText.newBuilder() to construct.
    private AttachedText(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private AttachedText() {
      contentType_ = "";
      encoding_ = "";
      value_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_AttachedText_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_AttachedText_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.AttachedText.class, cyclonedx.v1_3.Bom13.AttachedText.Builder.class);
    }

    private int bitField0_;
    public static final int CONTENT_TYPE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object contentType_ = "";
    /**
     * <pre>
     * Specifies the content type of the text. Defaults to text/plain if not specified.
     * </pre>
     *
     * <code>optional string content_type = 1;</code>
     * @return Whether the contentType field is set.
     */
    @java.lang.Override
    public boolean hasContentType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Specifies the content type of the text. Defaults to text/plain if not specified.
     * </pre>
     *
     * <code>optional string content_type = 1;</code>
     * @return The contentType.
     */
    @java.lang.Override
    public java.lang.String getContentType() {
      java.lang.Object ref = contentType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        contentType_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Specifies the content type of the text. Defaults to text/plain if not specified.
     * </pre>
     *
     * <code>optional string content_type = 1;</code>
     * @return The bytes for contentType.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getContentTypeBytes() {
      java.lang.Object ref = contentType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        contentType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ENCODING_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object encoding_ = "";
    /**
     * <pre>
     * Specifies the optional encoding the text is represented in
     * </pre>
     *
     * <code>optional string encoding = 2;</code>
     * @return Whether the encoding field is set.
     */
    @java.lang.Override
    public boolean hasEncoding() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Specifies the optional encoding the text is represented in
     * </pre>
     *
     * <code>optional string encoding = 2;</code>
     * @return The encoding.
     */
    @java.lang.Override
    public java.lang.String getEncoding() {
      java.lang.Object ref = encoding_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        encoding_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Specifies the optional encoding the text is represented in
     * </pre>
     *
     * <code>optional string encoding = 2;</code>
     * @return The bytes for encoding.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getEncodingBytes() {
      java.lang.Object ref = encoding_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        encoding_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object value_ = "";
    /**
     * <pre>
     * SimpleContent value of element
     * </pre>
     *
     * <code>string value = 3;</code>
     * @return The value.
     */
    @java.lang.Override
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        value_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * SimpleContent value of element
     * </pre>
     *
     * <code>string value = 3;</code>
     * @return The bytes for value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, contentType_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, encoding_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(value_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, value_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, contentType_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, encoding_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(value_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.AttachedText)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.AttachedText other = (cyclonedx.v1_3.Bom13.AttachedText) obj;

      if (hasContentType() != other.hasContentType()) return false;
      if (hasContentType()) {
        if (!getContentType()
            .equals(other.getContentType())) return false;
      }
      if (hasEncoding() != other.hasEncoding()) return false;
      if (hasEncoding()) {
        if (!getEncoding()
            .equals(other.getEncoding())) return false;
      }
      if (!getValue()
          .equals(other.getValue())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasContentType()) {
        hash = (37 * hash) + CONTENT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getContentType().hashCode();
      }
      if (hasEncoding()) {
        hash = (37 * hash) + ENCODING_FIELD_NUMBER;
        hash = (53 * hash) + getEncoding().hashCode();
      }
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.AttachedText parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.AttachedText parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.AttachedText parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.AttachedText parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.AttachedText parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.AttachedText parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.AttachedText parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.AttachedText parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.AttachedText parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.AttachedText parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.AttachedText parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.AttachedText parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.AttachedText prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies attributes of the text
     * </pre>
     *
     * Protobuf type {@code cyclonedx.v1_3.AttachedText}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.AttachedText)
        cyclonedx.v1_3.Bom13.AttachedTextOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_AttachedText_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_AttachedText_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.AttachedText.class, cyclonedx.v1_3.Bom13.AttachedText.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.AttachedText.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        contentType_ = "";
        encoding_ = "";
        value_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_AttachedText_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.AttachedText getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.AttachedText build() {
        cyclonedx.v1_3.Bom13.AttachedText result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.AttachedText buildPartial() {
        cyclonedx.v1_3.Bom13.AttachedText result = new cyclonedx.v1_3.Bom13.AttachedText(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.AttachedText result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.contentType_ = contentType_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.encoding_ = encoding_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.value_ = value_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.AttachedText) {
          return mergeFrom((cyclonedx.v1_3.Bom13.AttachedText)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.AttachedText other) {
        if (other == cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance()) return this;
        if (other.hasContentType()) {
          contentType_ = other.contentType_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasEncoding()) {
          encoding_ = other.encoding_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (!other.getValue().isEmpty()) {
          value_ = other.value_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                contentType_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                encoding_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                value_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object contentType_ = "";
      /**
       * <pre>
       * Specifies the content type of the text. Defaults to text/plain if not specified.
       * </pre>
       *
       * <code>optional string content_type = 1;</code>
       * @return Whether the contentType field is set.
       */
      public boolean hasContentType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Specifies the content type of the text. Defaults to text/plain if not specified.
       * </pre>
       *
       * <code>optional string content_type = 1;</code>
       * @return The contentType.
       */
      public java.lang.String getContentType() {
        java.lang.Object ref = contentType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          contentType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies the content type of the text. Defaults to text/plain if not specified.
       * </pre>
       *
       * <code>optional string content_type = 1;</code>
       * @return The bytes for contentType.
       */
      public com.google.protobuf.ByteString
          getContentTypeBytes() {
        java.lang.Object ref = contentType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          contentType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies the content type of the text. Defaults to text/plain if not specified.
       * </pre>
       *
       * <code>optional string content_type = 1;</code>
       * @param value The contentType to set.
       * @return This builder for chaining.
       */
      public Builder setContentType(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        contentType_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the content type of the text. Defaults to text/plain if not specified.
       * </pre>
       *
       * <code>optional string content_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearContentType() {
        contentType_ = getDefaultInstance().getContentType();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the content type of the text. Defaults to text/plain if not specified.
       * </pre>
       *
       * <code>optional string content_type = 1;</code>
       * @param value The bytes for contentType to set.
       * @return This builder for chaining.
       */
      public Builder setContentTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        contentType_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object encoding_ = "";
      /**
       * <pre>
       * Specifies the optional encoding the text is represented in
       * </pre>
       *
       * <code>optional string encoding = 2;</code>
       * @return Whether the encoding field is set.
       */
      public boolean hasEncoding() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Specifies the optional encoding the text is represented in
       * </pre>
       *
       * <code>optional string encoding = 2;</code>
       * @return The encoding.
       */
      public java.lang.String getEncoding() {
        java.lang.Object ref = encoding_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          encoding_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies the optional encoding the text is represented in
       * </pre>
       *
       * <code>optional string encoding = 2;</code>
       * @return The bytes for encoding.
       */
      public com.google.protobuf.ByteString
          getEncodingBytes() {
        java.lang.Object ref = encoding_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          encoding_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies the optional encoding the text is represented in
       * </pre>
       *
       * <code>optional string encoding = 2;</code>
       * @param value The encoding to set.
       * @return This builder for chaining.
       */
      public Builder setEncoding(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        encoding_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the optional encoding the text is represented in
       * </pre>
       *
       * <code>optional string encoding = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearEncoding() {
        encoding_ = getDefaultInstance().getEncoding();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the optional encoding the text is represented in
       * </pre>
       *
       * <code>optional string encoding = 2;</code>
       * @param value The bytes for encoding to set.
       * @return This builder for chaining.
       */
      public Builder setEncodingBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        encoding_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object value_ = "";
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 3;</code>
       * @return The value.
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 3;</code>
       * @return The bytes for value.
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 3;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        value_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        value_ = getDefaultInstance().getValue();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 3;</code>
       * @param value The bytes for value to set.
       * @return This builder for chaining.
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        value_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.AttachedText)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.AttachedText)
    private static final cyclonedx.v1_3.Bom13.AttachedText DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.AttachedText();
    }

    public static cyclonedx.v1_3.Bom13.AttachedText getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AttachedText>
        PARSER = new com.google.protobuf.AbstractParser<AttachedText>() {
      @java.lang.Override
      public AttachedText parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AttachedText> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AttachedText> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.AttachedText getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BomOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Bom)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The version of the CycloneDX specification a BOM is written to (starting at version 1.3)
     * </pre>
     *
     * <code>string spec_version = 1;</code>
     * @return The specVersion.
     */
    java.lang.String getSpecVersion();
    /**
     * <pre>
     * The version of the CycloneDX specification a BOM is written to (starting at version 1.3)
     * </pre>
     *
     * <code>string spec_version = 1;</code>
     * @return The bytes for specVersion.
     */
    com.google.protobuf.ByteString
        getSpecVersionBytes();

    /**
     * <pre>
     * The version allows component publishers/authors to make changes to existing BOMs to update various aspects of the document such as description or licenses. When a system is presented with multiple BOMs for the same component, the system should use the most recent version of the BOM. The default version is '1' and should be incremented for each version of the BOM that is published. Each version of a component should have a unique BOM and if no changes are made to the BOMs, then each BOM will have a version of '1'.
     * </pre>
     *
     * <code>optional int32 version = 2;</code>
     * @return Whether the version field is set.
     */
    boolean hasVersion();
    /**
     * <pre>
     * The version allows component publishers/authors to make changes to existing BOMs to update various aspects of the document such as description or licenses. When a system is presented with multiple BOMs for the same component, the system should use the most recent version of the BOM. The default version is '1' and should be incremented for each version of the BOM that is published. Each version of a component should have a unique BOM and if no changes are made to the BOMs, then each BOM will have a version of '1'.
     * </pre>
     *
     * <code>optional int32 version = 2;</code>
     * @return The version.
     */
    int getVersion();

    /**
     * <pre>
     * Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
     * </pre>
     *
     * <code>optional string serial_number = 3;</code>
     * @return Whether the serialNumber field is set.
     */
    boolean hasSerialNumber();
    /**
     * <pre>
     * Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
     * </pre>
     *
     * <code>optional string serial_number = 3;</code>
     * @return The serialNumber.
     */
    java.lang.String getSerialNumber();
    /**
     * <pre>
     * Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
     * </pre>
     *
     * <code>optional string serial_number = 3;</code>
     * @return The bytes for serialNumber.
     */
    com.google.protobuf.ByteString
        getSerialNumberBytes();

    /**
     * <pre>
     * Provides additional information about a BOM.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
     * @return Whether the metadata field is set.
     */
    boolean hasMetadata();
    /**
     * <pre>
     * Provides additional information about a BOM.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
     * @return The metadata.
     */
    cyclonedx.v1_3.Bom13.Metadata getMetadata();
    /**
     * <pre>
     * Provides additional information about a BOM.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
     */
    cyclonedx.v1_3.Bom13.MetadataOrBuilder getMetadataOrBuilder();

    /**
     * <pre>
     * Provides the ability to document a list of components.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Component> 
        getComponentsList();
    /**
     * <pre>
     * Provides the ability to document a list of components.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
     */
    cyclonedx.v1_3.Bom13.Component getComponents(int index);
    /**
     * <pre>
     * Provides the ability to document a list of components.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
     */
    int getComponentsCount();
    /**
     * <pre>
     * Provides the ability to document a list of components.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
        getComponentsOrBuilderList();
    /**
     * <pre>
     * Provides the ability to document a list of components.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
     */
    cyclonedx.v1_3.Bom13.ComponentOrBuilder getComponentsOrBuilder(
        int index);

    /**
     * <pre>
     * Provides the ability to document a list of external services.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Service> 
        getServicesList();
    /**
     * <pre>
     * Provides the ability to document a list of external services.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
     */
    cyclonedx.v1_3.Bom13.Service getServices(int index);
    /**
     * <pre>
     * Provides the ability to document a list of external services.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
     */
    int getServicesCount();
    /**
     * <pre>
     * Provides the ability to document a list of external services.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.ServiceOrBuilder> 
        getServicesOrBuilderList();
    /**
     * <pre>
     * Provides the ability to document a list of external services.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
     */
    cyclonedx.v1_3.Bom13.ServiceOrBuilder getServicesOrBuilder(
        int index);

    /**
     * <pre>
     * Provides the ability to document external references related to the BOM or to the project the BOM describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> 
        getExternalReferencesList();
    /**
     * <pre>
     * Provides the ability to document external references related to the BOM or to the project the BOM describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
     */
    cyclonedx.v1_3.Bom13.ExternalReference getExternalReferences(int index);
    /**
     * <pre>
     * Provides the ability to document external references related to the BOM or to the project the BOM describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
     */
    int getExternalReferencesCount();
    /**
     * <pre>
     * Provides the ability to document external references related to the BOM or to the project the BOM describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> 
        getExternalReferencesOrBuilderList();
    /**
     * <pre>
     * Provides the ability to document external references related to the BOM or to the project the BOM describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
     */
    cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder getExternalReferencesOrBuilder(
        int index);

    /**
     * <pre>
     * Provides the ability to document dependency relationships.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Dependency> 
        getDependenciesList();
    /**
     * <pre>
     * Provides the ability to document dependency relationships.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
     */
    cyclonedx.v1_3.Bom13.Dependency getDependencies(int index);
    /**
     * <pre>
     * Provides the ability to document dependency relationships.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
     */
    int getDependenciesCount();
    /**
     * <pre>
     * Provides the ability to document dependency relationships.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.DependencyOrBuilder> 
        getDependenciesOrBuilderList();
    /**
     * <pre>
     * Provides the ability to document dependency relationships.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
     */
    cyclonedx.v1_3.Bom13.DependencyOrBuilder getDependenciesOrBuilder(
        int index);

    /**
     * <pre>
     * Provides the ability to document aggregate completeness
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Composition> 
        getCompositionsList();
    /**
     * <pre>
     * Provides the ability to document aggregate completeness
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
     */
    cyclonedx.v1_3.Bom13.Composition getCompositions(int index);
    /**
     * <pre>
     * Provides the ability to document aggregate completeness
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
     */
    int getCompositionsCount();
    /**
     * <pre>
     * Provides the ability to document aggregate completeness
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.CompositionOrBuilder> 
        getCompositionsOrBuilderList();
    /**
     * <pre>
     * Provides the ability to document aggregate completeness
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
     */
    cyclonedx.v1_3.Bom13.CompositionOrBuilder getCompositionsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.Bom}
   */
  public static final class Bom extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Bom)
      BomOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Bom.class.getName());
    }
    // Use Bom.newBuilder() to construct.
    private Bom(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Bom() {
      specVersion_ = "";
      serialNumber_ = "";
      components_ = java.util.Collections.emptyList();
      services_ = java.util.Collections.emptyList();
      externalReferences_ = java.util.Collections.emptyList();
      dependencies_ = java.util.Collections.emptyList();
      compositions_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Bom_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Bom_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Bom.class, cyclonedx.v1_3.Bom13.Bom.Builder.class);
    }

    private int bitField0_;
    public static final int SPEC_VERSION_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object specVersion_ = "";
    /**
     * <pre>
     * The version of the CycloneDX specification a BOM is written to (starting at version 1.3)
     * </pre>
     *
     * <code>string spec_version = 1;</code>
     * @return The specVersion.
     */
    @java.lang.Override
    public java.lang.String getSpecVersion() {
      java.lang.Object ref = specVersion_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        specVersion_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The version of the CycloneDX specification a BOM is written to (starting at version 1.3)
     * </pre>
     *
     * <code>string spec_version = 1;</code>
     * @return The bytes for specVersion.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSpecVersionBytes() {
      java.lang.Object ref = specVersion_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        specVersion_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VERSION_FIELD_NUMBER = 2;
    private int version_ = 0;
    /**
     * <pre>
     * The version allows component publishers/authors to make changes to existing BOMs to update various aspects of the document such as description or licenses. When a system is presented with multiple BOMs for the same component, the system should use the most recent version of the BOM. The default version is '1' and should be incremented for each version of the BOM that is published. Each version of a component should have a unique BOM and if no changes are made to the BOMs, then each BOM will have a version of '1'.
     * </pre>
     *
     * <code>optional int32 version = 2;</code>
     * @return Whether the version field is set.
     */
    @java.lang.Override
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The version allows component publishers/authors to make changes to existing BOMs to update various aspects of the document such as description or licenses. When a system is presented with multiple BOMs for the same component, the system should use the most recent version of the BOM. The default version is '1' and should be incremented for each version of the BOM that is published. Each version of a component should have a unique BOM and if no changes are made to the BOMs, then each BOM will have a version of '1'.
     * </pre>
     *
     * <code>optional int32 version = 2;</code>
     * @return The version.
     */
    @java.lang.Override
    public int getVersion() {
      return version_;
    }

    public static final int SERIAL_NUMBER_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object serialNumber_ = "";
    /**
     * <pre>
     * Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
     * </pre>
     *
     * <code>optional string serial_number = 3;</code>
     * @return Whether the serialNumber field is set.
     */
    @java.lang.Override
    public boolean hasSerialNumber() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
     * </pre>
     *
     * <code>optional string serial_number = 3;</code>
     * @return The serialNumber.
     */
    @java.lang.Override
    public java.lang.String getSerialNumber() {
      java.lang.Object ref = serialNumber_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        serialNumber_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
     * </pre>
     *
     * <code>optional string serial_number = 3;</code>
     * @return The bytes for serialNumber.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSerialNumberBytes() {
      java.lang.Object ref = serialNumber_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        serialNumber_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int METADATA_FIELD_NUMBER = 4;
    private cyclonedx.v1_3.Bom13.Metadata metadata_;
    /**
     * <pre>
     * Provides additional information about a BOM.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
     * @return Whether the metadata field is set.
     */
    @java.lang.Override
    public boolean hasMetadata() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Provides additional information about a BOM.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
     * @return The metadata.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Metadata getMetadata() {
      return metadata_ == null ? cyclonedx.v1_3.Bom13.Metadata.getDefaultInstance() : metadata_;
    }
    /**
     * <pre>
     * Provides additional information about a BOM.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.MetadataOrBuilder getMetadataOrBuilder() {
      return metadata_ == null ? cyclonedx.v1_3.Bom13.Metadata.getDefaultInstance() : metadata_;
    }

    public static final int COMPONENTS_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Component> components_;
    /**
     * <pre>
     * Provides the ability to document a list of components.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Component> getComponentsList() {
      return components_;
    }
    /**
     * <pre>
     * Provides the ability to document a list of components.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
        getComponentsOrBuilderList() {
      return components_;
    }
    /**
     * <pre>
     * Provides the ability to document a list of components.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
     */
    @java.lang.Override
    public int getComponentsCount() {
      return components_.size();
    }
    /**
     * <pre>
     * Provides the ability to document a list of components.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Component getComponents(int index) {
      return components_.get(index);
    }
    /**
     * <pre>
     * Provides the ability to document a list of components.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ComponentOrBuilder getComponentsOrBuilder(
        int index) {
      return components_.get(index);
    }

    public static final int SERVICES_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Service> services_;
    /**
     * <pre>
     * Provides the ability to document a list of external services.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Service> getServicesList() {
      return services_;
    }
    /**
     * <pre>
     * Provides the ability to document a list of external services.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.ServiceOrBuilder> 
        getServicesOrBuilderList() {
      return services_;
    }
    /**
     * <pre>
     * Provides the ability to document a list of external services.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
     */
    @java.lang.Override
    public int getServicesCount() {
      return services_.size();
    }
    /**
     * <pre>
     * Provides the ability to document a list of external services.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Service getServices(int index) {
      return services_.get(index);
    }
    /**
     * <pre>
     * Provides the ability to document a list of external services.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ServiceOrBuilder getServicesOrBuilder(
        int index) {
      return services_.get(index);
    }

    public static final int EXTERNAL_REFERENCES_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> externalReferences_;
    /**
     * <pre>
     * Provides the ability to document external references related to the BOM or to the project the BOM describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> getExternalReferencesList() {
      return externalReferences_;
    }
    /**
     * <pre>
     * Provides the ability to document external references related to the BOM or to the project the BOM describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> 
        getExternalReferencesOrBuilderList() {
      return externalReferences_;
    }
    /**
     * <pre>
     * Provides the ability to document external references related to the BOM or to the project the BOM describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
     */
    @java.lang.Override
    public int getExternalReferencesCount() {
      return externalReferences_.size();
    }
    /**
     * <pre>
     * Provides the ability to document external references related to the BOM or to the project the BOM describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ExternalReference getExternalReferences(int index) {
      return externalReferences_.get(index);
    }
    /**
     * <pre>
     * Provides the ability to document external references related to the BOM or to the project the BOM describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder getExternalReferencesOrBuilder(
        int index) {
      return externalReferences_.get(index);
    }

    public static final int DEPENDENCIES_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Dependency> dependencies_;
    /**
     * <pre>
     * Provides the ability to document dependency relationships.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Dependency> getDependenciesList() {
      return dependencies_;
    }
    /**
     * <pre>
     * Provides the ability to document dependency relationships.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.DependencyOrBuilder> 
        getDependenciesOrBuilderList() {
      return dependencies_;
    }
    /**
     * <pre>
     * Provides the ability to document dependency relationships.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
     */
    @java.lang.Override
    public int getDependenciesCount() {
      return dependencies_.size();
    }
    /**
     * <pre>
     * Provides the ability to document dependency relationships.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Dependency getDependencies(int index) {
      return dependencies_.get(index);
    }
    /**
     * <pre>
     * Provides the ability to document dependency relationships.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.DependencyOrBuilder getDependenciesOrBuilder(
        int index) {
      return dependencies_.get(index);
    }

    public static final int COMPOSITIONS_FIELD_NUMBER = 9;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Composition> compositions_;
    /**
     * <pre>
     * Provides the ability to document aggregate completeness
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Composition> getCompositionsList() {
      return compositions_;
    }
    /**
     * <pre>
     * Provides the ability to document aggregate completeness
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.CompositionOrBuilder> 
        getCompositionsOrBuilderList() {
      return compositions_;
    }
    /**
     * <pre>
     * Provides the ability to document aggregate completeness
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
     */
    @java.lang.Override
    public int getCompositionsCount() {
      return compositions_.size();
    }
    /**
     * <pre>
     * Provides the ability to document aggregate completeness
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Composition getCompositions(int index) {
      return compositions_.get(index);
    }
    /**
     * <pre>
     * Provides the ability to document aggregate completeness
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.CompositionOrBuilder getCompositionsOrBuilder(
        int index) {
      return compositions_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(specVersion_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, specVersion_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(2, version_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, serialNumber_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(4, getMetadata());
      }
      for (int i = 0; i < components_.size(); i++) {
        output.writeMessage(5, components_.get(i));
      }
      for (int i = 0; i < services_.size(); i++) {
        output.writeMessage(6, services_.get(i));
      }
      for (int i = 0; i < externalReferences_.size(); i++) {
        output.writeMessage(7, externalReferences_.get(i));
      }
      for (int i = 0; i < dependencies_.size(); i++) {
        output.writeMessage(8, dependencies_.get(i));
      }
      for (int i = 0; i < compositions_.size(); i++) {
        output.writeMessage(9, compositions_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(specVersion_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, specVersion_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, version_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, serialNumber_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getMetadata());
      }
      for (int i = 0; i < components_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, components_.get(i));
      }
      for (int i = 0; i < services_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, services_.get(i));
      }
      for (int i = 0; i < externalReferences_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, externalReferences_.get(i));
      }
      for (int i = 0; i < dependencies_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, dependencies_.get(i));
      }
      for (int i = 0; i < compositions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, compositions_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Bom)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Bom other = (cyclonedx.v1_3.Bom13.Bom) obj;

      if (!getSpecVersion()
          .equals(other.getSpecVersion())) return false;
      if (hasVersion() != other.hasVersion()) return false;
      if (hasVersion()) {
        if (getVersion()
            != other.getVersion()) return false;
      }
      if (hasSerialNumber() != other.hasSerialNumber()) return false;
      if (hasSerialNumber()) {
        if (!getSerialNumber()
            .equals(other.getSerialNumber())) return false;
      }
      if (hasMetadata() != other.hasMetadata()) return false;
      if (hasMetadata()) {
        if (!getMetadata()
            .equals(other.getMetadata())) return false;
      }
      if (!getComponentsList()
          .equals(other.getComponentsList())) return false;
      if (!getServicesList()
          .equals(other.getServicesList())) return false;
      if (!getExternalReferencesList()
          .equals(other.getExternalReferencesList())) return false;
      if (!getDependenciesList()
          .equals(other.getDependenciesList())) return false;
      if (!getCompositionsList()
          .equals(other.getCompositionsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SPEC_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getSpecVersion().hashCode();
      if (hasVersion()) {
        hash = (37 * hash) + VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getVersion();
      }
      if (hasSerialNumber()) {
        hash = (37 * hash) + SERIAL_NUMBER_FIELD_NUMBER;
        hash = (53 * hash) + getSerialNumber().hashCode();
      }
      if (hasMetadata()) {
        hash = (37 * hash) + METADATA_FIELD_NUMBER;
        hash = (53 * hash) + getMetadata().hashCode();
      }
      if (getComponentsCount() > 0) {
        hash = (37 * hash) + COMPONENTS_FIELD_NUMBER;
        hash = (53 * hash) + getComponentsList().hashCode();
      }
      if (getServicesCount() > 0) {
        hash = (37 * hash) + SERVICES_FIELD_NUMBER;
        hash = (53 * hash) + getServicesList().hashCode();
      }
      if (getExternalReferencesCount() > 0) {
        hash = (37 * hash) + EXTERNAL_REFERENCES_FIELD_NUMBER;
        hash = (53 * hash) + getExternalReferencesList().hashCode();
      }
      if (getDependenciesCount() > 0) {
        hash = (37 * hash) + DEPENDENCIES_FIELD_NUMBER;
        hash = (53 * hash) + getDependenciesList().hashCode();
      }
      if (getCompositionsCount() > 0) {
        hash = (37 * hash) + COMPOSITIONS_FIELD_NUMBER;
        hash = (53 * hash) + getCompositionsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Bom parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Bom parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Bom parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Bom parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Bom parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Bom parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Bom parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Bom parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Bom parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Bom parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Bom parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Bom parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Bom prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.Bom}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Bom)
        cyclonedx.v1_3.Bom13.BomOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Bom_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Bom_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Bom.class, cyclonedx.v1_3.Bom13.Bom.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Bom.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getMetadataFieldBuilder();
          getComponentsFieldBuilder();
          getServicesFieldBuilder();
          getExternalReferencesFieldBuilder();
          getDependenciesFieldBuilder();
          getCompositionsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        specVersion_ = "";
        version_ = 0;
        serialNumber_ = "";
        metadata_ = null;
        if (metadataBuilder_ != null) {
          metadataBuilder_.dispose();
          metadataBuilder_ = null;
        }
        if (componentsBuilder_ == null) {
          components_ = java.util.Collections.emptyList();
        } else {
          components_ = null;
          componentsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (servicesBuilder_ == null) {
          services_ = java.util.Collections.emptyList();
        } else {
          services_ = null;
          servicesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (externalReferencesBuilder_ == null) {
          externalReferences_ = java.util.Collections.emptyList();
        } else {
          externalReferences_ = null;
          externalReferencesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (dependenciesBuilder_ == null) {
          dependencies_ = java.util.Collections.emptyList();
        } else {
          dependencies_ = null;
          dependenciesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (compositionsBuilder_ == null) {
          compositions_ = java.util.Collections.emptyList();
        } else {
          compositions_ = null;
          compositionsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Bom_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Bom getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Bom.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Bom build() {
        cyclonedx.v1_3.Bom13.Bom result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Bom buildPartial() {
        cyclonedx.v1_3.Bom13.Bom result = new cyclonedx.v1_3.Bom13.Bom(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(cyclonedx.v1_3.Bom13.Bom result) {
        if (componentsBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            components_ = java.util.Collections.unmodifiableList(components_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.components_ = components_;
        } else {
          result.components_ = componentsBuilder_.build();
        }
        if (servicesBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0)) {
            services_ = java.util.Collections.unmodifiableList(services_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.services_ = services_;
        } else {
          result.services_ = servicesBuilder_.build();
        }
        if (externalReferencesBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0)) {
            externalReferences_ = java.util.Collections.unmodifiableList(externalReferences_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.externalReferences_ = externalReferences_;
        } else {
          result.externalReferences_ = externalReferencesBuilder_.build();
        }
        if (dependenciesBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0)) {
            dependencies_ = java.util.Collections.unmodifiableList(dependencies_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.dependencies_ = dependencies_;
        } else {
          result.dependencies_ = dependenciesBuilder_.build();
        }
        if (compositionsBuilder_ == null) {
          if (((bitField0_ & 0x00000100) != 0)) {
            compositions_ = java.util.Collections.unmodifiableList(compositions_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.compositions_ = compositions_;
        } else {
          result.compositions_ = compositionsBuilder_.build();
        }
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Bom result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.specVersion_ = specVersion_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.version_ = version_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.serialNumber_ = serialNumber_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.metadata_ = metadataBuilder_ == null
              ? metadata_
              : metadataBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Bom) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Bom)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Bom other) {
        if (other == cyclonedx.v1_3.Bom13.Bom.getDefaultInstance()) return this;
        if (!other.getSpecVersion().isEmpty()) {
          specVersion_ = other.specVersion_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasSerialNumber()) {
          serialNumber_ = other.serialNumber_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.hasMetadata()) {
          mergeMetadata(other.getMetadata());
        }
        if (componentsBuilder_ == null) {
          if (!other.components_.isEmpty()) {
            if (components_.isEmpty()) {
              components_ = other.components_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureComponentsIsMutable();
              components_.addAll(other.components_);
            }
            onChanged();
          }
        } else {
          if (!other.components_.isEmpty()) {
            if (componentsBuilder_.isEmpty()) {
              componentsBuilder_.dispose();
              componentsBuilder_ = null;
              components_ = other.components_;
              bitField0_ = (bitField0_ & ~0x00000010);
              componentsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getComponentsFieldBuilder() : null;
            } else {
              componentsBuilder_.addAllMessages(other.components_);
            }
          }
        }
        if (servicesBuilder_ == null) {
          if (!other.services_.isEmpty()) {
            if (services_.isEmpty()) {
              services_ = other.services_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureServicesIsMutable();
              services_.addAll(other.services_);
            }
            onChanged();
          }
        } else {
          if (!other.services_.isEmpty()) {
            if (servicesBuilder_.isEmpty()) {
              servicesBuilder_.dispose();
              servicesBuilder_ = null;
              services_ = other.services_;
              bitField0_ = (bitField0_ & ~0x00000020);
              servicesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getServicesFieldBuilder() : null;
            } else {
              servicesBuilder_.addAllMessages(other.services_);
            }
          }
        }
        if (externalReferencesBuilder_ == null) {
          if (!other.externalReferences_.isEmpty()) {
            if (externalReferences_.isEmpty()) {
              externalReferences_ = other.externalReferences_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureExternalReferencesIsMutable();
              externalReferences_.addAll(other.externalReferences_);
            }
            onChanged();
          }
        } else {
          if (!other.externalReferences_.isEmpty()) {
            if (externalReferencesBuilder_.isEmpty()) {
              externalReferencesBuilder_.dispose();
              externalReferencesBuilder_ = null;
              externalReferences_ = other.externalReferences_;
              bitField0_ = (bitField0_ & ~0x00000040);
              externalReferencesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getExternalReferencesFieldBuilder() : null;
            } else {
              externalReferencesBuilder_.addAllMessages(other.externalReferences_);
            }
          }
        }
        if (dependenciesBuilder_ == null) {
          if (!other.dependencies_.isEmpty()) {
            if (dependencies_.isEmpty()) {
              dependencies_ = other.dependencies_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureDependenciesIsMutable();
              dependencies_.addAll(other.dependencies_);
            }
            onChanged();
          }
        } else {
          if (!other.dependencies_.isEmpty()) {
            if (dependenciesBuilder_.isEmpty()) {
              dependenciesBuilder_.dispose();
              dependenciesBuilder_ = null;
              dependencies_ = other.dependencies_;
              bitField0_ = (bitField0_ & ~0x00000080);
              dependenciesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDependenciesFieldBuilder() : null;
            } else {
              dependenciesBuilder_.addAllMessages(other.dependencies_);
            }
          }
        }
        if (compositionsBuilder_ == null) {
          if (!other.compositions_.isEmpty()) {
            if (compositions_.isEmpty()) {
              compositions_ = other.compositions_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureCompositionsIsMutable();
              compositions_.addAll(other.compositions_);
            }
            onChanged();
          }
        } else {
          if (!other.compositions_.isEmpty()) {
            if (compositionsBuilder_.isEmpty()) {
              compositionsBuilder_.dispose();
              compositionsBuilder_ = null;
              compositions_ = other.compositions_;
              bitField0_ = (bitField0_ & ~0x00000100);
              compositionsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCompositionsFieldBuilder() : null;
            } else {
              compositionsBuilder_.addAllMessages(other.compositions_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                specVersion_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                version_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                serialNumber_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getMetadataFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                cyclonedx.v1_3.Bom13.Component m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Component.parser(),
                        extensionRegistry);
                if (componentsBuilder_ == null) {
                  ensureComponentsIsMutable();
                  components_.add(m);
                } else {
                  componentsBuilder_.addMessage(m);
                }
                break;
              } // case 42
              case 50: {
                cyclonedx.v1_3.Bom13.Service m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Service.parser(),
                        extensionRegistry);
                if (servicesBuilder_ == null) {
                  ensureServicesIsMutable();
                  services_.add(m);
                } else {
                  servicesBuilder_.addMessage(m);
                }
                break;
              } // case 50
              case 58: {
                cyclonedx.v1_3.Bom13.ExternalReference m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.ExternalReference.parser(),
                        extensionRegistry);
                if (externalReferencesBuilder_ == null) {
                  ensureExternalReferencesIsMutable();
                  externalReferences_.add(m);
                } else {
                  externalReferencesBuilder_.addMessage(m);
                }
                break;
              } // case 58
              case 66: {
                cyclonedx.v1_3.Bom13.Dependency m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Dependency.parser(),
                        extensionRegistry);
                if (dependenciesBuilder_ == null) {
                  ensureDependenciesIsMutable();
                  dependencies_.add(m);
                } else {
                  dependenciesBuilder_.addMessage(m);
                }
                break;
              } // case 66
              case 74: {
                cyclonedx.v1_3.Bom13.Composition m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Composition.parser(),
                        extensionRegistry);
                if (compositionsBuilder_ == null) {
                  ensureCompositionsIsMutable();
                  compositions_.add(m);
                } else {
                  compositionsBuilder_.addMessage(m);
                }
                break;
              } // case 74
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object specVersion_ = "";
      /**
       * <pre>
       * The version of the CycloneDX specification a BOM is written to (starting at version 1.3)
       * </pre>
       *
       * <code>string spec_version = 1;</code>
       * @return The specVersion.
       */
      public java.lang.String getSpecVersion() {
        java.lang.Object ref = specVersion_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          specVersion_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The version of the CycloneDX specification a BOM is written to (starting at version 1.3)
       * </pre>
       *
       * <code>string spec_version = 1;</code>
       * @return The bytes for specVersion.
       */
      public com.google.protobuf.ByteString
          getSpecVersionBytes() {
        java.lang.Object ref = specVersion_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          specVersion_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The version of the CycloneDX specification a BOM is written to (starting at version 1.3)
       * </pre>
       *
       * <code>string spec_version = 1;</code>
       * @param value The specVersion to set.
       * @return This builder for chaining.
       */
      public Builder setSpecVersion(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        specVersion_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The version of the CycloneDX specification a BOM is written to (starting at version 1.3)
       * </pre>
       *
       * <code>string spec_version = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpecVersion() {
        specVersion_ = getDefaultInstance().getSpecVersion();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The version of the CycloneDX specification a BOM is written to (starting at version 1.3)
       * </pre>
       *
       * <code>string spec_version = 1;</code>
       * @param value The bytes for specVersion to set.
       * @return This builder for chaining.
       */
      public Builder setSpecVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        specVersion_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private int version_ ;
      /**
       * <pre>
       * The version allows component publishers/authors to make changes to existing BOMs to update various aspects of the document such as description or licenses. When a system is presented with multiple BOMs for the same component, the system should use the most recent version of the BOM. The default version is '1' and should be incremented for each version of the BOM that is published. Each version of a component should have a unique BOM and if no changes are made to the BOMs, then each BOM will have a version of '1'.
       * </pre>
       *
       * <code>optional int32 version = 2;</code>
       * @return Whether the version field is set.
       */
      @java.lang.Override
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The version allows component publishers/authors to make changes to existing BOMs to update various aspects of the document such as description or licenses. When a system is presented with multiple BOMs for the same component, the system should use the most recent version of the BOM. The default version is '1' and should be incremented for each version of the BOM that is published. Each version of a component should have a unique BOM and if no changes are made to the BOMs, then each BOM will have a version of '1'.
       * </pre>
       *
       * <code>optional int32 version = 2;</code>
       * @return The version.
       */
      @java.lang.Override
      public int getVersion() {
        return version_;
      }
      /**
       * <pre>
       * The version allows component publishers/authors to make changes to existing BOMs to update various aspects of the document such as description or licenses. When a system is presented with multiple BOMs for the same component, the system should use the most recent version of the BOM. The default version is '1' and should be incremented for each version of the BOM that is published. Each version of a component should have a unique BOM and if no changes are made to the BOMs, then each BOM will have a version of '1'.
       * </pre>
       *
       * <code>optional int32 version = 2;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(int value) {

        version_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The version allows component publishers/authors to make changes to existing BOMs to update various aspects of the document such as description or licenses. When a system is presented with multiple BOMs for the same component, the system should use the most recent version of the BOM. The default version is '1' and should be incremented for each version of the BOM that is published. Each version of a component should have a unique BOM and if no changes are made to the BOMs, then each BOM will have a version of '1'.
       * </pre>
       *
       * <code>optional int32 version = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        version_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object serialNumber_ = "";
      /**
       * <pre>
       * Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
       * </pre>
       *
       * <code>optional string serial_number = 3;</code>
       * @return Whether the serialNumber field is set.
       */
      public boolean hasSerialNumber() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
       * </pre>
       *
       * <code>optional string serial_number = 3;</code>
       * @return The serialNumber.
       */
      public java.lang.String getSerialNumber() {
        java.lang.Object ref = serialNumber_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          serialNumber_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
       * </pre>
       *
       * <code>optional string serial_number = 3;</code>
       * @return The bytes for serialNumber.
       */
      public com.google.protobuf.ByteString
          getSerialNumberBytes() {
        java.lang.Object ref = serialNumber_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          serialNumber_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
       * </pre>
       *
       * <code>optional string serial_number = 3;</code>
       * @param value The serialNumber to set.
       * @return This builder for chaining.
       */
      public Builder setSerialNumber(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        serialNumber_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
       * </pre>
       *
       * <code>optional string serial_number = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSerialNumber() {
        serialNumber_ = getDefaultInstance().getSerialNumber();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
       * </pre>
       *
       * <code>optional string serial_number = 3;</code>
       * @param value The bytes for serialNumber to set.
       * @return This builder for chaining.
       */
      public Builder setSerialNumberBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        serialNumber_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private cyclonedx.v1_3.Bom13.Metadata metadata_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.Metadata, cyclonedx.v1_3.Bom13.Metadata.Builder, cyclonedx.v1_3.Bom13.MetadataOrBuilder> metadataBuilder_;
      /**
       * <pre>
       * Provides additional information about a BOM.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
       * @return Whether the metadata field is set.
       */
      public boolean hasMetadata() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Provides additional information about a BOM.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
       * @return The metadata.
       */
      public cyclonedx.v1_3.Bom13.Metadata getMetadata() {
        if (metadataBuilder_ == null) {
          return metadata_ == null ? cyclonedx.v1_3.Bom13.Metadata.getDefaultInstance() : metadata_;
        } else {
          return metadataBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Provides additional information about a BOM.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
       */
      public Builder setMetadata(cyclonedx.v1_3.Bom13.Metadata value) {
        if (metadataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          metadata_ = value;
        } else {
          metadataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Provides additional information about a BOM.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
       */
      public Builder setMetadata(
          cyclonedx.v1_3.Bom13.Metadata.Builder builderForValue) {
        if (metadataBuilder_ == null) {
          metadata_ = builderForValue.build();
        } else {
          metadataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Provides additional information about a BOM.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
       */
      public Builder mergeMetadata(cyclonedx.v1_3.Bom13.Metadata value) {
        if (metadataBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            metadata_ != null &&
            metadata_ != cyclonedx.v1_3.Bom13.Metadata.getDefaultInstance()) {
            getMetadataBuilder().mergeFrom(value);
          } else {
            metadata_ = value;
          }
        } else {
          metadataBuilder_.mergeFrom(value);
        }
        if (metadata_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Provides additional information about a BOM.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
       */
      public Builder clearMetadata() {
        bitField0_ = (bitField0_ & ~0x00000008);
        metadata_ = null;
        if (metadataBuilder_ != null) {
          metadataBuilder_.dispose();
          metadataBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Provides additional information about a BOM.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.Metadata.Builder getMetadataBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getMetadataFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Provides additional information about a BOM.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.MetadataOrBuilder getMetadataOrBuilder() {
        if (metadataBuilder_ != null) {
          return metadataBuilder_.getMessageOrBuilder();
        } else {
          return metadata_ == null ?
              cyclonedx.v1_3.Bom13.Metadata.getDefaultInstance() : metadata_;
        }
      }
      /**
       * <pre>
       * Provides additional information about a BOM.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Metadata metadata = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.Metadata, cyclonedx.v1_3.Bom13.Metadata.Builder, cyclonedx.v1_3.Bom13.MetadataOrBuilder> 
          getMetadataFieldBuilder() {
        if (metadataBuilder_ == null) {
          metadataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.Metadata, cyclonedx.v1_3.Bom13.Metadata.Builder, cyclonedx.v1_3.Bom13.MetadataOrBuilder>(
                  getMetadata(),
                  getParentForChildren(),
                  isClean());
          metadata_ = null;
        }
        return metadataBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Component> components_ =
        java.util.Collections.emptyList();
      private void ensureComponentsIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          components_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Component>(components_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder> componentsBuilder_;

      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Component> getComponentsList() {
        if (componentsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(components_);
        } else {
          return componentsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public int getComponentsCount() {
        if (componentsBuilder_ == null) {
          return components_.size();
        } else {
          return componentsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public cyclonedx.v1_3.Bom13.Component getComponents(int index) {
        if (componentsBuilder_ == null) {
          return components_.get(index);
        } else {
          return componentsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public Builder setComponents(
          int index, cyclonedx.v1_3.Bom13.Component value) {
        if (componentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureComponentsIsMutable();
          components_.set(index, value);
          onChanged();
        } else {
          componentsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public Builder setComponents(
          int index, cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (componentsBuilder_ == null) {
          ensureComponentsIsMutable();
          components_.set(index, builderForValue.build());
          onChanged();
        } else {
          componentsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public Builder addComponents(cyclonedx.v1_3.Bom13.Component value) {
        if (componentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureComponentsIsMutable();
          components_.add(value);
          onChanged();
        } else {
          componentsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public Builder addComponents(
          int index, cyclonedx.v1_3.Bom13.Component value) {
        if (componentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureComponentsIsMutable();
          components_.add(index, value);
          onChanged();
        } else {
          componentsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public Builder addComponents(
          cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (componentsBuilder_ == null) {
          ensureComponentsIsMutable();
          components_.add(builderForValue.build());
          onChanged();
        } else {
          componentsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public Builder addComponents(
          int index, cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (componentsBuilder_ == null) {
          ensureComponentsIsMutable();
          components_.add(index, builderForValue.build());
          onChanged();
        } else {
          componentsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public Builder addAllComponents(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Component> values) {
        if (componentsBuilder_ == null) {
          ensureComponentsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, components_);
          onChanged();
        } else {
          componentsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public Builder clearComponents() {
        if (componentsBuilder_ == null) {
          components_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          componentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public Builder removeComponents(int index) {
        if (componentsBuilder_ == null) {
          ensureComponentsIsMutable();
          components_.remove(index);
          onChanged();
        } else {
          componentsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder getComponentsBuilder(
          int index) {
        return getComponentsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public cyclonedx.v1_3.Bom13.ComponentOrBuilder getComponentsOrBuilder(
          int index) {
        if (componentsBuilder_ == null) {
          return components_.get(index);  } else {
          return componentsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
           getComponentsOrBuilderList() {
        if (componentsBuilder_ != null) {
          return componentsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(components_);
        }
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder addComponentsBuilder() {
        return getComponentsFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Component.getDefaultInstance());
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder addComponentsBuilder(
          int index) {
        return getComponentsFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Component.getDefaultInstance());
      }
      /**
       * <pre>
       * Provides the ability to document a list of components.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 5;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Component.Builder> 
           getComponentsBuilderList() {
        return getComponentsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
          getComponentsFieldBuilder() {
        if (componentsBuilder_ == null) {
          componentsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder>(
                  components_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          components_ = null;
        }
        return componentsBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Service> services_ =
        java.util.Collections.emptyList();
      private void ensureServicesIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          services_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Service>(services_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Service, cyclonedx.v1_3.Bom13.Service.Builder, cyclonedx.v1_3.Bom13.ServiceOrBuilder> servicesBuilder_;

      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Service> getServicesList() {
        if (servicesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(services_);
        } else {
          return servicesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public int getServicesCount() {
        if (servicesBuilder_ == null) {
          return services_.size();
        } else {
          return servicesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public cyclonedx.v1_3.Bom13.Service getServices(int index) {
        if (servicesBuilder_ == null) {
          return services_.get(index);
        } else {
          return servicesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public Builder setServices(
          int index, cyclonedx.v1_3.Bom13.Service value) {
        if (servicesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServicesIsMutable();
          services_.set(index, value);
          onChanged();
        } else {
          servicesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public Builder setServices(
          int index, cyclonedx.v1_3.Bom13.Service.Builder builderForValue) {
        if (servicesBuilder_ == null) {
          ensureServicesIsMutable();
          services_.set(index, builderForValue.build());
          onChanged();
        } else {
          servicesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public Builder addServices(cyclonedx.v1_3.Bom13.Service value) {
        if (servicesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServicesIsMutable();
          services_.add(value);
          onChanged();
        } else {
          servicesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public Builder addServices(
          int index, cyclonedx.v1_3.Bom13.Service value) {
        if (servicesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServicesIsMutable();
          services_.add(index, value);
          onChanged();
        } else {
          servicesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public Builder addServices(
          cyclonedx.v1_3.Bom13.Service.Builder builderForValue) {
        if (servicesBuilder_ == null) {
          ensureServicesIsMutable();
          services_.add(builderForValue.build());
          onChanged();
        } else {
          servicesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public Builder addServices(
          int index, cyclonedx.v1_3.Bom13.Service.Builder builderForValue) {
        if (servicesBuilder_ == null) {
          ensureServicesIsMutable();
          services_.add(index, builderForValue.build());
          onChanged();
        } else {
          servicesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public Builder addAllServices(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Service> values) {
        if (servicesBuilder_ == null) {
          ensureServicesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, services_);
          onChanged();
        } else {
          servicesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public Builder clearServices() {
        if (servicesBuilder_ == null) {
          services_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          servicesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public Builder removeServices(int index) {
        if (servicesBuilder_ == null) {
          ensureServicesIsMutable();
          services_.remove(index);
          onChanged();
        } else {
          servicesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public cyclonedx.v1_3.Bom13.Service.Builder getServicesBuilder(
          int index) {
        return getServicesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public cyclonedx.v1_3.Bom13.ServiceOrBuilder getServicesOrBuilder(
          int index) {
        if (servicesBuilder_ == null) {
          return services_.get(index);  } else {
          return servicesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.ServiceOrBuilder> 
           getServicesOrBuilderList() {
        if (servicesBuilder_ != null) {
          return servicesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(services_);
        }
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public cyclonedx.v1_3.Bom13.Service.Builder addServicesBuilder() {
        return getServicesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Service.getDefaultInstance());
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public cyclonedx.v1_3.Bom13.Service.Builder addServicesBuilder(
          int index) {
        return getServicesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Service.getDefaultInstance());
      }
      /**
       * <pre>
       * Provides the ability to document a list of external services.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 6;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Service.Builder> 
           getServicesBuilderList() {
        return getServicesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Service, cyclonedx.v1_3.Bom13.Service.Builder, cyclonedx.v1_3.Bom13.ServiceOrBuilder> 
          getServicesFieldBuilder() {
        if (servicesBuilder_ == null) {
          servicesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Service, cyclonedx.v1_3.Bom13.Service.Builder, cyclonedx.v1_3.Bom13.ServiceOrBuilder>(
                  services_,
                  ((bitField0_ & 0x00000020) != 0),
                  getParentForChildren(),
                  isClean());
          services_ = null;
        }
        return servicesBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> externalReferences_ =
        java.util.Collections.emptyList();
      private void ensureExternalReferencesIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          externalReferences_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.ExternalReference>(externalReferences_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.ExternalReference, cyclonedx.v1_3.Bom13.ExternalReference.Builder, cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> externalReferencesBuilder_;

      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> getExternalReferencesList() {
        if (externalReferencesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(externalReferences_);
        } else {
          return externalReferencesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public int getExternalReferencesCount() {
        if (externalReferencesBuilder_ == null) {
          return externalReferences_.size();
        } else {
          return externalReferencesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReference getExternalReferences(int index) {
        if (externalReferencesBuilder_ == null) {
          return externalReferences_.get(index);
        } else {
          return externalReferencesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public Builder setExternalReferences(
          int index, cyclonedx.v1_3.Bom13.ExternalReference value) {
        if (externalReferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExternalReferencesIsMutable();
          externalReferences_.set(index, value);
          onChanged();
        } else {
          externalReferencesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public Builder setExternalReferences(
          int index, cyclonedx.v1_3.Bom13.ExternalReference.Builder builderForValue) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          externalReferences_.set(index, builderForValue.build());
          onChanged();
        } else {
          externalReferencesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public Builder addExternalReferences(cyclonedx.v1_3.Bom13.ExternalReference value) {
        if (externalReferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExternalReferencesIsMutable();
          externalReferences_.add(value);
          onChanged();
        } else {
          externalReferencesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public Builder addExternalReferences(
          int index, cyclonedx.v1_3.Bom13.ExternalReference value) {
        if (externalReferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExternalReferencesIsMutable();
          externalReferences_.add(index, value);
          onChanged();
        } else {
          externalReferencesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public Builder addExternalReferences(
          cyclonedx.v1_3.Bom13.ExternalReference.Builder builderForValue) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          externalReferences_.add(builderForValue.build());
          onChanged();
        } else {
          externalReferencesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public Builder addExternalReferences(
          int index, cyclonedx.v1_3.Bom13.ExternalReference.Builder builderForValue) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          externalReferences_.add(index, builderForValue.build());
          onChanged();
        } else {
          externalReferencesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public Builder addAllExternalReferences(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.ExternalReference> values) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, externalReferences_);
          onChanged();
        } else {
          externalReferencesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public Builder clearExternalReferences() {
        if (externalReferencesBuilder_ == null) {
          externalReferences_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          externalReferencesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public Builder removeExternalReferences(int index) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          externalReferences_.remove(index);
          onChanged();
        } else {
          externalReferencesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReference.Builder getExternalReferencesBuilder(
          int index) {
        return getExternalReferencesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder getExternalReferencesOrBuilder(
          int index) {
        if (externalReferencesBuilder_ == null) {
          return externalReferences_.get(index);  } else {
          return externalReferencesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> 
           getExternalReferencesOrBuilderList() {
        if (externalReferencesBuilder_ != null) {
          return externalReferencesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(externalReferences_);
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReference.Builder addExternalReferencesBuilder() {
        return getExternalReferencesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.ExternalReference.getDefaultInstance());
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReference.Builder addExternalReferencesBuilder(
          int index) {
        return getExternalReferencesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.ExternalReference.getDefaultInstance());
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the BOM or to the project the BOM describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 7;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.ExternalReference.Builder> 
           getExternalReferencesBuilderList() {
        return getExternalReferencesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.ExternalReference, cyclonedx.v1_3.Bom13.ExternalReference.Builder, cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> 
          getExternalReferencesFieldBuilder() {
        if (externalReferencesBuilder_ == null) {
          externalReferencesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.ExternalReference, cyclonedx.v1_3.Bom13.ExternalReference.Builder, cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder>(
                  externalReferences_,
                  ((bitField0_ & 0x00000040) != 0),
                  getParentForChildren(),
                  isClean());
          externalReferences_ = null;
        }
        return externalReferencesBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Dependency> dependencies_ =
        java.util.Collections.emptyList();
      private void ensureDependenciesIsMutable() {
        if (!((bitField0_ & 0x00000080) != 0)) {
          dependencies_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Dependency>(dependencies_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Dependency, cyclonedx.v1_3.Bom13.Dependency.Builder, cyclonedx.v1_3.Bom13.DependencyOrBuilder> dependenciesBuilder_;

      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Dependency> getDependenciesList() {
        if (dependenciesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dependencies_);
        } else {
          return dependenciesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public int getDependenciesCount() {
        if (dependenciesBuilder_ == null) {
          return dependencies_.size();
        } else {
          return dependenciesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public cyclonedx.v1_3.Bom13.Dependency getDependencies(int index) {
        if (dependenciesBuilder_ == null) {
          return dependencies_.get(index);
        } else {
          return dependenciesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public Builder setDependencies(
          int index, cyclonedx.v1_3.Bom13.Dependency value) {
        if (dependenciesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependenciesIsMutable();
          dependencies_.set(index, value);
          onChanged();
        } else {
          dependenciesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public Builder setDependencies(
          int index, cyclonedx.v1_3.Bom13.Dependency.Builder builderForValue) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          dependencies_.set(index, builderForValue.build());
          onChanged();
        } else {
          dependenciesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public Builder addDependencies(cyclonedx.v1_3.Bom13.Dependency value) {
        if (dependenciesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependenciesIsMutable();
          dependencies_.add(value);
          onChanged();
        } else {
          dependenciesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public Builder addDependencies(
          int index, cyclonedx.v1_3.Bom13.Dependency value) {
        if (dependenciesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependenciesIsMutable();
          dependencies_.add(index, value);
          onChanged();
        } else {
          dependenciesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public Builder addDependencies(
          cyclonedx.v1_3.Bom13.Dependency.Builder builderForValue) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          dependencies_.add(builderForValue.build());
          onChanged();
        } else {
          dependenciesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public Builder addDependencies(
          int index, cyclonedx.v1_3.Bom13.Dependency.Builder builderForValue) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          dependencies_.add(index, builderForValue.build());
          onChanged();
        } else {
          dependenciesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public Builder addAllDependencies(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Dependency> values) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dependencies_);
          onChanged();
        } else {
          dependenciesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public Builder clearDependencies() {
        if (dependenciesBuilder_ == null) {
          dependencies_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          dependenciesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public Builder removeDependencies(int index) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          dependencies_.remove(index);
          onChanged();
        } else {
          dependenciesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public cyclonedx.v1_3.Bom13.Dependency.Builder getDependenciesBuilder(
          int index) {
        return getDependenciesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public cyclonedx.v1_3.Bom13.DependencyOrBuilder getDependenciesOrBuilder(
          int index) {
        if (dependenciesBuilder_ == null) {
          return dependencies_.get(index);  } else {
          return dependenciesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.DependencyOrBuilder> 
           getDependenciesOrBuilderList() {
        if (dependenciesBuilder_ != null) {
          return dependenciesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dependencies_);
        }
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public cyclonedx.v1_3.Bom13.Dependency.Builder addDependenciesBuilder() {
        return getDependenciesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Dependency.getDefaultInstance());
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public cyclonedx.v1_3.Bom13.Dependency.Builder addDependenciesBuilder(
          int index) {
        return getDependenciesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Dependency.getDefaultInstance());
      }
      /**
       * <pre>
       * Provides the ability to document dependency relationships.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 8;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Dependency.Builder> 
           getDependenciesBuilderList() {
        return getDependenciesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Dependency, cyclonedx.v1_3.Bom13.Dependency.Builder, cyclonedx.v1_3.Bom13.DependencyOrBuilder> 
          getDependenciesFieldBuilder() {
        if (dependenciesBuilder_ == null) {
          dependenciesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Dependency, cyclonedx.v1_3.Bom13.Dependency.Builder, cyclonedx.v1_3.Bom13.DependencyOrBuilder>(
                  dependencies_,
                  ((bitField0_ & 0x00000080) != 0),
                  getParentForChildren(),
                  isClean());
          dependencies_ = null;
        }
        return dependenciesBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Composition> compositions_ =
        java.util.Collections.emptyList();
      private void ensureCompositionsIsMutable() {
        if (!((bitField0_ & 0x00000100) != 0)) {
          compositions_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Composition>(compositions_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Composition, cyclonedx.v1_3.Bom13.Composition.Builder, cyclonedx.v1_3.Bom13.CompositionOrBuilder> compositionsBuilder_;

      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Composition> getCompositionsList() {
        if (compositionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(compositions_);
        } else {
          return compositionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public int getCompositionsCount() {
        if (compositionsBuilder_ == null) {
          return compositions_.size();
        } else {
          return compositionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public cyclonedx.v1_3.Bom13.Composition getCompositions(int index) {
        if (compositionsBuilder_ == null) {
          return compositions_.get(index);
        } else {
          return compositionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public Builder setCompositions(
          int index, cyclonedx.v1_3.Bom13.Composition value) {
        if (compositionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompositionsIsMutable();
          compositions_.set(index, value);
          onChanged();
        } else {
          compositionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public Builder setCompositions(
          int index, cyclonedx.v1_3.Bom13.Composition.Builder builderForValue) {
        if (compositionsBuilder_ == null) {
          ensureCompositionsIsMutable();
          compositions_.set(index, builderForValue.build());
          onChanged();
        } else {
          compositionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public Builder addCompositions(cyclonedx.v1_3.Bom13.Composition value) {
        if (compositionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompositionsIsMutable();
          compositions_.add(value);
          onChanged();
        } else {
          compositionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public Builder addCompositions(
          int index, cyclonedx.v1_3.Bom13.Composition value) {
        if (compositionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCompositionsIsMutable();
          compositions_.add(index, value);
          onChanged();
        } else {
          compositionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public Builder addCompositions(
          cyclonedx.v1_3.Bom13.Composition.Builder builderForValue) {
        if (compositionsBuilder_ == null) {
          ensureCompositionsIsMutable();
          compositions_.add(builderForValue.build());
          onChanged();
        } else {
          compositionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public Builder addCompositions(
          int index, cyclonedx.v1_3.Bom13.Composition.Builder builderForValue) {
        if (compositionsBuilder_ == null) {
          ensureCompositionsIsMutable();
          compositions_.add(index, builderForValue.build());
          onChanged();
        } else {
          compositionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public Builder addAllCompositions(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Composition> values) {
        if (compositionsBuilder_ == null) {
          ensureCompositionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, compositions_);
          onChanged();
        } else {
          compositionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public Builder clearCompositions() {
        if (compositionsBuilder_ == null) {
          compositions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          compositionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public Builder removeCompositions(int index) {
        if (compositionsBuilder_ == null) {
          ensureCompositionsIsMutable();
          compositions_.remove(index);
          onChanged();
        } else {
          compositionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public cyclonedx.v1_3.Bom13.Composition.Builder getCompositionsBuilder(
          int index) {
        return getCompositionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public cyclonedx.v1_3.Bom13.CompositionOrBuilder getCompositionsOrBuilder(
          int index) {
        if (compositionsBuilder_ == null) {
          return compositions_.get(index);  } else {
          return compositionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.CompositionOrBuilder> 
           getCompositionsOrBuilderList() {
        if (compositionsBuilder_ != null) {
          return compositionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(compositions_);
        }
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public cyclonedx.v1_3.Bom13.Composition.Builder addCompositionsBuilder() {
        return getCompositionsFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Composition.getDefaultInstance());
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public cyclonedx.v1_3.Bom13.Composition.Builder addCompositionsBuilder(
          int index) {
        return getCompositionsFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Composition.getDefaultInstance());
      }
      /**
       * <pre>
       * Provides the ability to document aggregate completeness
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Composition compositions = 9;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Composition.Builder> 
           getCompositionsBuilderList() {
        return getCompositionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Composition, cyclonedx.v1_3.Bom13.Composition.Builder, cyclonedx.v1_3.Bom13.CompositionOrBuilder> 
          getCompositionsFieldBuilder() {
        if (compositionsBuilder_ == null) {
          compositionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Composition, cyclonedx.v1_3.Bom13.Composition.Builder, cyclonedx.v1_3.Bom13.CompositionOrBuilder>(
                  compositions_,
                  ((bitField0_ & 0x00000100) != 0),
                  getParentForChildren(),
                  isClean());
          compositions_ = null;
        }
        return compositionsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Bom)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Bom)
    private static final cyclonedx.v1_3.Bom13.Bom DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Bom();
    }

    public static cyclonedx.v1_3.Bom13.Bom getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Bom>
        PARSER = new com.google.protobuf.AbstractParser<Bom>() {
      @java.lang.Override
      public Bom parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Bom> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Bom> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Bom getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CommitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Commit)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
     * </pre>
     *
     * <code>optional string uid = 1;</code>
     * @return Whether the uid field is set.
     */
    boolean hasUid();
    /**
     * <pre>
     * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
     * </pre>
     *
     * <code>optional string uid = 1;</code>
     * @return The uid.
     */
    java.lang.String getUid();
    /**
     * <pre>
     * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
     * </pre>
     *
     * <code>optional string uid = 1;</code>
     * @return The bytes for uid.
     */
    com.google.protobuf.ByteString
        getUidBytes();

    /**
     * <pre>
     * The URL to the commit. This URL will typically point to a commit in a version control system.
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return Whether the url field is set.
     */
    boolean hasUrl();
    /**
     * <pre>
     * The URL to the commit. This URL will typically point to a commit in a version control system.
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return The url.
     */
    java.lang.String getUrl();
    /**
     * <pre>
     * The URL to the commit. This URL will typically point to a commit in a version control system.
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return The bytes for url.
     */
    com.google.protobuf.ByteString
        getUrlBytes();

    /**
     * <pre>
     * The author who created the changes in the commit
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
     * @return Whether the author field is set.
     */
    boolean hasAuthor();
    /**
     * <pre>
     * The author who created the changes in the commit
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
     * @return The author.
     */
    cyclonedx.v1_3.Bom13.IdentifiableAction getAuthor();
    /**
     * <pre>
     * The author who created the changes in the commit
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
     */
    cyclonedx.v1_3.Bom13.IdentifiableActionOrBuilder getAuthorOrBuilder();

    /**
     * <pre>
     * The person who committed or pushed the commit
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
     * @return Whether the committer field is set.
     */
    boolean hasCommitter();
    /**
     * <pre>
     * The person who committed or pushed the commit
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
     * @return The committer.
     */
    cyclonedx.v1_3.Bom13.IdentifiableAction getCommitter();
    /**
     * <pre>
     * The person who committed or pushed the commit
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
     */
    cyclonedx.v1_3.Bom13.IdentifiableActionOrBuilder getCommitterOrBuilder();

    /**
     * <pre>
     * The text description of the contents of the commit
     * </pre>
     *
     * <code>optional string message = 5;</code>
     * @return Whether the message field is set.
     */
    boolean hasMessage();
    /**
     * <pre>
     * The text description of the contents of the commit
     * </pre>
     *
     * <code>optional string message = 5;</code>
     * @return The message.
     */
    java.lang.String getMessage();
    /**
     * <pre>
     * The text description of the contents of the commit
     * </pre>
     *
     * <code>optional string message = 5;</code>
     * @return The bytes for message.
     */
    com.google.protobuf.ByteString
        getMessageBytes();
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.Commit}
   */
  public static final class Commit extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Commit)
      CommitOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Commit.class.getName());
    }
    // Use Commit.newBuilder() to construct.
    private Commit(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Commit() {
      uid_ = "";
      url_ = "";
      message_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Commit_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Commit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Commit.class, cyclonedx.v1_3.Bom13.Commit.Builder.class);
    }

    private int bitField0_;
    public static final int UID_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object uid_ = "";
    /**
     * <pre>
     * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
     * </pre>
     *
     * <code>optional string uid = 1;</code>
     * @return Whether the uid field is set.
     */
    @java.lang.Override
    public boolean hasUid() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
     * </pre>
     *
     * <code>optional string uid = 1;</code>
     * @return The uid.
     */
    @java.lang.Override
    public java.lang.String getUid() {
      java.lang.Object ref = uid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        uid_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
     * </pre>
     *
     * <code>optional string uid = 1;</code>
     * @return The bytes for uid.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUidBytes() {
      java.lang.Object ref = uid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        uid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int URL_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object url_ = "";
    /**
     * <pre>
     * The URL to the commit. This URL will typically point to a commit in a version control system.
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return Whether the url field is set.
     */
    @java.lang.Override
    public boolean hasUrl() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The URL to the commit. This URL will typically point to a commit in a version control system.
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return The url.
     */
    @java.lang.Override
    public java.lang.String getUrl() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        url_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The URL to the commit. This URL will typically point to a commit in a version control system.
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return The bytes for url.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUrlBytes() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        url_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int AUTHOR_FIELD_NUMBER = 3;
    private cyclonedx.v1_3.Bom13.IdentifiableAction author_;
    /**
     * <pre>
     * The author who created the changes in the commit
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
     * @return Whether the author field is set.
     */
    @java.lang.Override
    public boolean hasAuthor() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The author who created the changes in the commit
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
     * @return The author.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.IdentifiableAction getAuthor() {
      return author_ == null ? cyclonedx.v1_3.Bom13.IdentifiableAction.getDefaultInstance() : author_;
    }
    /**
     * <pre>
     * The author who created the changes in the commit
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.IdentifiableActionOrBuilder getAuthorOrBuilder() {
      return author_ == null ? cyclonedx.v1_3.Bom13.IdentifiableAction.getDefaultInstance() : author_;
    }

    public static final int COMMITTER_FIELD_NUMBER = 4;
    private cyclonedx.v1_3.Bom13.IdentifiableAction committer_;
    /**
     * <pre>
     * The person who committed or pushed the commit
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
     * @return Whether the committer field is set.
     */
    @java.lang.Override
    public boolean hasCommitter() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The person who committed or pushed the commit
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
     * @return The committer.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.IdentifiableAction getCommitter() {
      return committer_ == null ? cyclonedx.v1_3.Bom13.IdentifiableAction.getDefaultInstance() : committer_;
    }
    /**
     * <pre>
     * The person who committed or pushed the commit
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.IdentifiableActionOrBuilder getCommitterOrBuilder() {
      return committer_ == null ? cyclonedx.v1_3.Bom13.IdentifiableAction.getDefaultInstance() : committer_;
    }

    public static final int MESSAGE_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private volatile java.lang.Object message_ = "";
    /**
     * <pre>
     * The text description of the contents of the commit
     * </pre>
     *
     * <code>optional string message = 5;</code>
     * @return Whether the message field is set.
     */
    @java.lang.Override
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The text description of the contents of the commit
     * </pre>
     *
     * <code>optional string message = 5;</code>
     * @return The message.
     */
    @java.lang.Override
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        message_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The text description of the contents of the commit
     * </pre>
     *
     * <code>optional string message = 5;</code>
     * @return The bytes for message.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, uid_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, url_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getAuthor());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(4, getCommitter());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 5, message_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, uid_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, url_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getAuthor());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getCommitter());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(5, message_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Commit)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Commit other = (cyclonedx.v1_3.Bom13.Commit) obj;

      if (hasUid() != other.hasUid()) return false;
      if (hasUid()) {
        if (!getUid()
            .equals(other.getUid())) return false;
      }
      if (hasUrl() != other.hasUrl()) return false;
      if (hasUrl()) {
        if (!getUrl()
            .equals(other.getUrl())) return false;
      }
      if (hasAuthor() != other.hasAuthor()) return false;
      if (hasAuthor()) {
        if (!getAuthor()
            .equals(other.getAuthor())) return false;
      }
      if (hasCommitter() != other.hasCommitter()) return false;
      if (hasCommitter()) {
        if (!getCommitter()
            .equals(other.getCommitter())) return false;
      }
      if (hasMessage() != other.hasMessage()) return false;
      if (hasMessage()) {
        if (!getMessage()
            .equals(other.getMessage())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasUid()) {
        hash = (37 * hash) + UID_FIELD_NUMBER;
        hash = (53 * hash) + getUid().hashCode();
      }
      if (hasUrl()) {
        hash = (37 * hash) + URL_FIELD_NUMBER;
        hash = (53 * hash) + getUrl().hashCode();
      }
      if (hasAuthor()) {
        hash = (37 * hash) + AUTHOR_FIELD_NUMBER;
        hash = (53 * hash) + getAuthor().hashCode();
      }
      if (hasCommitter()) {
        hash = (37 * hash) + COMMITTER_FIELD_NUMBER;
        hash = (53 * hash) + getCommitter().hashCode();
      }
      if (hasMessage()) {
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessage().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Commit parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Commit parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Commit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Commit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Commit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Commit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Commit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Commit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Commit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Commit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Commit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Commit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Commit prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.Commit}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Commit)
        cyclonedx.v1_3.Bom13.CommitOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Commit_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Commit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Commit.class, cyclonedx.v1_3.Bom13.Commit.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Commit.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getAuthorFieldBuilder();
          getCommitterFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        uid_ = "";
        url_ = "";
        author_ = null;
        if (authorBuilder_ != null) {
          authorBuilder_.dispose();
          authorBuilder_ = null;
        }
        committer_ = null;
        if (committerBuilder_ != null) {
          committerBuilder_.dispose();
          committerBuilder_ = null;
        }
        message_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Commit_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Commit getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Commit.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Commit build() {
        cyclonedx.v1_3.Bom13.Commit result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Commit buildPartial() {
        cyclonedx.v1_3.Bom13.Commit result = new cyclonedx.v1_3.Bom13.Commit(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Commit result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.uid_ = uid_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.url_ = url_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.author_ = authorBuilder_ == null
              ? author_
              : authorBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.committer_ = committerBuilder_ == null
              ? committer_
              : committerBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.message_ = message_;
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Commit) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Commit)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Commit other) {
        if (other == cyclonedx.v1_3.Bom13.Commit.getDefaultInstance()) return this;
        if (other.hasUid()) {
          uid_ = other.uid_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasUrl()) {
          url_ = other.url_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasAuthor()) {
          mergeAuthor(other.getAuthor());
        }
        if (other.hasCommitter()) {
          mergeCommitter(other.getCommitter());
        }
        if (other.hasMessage()) {
          message_ = other.message_;
          bitField0_ |= 0x00000010;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                uid_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                url_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getAuthorFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getCommitterFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                message_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object uid_ = "";
      /**
       * <pre>
       * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
       * </pre>
       *
       * <code>optional string uid = 1;</code>
       * @return Whether the uid field is set.
       */
      public boolean hasUid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
       * </pre>
       *
       * <code>optional string uid = 1;</code>
       * @return The uid.
       */
      public java.lang.String getUid() {
        java.lang.Object ref = uid_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          uid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
       * </pre>
       *
       * <code>optional string uid = 1;</code>
       * @return The bytes for uid.
       */
      public com.google.protobuf.ByteString
          getUidBytes() {
        java.lang.Object ref = uid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          uid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
       * </pre>
       *
       * <code>optional string uid = 1;</code>
       * @param value The uid to set.
       * @return This builder for chaining.
       */
      public Builder setUid(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        uid_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
       * </pre>
       *
       * <code>optional string uid = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUid() {
        uid_ = getDefaultInstance().getUid();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
       * </pre>
       *
       * <code>optional string uid = 1;</code>
       * @param value The bytes for uid to set.
       * @return This builder for chaining.
       */
      public Builder setUidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        uid_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object url_ = "";
      /**
       * <pre>
       * The URL to the commit. This URL will typically point to a commit in a version control system.
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @return Whether the url field is set.
       */
      public boolean hasUrl() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The URL to the commit. This URL will typically point to a commit in a version control system.
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @return The url.
       */
      public java.lang.String getUrl() {
        java.lang.Object ref = url_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          url_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The URL to the commit. This URL will typically point to a commit in a version control system.
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @return The bytes for url.
       */
      public com.google.protobuf.ByteString
          getUrlBytes() {
        java.lang.Object ref = url_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          url_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The URL to the commit. This URL will typically point to a commit in a version control system.
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @param value The url to set.
       * @return This builder for chaining.
       */
      public Builder setUrl(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        url_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The URL to the commit. This URL will typically point to a commit in a version control system.
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearUrl() {
        url_ = getDefaultInstance().getUrl();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The URL to the commit. This URL will typically point to a commit in a version control system.
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @param value The bytes for url to set.
       * @return This builder for chaining.
       */
      public Builder setUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        url_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private cyclonedx.v1_3.Bom13.IdentifiableAction author_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.IdentifiableAction, cyclonedx.v1_3.Bom13.IdentifiableAction.Builder, cyclonedx.v1_3.Bom13.IdentifiableActionOrBuilder> authorBuilder_;
      /**
       * <pre>
       * The author who created the changes in the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
       * @return Whether the author field is set.
       */
      public boolean hasAuthor() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The author who created the changes in the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
       * @return The author.
       */
      public cyclonedx.v1_3.Bom13.IdentifiableAction getAuthor() {
        if (authorBuilder_ == null) {
          return author_ == null ? cyclonedx.v1_3.Bom13.IdentifiableAction.getDefaultInstance() : author_;
        } else {
          return authorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The author who created the changes in the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
       */
      public Builder setAuthor(cyclonedx.v1_3.Bom13.IdentifiableAction value) {
        if (authorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          author_ = value;
        } else {
          authorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The author who created the changes in the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
       */
      public Builder setAuthor(
          cyclonedx.v1_3.Bom13.IdentifiableAction.Builder builderForValue) {
        if (authorBuilder_ == null) {
          author_ = builderForValue.build();
        } else {
          authorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The author who created the changes in the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
       */
      public Builder mergeAuthor(cyclonedx.v1_3.Bom13.IdentifiableAction value) {
        if (authorBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            author_ != null &&
            author_ != cyclonedx.v1_3.Bom13.IdentifiableAction.getDefaultInstance()) {
            getAuthorBuilder().mergeFrom(value);
          } else {
            author_ = value;
          }
        } else {
          authorBuilder_.mergeFrom(value);
        }
        if (author_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The author who created the changes in the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
       */
      public Builder clearAuthor() {
        bitField0_ = (bitField0_ & ~0x00000004);
        author_ = null;
        if (authorBuilder_ != null) {
          authorBuilder_.dispose();
          authorBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The author who created the changes in the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.IdentifiableAction.Builder getAuthorBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getAuthorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The author who created the changes in the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.IdentifiableActionOrBuilder getAuthorOrBuilder() {
        if (authorBuilder_ != null) {
          return authorBuilder_.getMessageOrBuilder();
        } else {
          return author_ == null ?
              cyclonedx.v1_3.Bom13.IdentifiableAction.getDefaultInstance() : author_;
        }
      }
      /**
       * <pre>
       * The author who created the changes in the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction author = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.IdentifiableAction, cyclonedx.v1_3.Bom13.IdentifiableAction.Builder, cyclonedx.v1_3.Bom13.IdentifiableActionOrBuilder> 
          getAuthorFieldBuilder() {
        if (authorBuilder_ == null) {
          authorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.IdentifiableAction, cyclonedx.v1_3.Bom13.IdentifiableAction.Builder, cyclonedx.v1_3.Bom13.IdentifiableActionOrBuilder>(
                  getAuthor(),
                  getParentForChildren(),
                  isClean());
          author_ = null;
        }
        return authorBuilder_;
      }

      private cyclonedx.v1_3.Bom13.IdentifiableAction committer_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.IdentifiableAction, cyclonedx.v1_3.Bom13.IdentifiableAction.Builder, cyclonedx.v1_3.Bom13.IdentifiableActionOrBuilder> committerBuilder_;
      /**
       * <pre>
       * The person who committed or pushed the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
       * @return Whether the committer field is set.
       */
      public boolean hasCommitter() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The person who committed or pushed the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
       * @return The committer.
       */
      public cyclonedx.v1_3.Bom13.IdentifiableAction getCommitter() {
        if (committerBuilder_ == null) {
          return committer_ == null ? cyclonedx.v1_3.Bom13.IdentifiableAction.getDefaultInstance() : committer_;
        } else {
          return committerBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The person who committed or pushed the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
       */
      public Builder setCommitter(cyclonedx.v1_3.Bom13.IdentifiableAction value) {
        if (committerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          committer_ = value;
        } else {
          committerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The person who committed or pushed the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
       */
      public Builder setCommitter(
          cyclonedx.v1_3.Bom13.IdentifiableAction.Builder builderForValue) {
        if (committerBuilder_ == null) {
          committer_ = builderForValue.build();
        } else {
          committerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The person who committed or pushed the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
       */
      public Builder mergeCommitter(cyclonedx.v1_3.Bom13.IdentifiableAction value) {
        if (committerBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            committer_ != null &&
            committer_ != cyclonedx.v1_3.Bom13.IdentifiableAction.getDefaultInstance()) {
            getCommitterBuilder().mergeFrom(value);
          } else {
            committer_ = value;
          }
        } else {
          committerBuilder_.mergeFrom(value);
        }
        if (committer_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The person who committed or pushed the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
       */
      public Builder clearCommitter() {
        bitField0_ = (bitField0_ & ~0x00000008);
        committer_ = null;
        if (committerBuilder_ != null) {
          committerBuilder_.dispose();
          committerBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The person who committed or pushed the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.IdentifiableAction.Builder getCommitterBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getCommitterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The person who committed or pushed the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.IdentifiableActionOrBuilder getCommitterOrBuilder() {
        if (committerBuilder_ != null) {
          return committerBuilder_.getMessageOrBuilder();
        } else {
          return committer_ == null ?
              cyclonedx.v1_3.Bom13.IdentifiableAction.getDefaultInstance() : committer_;
        }
      }
      /**
       * <pre>
       * The person who committed or pushed the commit
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.IdentifiableAction committer = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.IdentifiableAction, cyclonedx.v1_3.Bom13.IdentifiableAction.Builder, cyclonedx.v1_3.Bom13.IdentifiableActionOrBuilder> 
          getCommitterFieldBuilder() {
        if (committerBuilder_ == null) {
          committerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.IdentifiableAction, cyclonedx.v1_3.Bom13.IdentifiableAction.Builder, cyclonedx.v1_3.Bom13.IdentifiableActionOrBuilder>(
                  getCommitter(),
                  getParentForChildren(),
                  isClean());
          committer_ = null;
        }
        return committerBuilder_;
      }

      private java.lang.Object message_ = "";
      /**
       * <pre>
       * The text description of the contents of the commit
       * </pre>
       *
       * <code>optional string message = 5;</code>
       * @return Whether the message field is set.
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * The text description of the contents of the commit
       * </pre>
       *
       * <code>optional string message = 5;</code>
       * @return The message.
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The text description of the contents of the commit
       * </pre>
       *
       * <code>optional string message = 5;</code>
       * @return The bytes for message.
       */
      public com.google.protobuf.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The text description of the contents of the commit
       * </pre>
       *
       * <code>optional string message = 5;</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        message_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The text description of the contents of the commit
       * </pre>
       *
       * <code>optional string message = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        message_ = getDefaultInstance().getMessage();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The text description of the contents of the commit
       * </pre>
       *
       * <code>optional string message = 5;</code>
       * @param value The bytes for message to set.
       * @return This builder for chaining.
       */
      public Builder setMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        message_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Commit)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Commit)
    private static final cyclonedx.v1_3.Bom13.Commit DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Commit();
    }

    public static cyclonedx.v1_3.Bom13.Commit getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Commit>
        PARSER = new com.google.protobuf.AbstractParser<Commit>() {
      @java.lang.Override
      public Commit parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Commit> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Commit> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Commit getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ComponentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Component)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.
     * </pre>
     *
     * <code>.cyclonedx.v1_3.Classification type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.
     * </pre>
     *
     * <code>.cyclonedx.v1_3.Classification type = 1;</code>
     * @return The type.
     */
    cyclonedx.v1_3.Bom13.Classification getType();

    /**
     * <pre>
     * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
     * </pre>
     *
     * <code>optional string mime_type = 2;</code>
     * @return Whether the mimeType field is set.
     */
    boolean hasMimeType();
    /**
     * <pre>
     * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
     * </pre>
     *
     * <code>optional string mime_type = 2;</code>
     * @return The mimeType.
     */
    java.lang.String getMimeType();
    /**
     * <pre>
     * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
     * </pre>
     *
     * <code>optional string mime_type = 2;</code>
     * @return The bytes for mimeType.
     */
    com.google.protobuf.ByteString
        getMimeTypeBytes();

    /**
     * <pre>
     * An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     * </pre>
     *
     * <code>optional string bom_ref = 3;</code>
     * @return Whether the bomRef field is set.
     */
    boolean hasBomRef();
    /**
     * <pre>
     * An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     * </pre>
     *
     * <code>optional string bom_ref = 3;</code>
     * @return The bomRef.
     */
    java.lang.String getBomRef();
    /**
     * <pre>
     * An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     * </pre>
     *
     * <code>optional string bom_ref = 3;</code>
     * @return The bytes for bomRef.
     */
    com.google.protobuf.ByteString
        getBomRefBytes();

    /**
     * <pre>
     * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
     * @return Whether the supplier field is set.
     */
    boolean hasSupplier();
    /**
     * <pre>
     * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
     * @return The supplier.
     */
    cyclonedx.v1_3.Bom13.OrganizationalEntity getSupplier();
    /**
     * <pre>
     * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
     */
    cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder getSupplierOrBuilder();

    /**
     * <pre>
     * The person(s) or organization(s) that authored the component
     * </pre>
     *
     * <code>optional string author = 5;</code>
     * @return Whether the author field is set.
     */
    boolean hasAuthor();
    /**
     * <pre>
     * The person(s) or organization(s) that authored the component
     * </pre>
     *
     * <code>optional string author = 5;</code>
     * @return The author.
     */
    java.lang.String getAuthor();
    /**
     * <pre>
     * The person(s) or organization(s) that authored the component
     * </pre>
     *
     * <code>optional string author = 5;</code>
     * @return The bytes for author.
     */
    com.google.protobuf.ByteString
        getAuthorBytes();

    /**
     * <pre>
     * The person(s) or organization(s) that published the component
     * </pre>
     *
     * <code>optional string publisher = 6;</code>
     * @return Whether the publisher field is set.
     */
    boolean hasPublisher();
    /**
     * <pre>
     * The person(s) or organization(s) that published the component
     * </pre>
     *
     * <code>optional string publisher = 6;</code>
     * @return The publisher.
     */
    java.lang.String getPublisher();
    /**
     * <pre>
     * The person(s) or organization(s) that published the component
     * </pre>
     *
     * <code>optional string publisher = 6;</code>
     * @return The bytes for publisher.
     */
    com.google.protobuf.ByteString
        getPublisherBytes();

    /**
     * <pre>
     * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
     * </pre>
     *
     * <code>optional string group = 7;</code>
     * @return Whether the group field is set.
     */
    boolean hasGroup();
    /**
     * <pre>
     * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
     * </pre>
     *
     * <code>optional string group = 7;</code>
     * @return The group.
     */
    java.lang.String getGroup();
    /**
     * <pre>
     * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
     * </pre>
     *
     * <code>optional string group = 7;</code>
     * @return The bytes for group.
     */
    com.google.protobuf.ByteString
        getGroupBytes();

    /**
     * <pre>
     * The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
     * </pre>
     *
     * <code>string name = 8;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
     * </pre>
     *
     * <code>string name = 8;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The component version. The version should ideally comply with semantic versioning but is not enforced.
     * </pre>
     *
     * <code>string version = 9;</code>
     * @return The version.
     */
    java.lang.String getVersion();
    /**
     * <pre>
     * The component version. The version should ideally comply with semantic versioning but is not enforced.
     * </pre>
     *
     * <code>string version = 9;</code>
     * @return The bytes for version.
     */
    com.google.protobuf.ByteString
        getVersionBytes();

    /**
     * <pre>
     * Specifies a description for the component
     * </pre>
     *
     * <code>optional string description = 10;</code>
     * @return Whether the description field is set.
     */
    boolean hasDescription();
    /**
     * <pre>
     * Specifies a description for the component
     * </pre>
     *
     * <code>optional string description = 10;</code>
     * @return The description.
     */
    java.lang.String getDescription();
    /**
     * <pre>
     * Specifies a description for the component
     * </pre>
     *
     * <code>optional string description = 10;</code>
     * @return The bytes for description.
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();

    /**
     * <pre>
     * Specifies the scope of the component. If scope is not specified, 'runtime' scope should be assumed by the consumer of the BOM
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Scope scope = 11;</code>
     * @return Whether the scope field is set.
     */
    boolean hasScope();
    /**
     * <pre>
     * Specifies the scope of the component. If scope is not specified, 'runtime' scope should be assumed by the consumer of the BOM
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Scope scope = 11;</code>
     * @return The enum numeric value on the wire for scope.
     */
    int getScopeValue();
    /**
     * <pre>
     * Specifies the scope of the component. If scope is not specified, 'runtime' scope should be assumed by the consumer of the BOM
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Scope scope = 11;</code>
     * @return The scope.
     */
    cyclonedx.v1_3.Bom13.Scope getScope();

    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Hash> 
        getHashesList();
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
     */
    cyclonedx.v1_3.Bom13.Hash getHashes(int index);
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
     */
    int getHashesCount();
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.HashOrBuilder> 
        getHashesOrBuilderList();
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
     */
    cyclonedx.v1_3.Bom13.HashOrBuilder getHashesOrBuilder(
        int index);

    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> 
        getLicensesList();
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
     */
    cyclonedx.v1_3.Bom13.LicenseChoice getLicenses(int index);
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
     */
    int getLicensesCount();
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> 
        getLicensesOrBuilderList();
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
     */
    cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder getLicensesOrBuilder(
        int index);

    /**
     * <pre>
     * An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
     * </pre>
     *
     * <code>optional string copyright = 14;</code>
     * @return Whether the copyright field is set.
     */
    boolean hasCopyright();
    /**
     * <pre>
     * An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
     * </pre>
     *
     * <code>optional string copyright = 14;</code>
     * @return The copyright.
     */
    java.lang.String getCopyright();
    /**
     * <pre>
     * An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
     * </pre>
     *
     * <code>optional string copyright = 14;</code>
     * @return The bytes for copyright.
     */
    com.google.protobuf.ByteString
        getCopyrightBytes();

    /**
     * <pre>
     * DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
     * </pre>
     *
     * <code>optional string cpe = 15;</code>
     * @return Whether the cpe field is set.
     */
    boolean hasCpe();
    /**
     * <pre>
     * DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
     * </pre>
     *
     * <code>optional string cpe = 15;</code>
     * @return The cpe.
     */
    java.lang.String getCpe();
    /**
     * <pre>
     * DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
     * </pre>
     *
     * <code>optional string cpe = 15;</code>
     * @return The bytes for cpe.
     */
    com.google.protobuf.ByteString
        getCpeBytes();

    /**
     * <pre>
     * Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
     * </pre>
     *
     * <code>optional string purl = 16;</code>
     * @return Whether the purl field is set.
     */
    boolean hasPurl();
    /**
     * <pre>
     * Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
     * </pre>
     *
     * <code>optional string purl = 16;</code>
     * @return The purl.
     */
    java.lang.String getPurl();
    /**
     * <pre>
     * Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
     * </pre>
     *
     * <code>optional string purl = 16;</code>
     * @return The bytes for purl.
     */
    com.google.protobuf.ByteString
        getPurlBytes();

    /**
     * <pre>
     * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
     * @return Whether the swid field is set.
     */
    boolean hasSwid();
    /**
     * <pre>
     * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
     * @return The swid.
     */
    cyclonedx.v1_3.Bom13.Swid getSwid();
    /**
     * <pre>
     * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
     */
    cyclonedx.v1_3.Bom13.SwidOrBuilder getSwidOrBuilder();

    /**
     * <pre>
     * DEPRECATED - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating is the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
     * </pre>
     *
     * <code>optional bool modified = 18;</code>
     * @return Whether the modified field is set.
     */
    boolean hasModified();
    /**
     * <pre>
     * DEPRECATED - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating is the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
     * </pre>
     *
     * <code>optional bool modified = 18;</code>
     * @return The modified.
     */
    boolean getModified();

    /**
     * <pre>
     * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
     * @return Whether the pedigree field is set.
     */
    boolean hasPedigree();
    /**
     * <pre>
     * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
     * @return The pedigree.
     */
    cyclonedx.v1_3.Bom13.Pedigree getPedigree();
    /**
     * <pre>
     * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
     */
    cyclonedx.v1_3.Bom13.PedigreeOrBuilder getPedigreeOrBuilder();

    /**
     * <pre>
     * Provides the ability to document external references related to the component or to the project the component describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> 
        getExternalReferencesList();
    /**
     * <pre>
     * Provides the ability to document external references related to the component or to the project the component describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
     */
    cyclonedx.v1_3.Bom13.ExternalReference getExternalReferences(int index);
    /**
     * <pre>
     * Provides the ability to document external references related to the component or to the project the component describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
     */
    int getExternalReferencesCount();
    /**
     * <pre>
     * Provides the ability to document external references related to the component or to the project the component describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> 
        getExternalReferencesOrBuilderList();
    /**
     * <pre>
     * Provides the ability to document external references related to the component or to the project the component describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
     */
    cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder getExternalReferencesOrBuilder(
        int index);

    /**
     * <pre>
     * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Component> 
        getComponentsList();
    /**
     * <pre>
     * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
     */
    cyclonedx.v1_3.Bom13.Component getComponents(int index);
    /**
     * <pre>
     * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
     */
    int getComponentsCount();
    /**
     * <pre>
     * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
        getComponentsOrBuilderList();
    /**
     * <pre>
     * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
     */
    cyclonedx.v1_3.Bom13.ComponentOrBuilder getComponentsOrBuilder(
        int index);

    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Property> 
        getPropertiesList();
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
     */
    cyclonedx.v1_3.Bom13.Property getProperties(int index);
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
     */
    int getPropertiesCount();
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.PropertyOrBuilder> 
        getPropertiesOrBuilderList();
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
     */
    cyclonedx.v1_3.Bom13.PropertyOrBuilder getPropertiesOrBuilder(
        int index);

    /**
     * <pre>
     * Specifies optional license and copyright evidence
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Evidence> 
        getEvidenceList();
    /**
     * <pre>
     * Specifies optional license and copyright evidence
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
     */
    cyclonedx.v1_3.Bom13.Evidence getEvidence(int index);
    /**
     * <pre>
     * Specifies optional license and copyright evidence
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
     */
    int getEvidenceCount();
    /**
     * <pre>
     * Specifies optional license and copyright evidence
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.EvidenceOrBuilder> 
        getEvidenceOrBuilderList();
    /**
     * <pre>
     * Specifies optional license and copyright evidence
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
     */
    cyclonedx.v1_3.Bom13.EvidenceOrBuilder getEvidenceOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.Component}
   */
  public static final class Component extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Component)
      ComponentOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Component.class.getName());
    }
    // Use Component.newBuilder() to construct.
    private Component(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Component() {
      type_ = 0;
      mimeType_ = "";
      bomRef_ = "";
      author_ = "";
      publisher_ = "";
      group_ = "";
      name_ = "";
      version_ = "";
      description_ = "";
      scope_ = 0;
      hashes_ = java.util.Collections.emptyList();
      licenses_ = java.util.Collections.emptyList();
      copyright_ = "";
      cpe_ = "";
      purl_ = "";
      externalReferences_ = java.util.Collections.emptyList();
      components_ = java.util.Collections.emptyList();
      properties_ = java.util.Collections.emptyList();
      evidence_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Component_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Component_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Component.class, cyclonedx.v1_3.Bom13.Component.Builder.class);
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <pre>
     * Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.
     * </pre>
     *
     * <code>.cyclonedx.v1_3.Classification type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.
     * </pre>
     *
     * <code>.cyclonedx.v1_3.Classification type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public cyclonedx.v1_3.Bom13.Classification getType() {
      cyclonedx.v1_3.Bom13.Classification result = cyclonedx.v1_3.Bom13.Classification.forNumber(type_);
      return result == null ? cyclonedx.v1_3.Bom13.Classification.UNRECOGNIZED : result;
    }

    public static final int MIME_TYPE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object mimeType_ = "";
    /**
     * <pre>
     * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
     * </pre>
     *
     * <code>optional string mime_type = 2;</code>
     * @return Whether the mimeType field is set.
     */
    @java.lang.Override
    public boolean hasMimeType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
     * </pre>
     *
     * <code>optional string mime_type = 2;</code>
     * @return The mimeType.
     */
    @java.lang.Override
    public java.lang.String getMimeType() {
      java.lang.Object ref = mimeType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mimeType_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
     * </pre>
     *
     * <code>optional string mime_type = 2;</code>
     * @return The bytes for mimeType.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMimeTypeBytes() {
      java.lang.Object ref = mimeType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mimeType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BOM_REF_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object bomRef_ = "";
    /**
     * <pre>
     * An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     * </pre>
     *
     * <code>optional string bom_ref = 3;</code>
     * @return Whether the bomRef field is set.
     */
    @java.lang.Override
    public boolean hasBomRef() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     * </pre>
     *
     * <code>optional string bom_ref = 3;</code>
     * @return The bomRef.
     */
    @java.lang.Override
    public java.lang.String getBomRef() {
      java.lang.Object ref = bomRef_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        bomRef_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     * </pre>
     *
     * <code>optional string bom_ref = 3;</code>
     * @return The bytes for bomRef.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getBomRefBytes() {
      java.lang.Object ref = bomRef_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        bomRef_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SUPPLIER_FIELD_NUMBER = 4;
    private cyclonedx.v1_3.Bom13.OrganizationalEntity supplier_;
    /**
     * <pre>
     * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
     * @return Whether the supplier field is set.
     */
    @java.lang.Override
    public boolean hasSupplier() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
     * @return The supplier.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.OrganizationalEntity getSupplier() {
      return supplier_ == null ? cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : supplier_;
    }
    /**
     * <pre>
     * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder getSupplierOrBuilder() {
      return supplier_ == null ? cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : supplier_;
    }

    public static final int AUTHOR_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private volatile java.lang.Object author_ = "";
    /**
     * <pre>
     * The person(s) or organization(s) that authored the component
     * </pre>
     *
     * <code>optional string author = 5;</code>
     * @return Whether the author field is set.
     */
    @java.lang.Override
    public boolean hasAuthor() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The person(s) or organization(s) that authored the component
     * </pre>
     *
     * <code>optional string author = 5;</code>
     * @return The author.
     */
    @java.lang.Override
    public java.lang.String getAuthor() {
      java.lang.Object ref = author_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        author_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The person(s) or organization(s) that authored the component
     * </pre>
     *
     * <code>optional string author = 5;</code>
     * @return The bytes for author.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAuthorBytes() {
      java.lang.Object ref = author_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        author_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PUBLISHER_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private volatile java.lang.Object publisher_ = "";
    /**
     * <pre>
     * The person(s) or organization(s) that published the component
     * </pre>
     *
     * <code>optional string publisher = 6;</code>
     * @return Whether the publisher field is set.
     */
    @java.lang.Override
    public boolean hasPublisher() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The person(s) or organization(s) that published the component
     * </pre>
     *
     * <code>optional string publisher = 6;</code>
     * @return The publisher.
     */
    @java.lang.Override
    public java.lang.String getPublisher() {
      java.lang.Object ref = publisher_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        publisher_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The person(s) or organization(s) that published the component
     * </pre>
     *
     * <code>optional string publisher = 6;</code>
     * @return The bytes for publisher.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPublisherBytes() {
      java.lang.Object ref = publisher_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        publisher_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int GROUP_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private volatile java.lang.Object group_ = "";
    /**
     * <pre>
     * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
     * </pre>
     *
     * <code>optional string group = 7;</code>
     * @return Whether the group field is set.
     */
    @java.lang.Override
    public boolean hasGroup() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
     * </pre>
     *
     * <code>optional string group = 7;</code>
     * @return The group.
     */
    @java.lang.Override
    public java.lang.String getGroup() {
      java.lang.Object ref = group_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        group_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
     * </pre>
     *
     * <code>optional string group = 7;</code>
     * @return The bytes for group.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getGroupBytes() {
      java.lang.Object ref = group_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        group_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
     * </pre>
     *
     * <code>string name = 8;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
     * </pre>
     *
     * <code>string name = 8;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VERSION_FIELD_NUMBER = 9;
    @SuppressWarnings("serial")
    private volatile java.lang.Object version_ = "";
    /**
     * <pre>
     * The component version. The version should ideally comply with semantic versioning but is not enforced.
     * </pre>
     *
     * <code>string version = 9;</code>
     * @return The version.
     */
    @java.lang.Override
    public java.lang.String getVersion() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        version_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The component version. The version should ideally comply with semantic versioning but is not enforced.
     * </pre>
     *
     * <code>string version = 9;</code>
     * @return The bytes for version.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVersionBytes() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        version_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 10;
    @SuppressWarnings("serial")
    private volatile java.lang.Object description_ = "";
    /**
     * <pre>
     * Specifies a description for the component
     * </pre>
     *
     * <code>optional string description = 10;</code>
     * @return Whether the description field is set.
     */
    @java.lang.Override
    public boolean hasDescription() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Specifies a description for the component
     * </pre>
     *
     * <code>optional string description = 10;</code>
     * @return The description.
     */
    @java.lang.Override
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        description_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Specifies a description for the component
     * </pre>
     *
     * <code>optional string description = 10;</code>
     * @return The bytes for description.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCOPE_FIELD_NUMBER = 11;
    private int scope_ = 0;
    /**
     * <pre>
     * Specifies the scope of the component. If scope is not specified, 'runtime' scope should be assumed by the consumer of the BOM
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Scope scope = 11;</code>
     * @return Whether the scope field is set.
     */
    @java.lang.Override public boolean hasScope() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Specifies the scope of the component. If scope is not specified, 'runtime' scope should be assumed by the consumer of the BOM
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Scope scope = 11;</code>
     * @return The enum numeric value on the wire for scope.
     */
    @java.lang.Override public int getScopeValue() {
      return scope_;
    }
    /**
     * <pre>
     * Specifies the scope of the component. If scope is not specified, 'runtime' scope should be assumed by the consumer of the BOM
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Scope scope = 11;</code>
     * @return The scope.
     */
    @java.lang.Override public cyclonedx.v1_3.Bom13.Scope getScope() {
      cyclonedx.v1_3.Bom13.Scope result = cyclonedx.v1_3.Bom13.Scope.forNumber(scope_);
      return result == null ? cyclonedx.v1_3.Bom13.Scope.UNRECOGNIZED : result;
    }

    public static final int HASHES_FIELD_NUMBER = 12;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Hash> hashes_;
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Hash> getHashesList() {
      return hashes_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.HashOrBuilder> 
        getHashesOrBuilderList() {
      return hashes_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
     */
    @java.lang.Override
    public int getHashesCount() {
      return hashes_.size();
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Hash getHashes(int index) {
      return hashes_.get(index);
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.HashOrBuilder getHashesOrBuilder(
        int index) {
      return hashes_.get(index);
    }

    public static final int LICENSES_FIELD_NUMBER = 13;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> licenses_;
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> getLicensesList() {
      return licenses_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> 
        getLicensesOrBuilderList() {
      return licenses_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
     */
    @java.lang.Override
    public int getLicensesCount() {
      return licenses_.size();
    }
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.LicenseChoice getLicenses(int index) {
      return licenses_.get(index);
    }
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder getLicensesOrBuilder(
        int index) {
      return licenses_.get(index);
    }

    public static final int COPYRIGHT_FIELD_NUMBER = 14;
    @SuppressWarnings("serial")
    private volatile java.lang.Object copyright_ = "";
    /**
     * <pre>
     * An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
     * </pre>
     *
     * <code>optional string copyright = 14;</code>
     * @return Whether the copyright field is set.
     */
    @java.lang.Override
    public boolean hasCopyright() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
     * </pre>
     *
     * <code>optional string copyright = 14;</code>
     * @return The copyright.
     */
    @java.lang.Override
    public java.lang.String getCopyright() {
      java.lang.Object ref = copyright_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        copyright_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
     * </pre>
     *
     * <code>optional string copyright = 14;</code>
     * @return The bytes for copyright.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCopyrightBytes() {
      java.lang.Object ref = copyright_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        copyright_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CPE_FIELD_NUMBER = 15;
    @SuppressWarnings("serial")
    private volatile java.lang.Object cpe_ = "";
    /**
     * <pre>
     * DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
     * </pre>
     *
     * <code>optional string cpe = 15;</code>
     * @return Whether the cpe field is set.
     */
    @java.lang.Override
    public boolean hasCpe() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
     * </pre>
     *
     * <code>optional string cpe = 15;</code>
     * @return The cpe.
     */
    @java.lang.Override
    public java.lang.String getCpe() {
      java.lang.Object ref = cpe_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        cpe_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
     * </pre>
     *
     * <code>optional string cpe = 15;</code>
     * @return The bytes for cpe.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCpeBytes() {
      java.lang.Object ref = cpe_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cpe_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PURL_FIELD_NUMBER = 16;
    @SuppressWarnings("serial")
    private volatile java.lang.Object purl_ = "";
    /**
     * <pre>
     * Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
     * </pre>
     *
     * <code>optional string purl = 16;</code>
     * @return Whether the purl field is set.
     */
    @java.lang.Override
    public boolean hasPurl() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
     * </pre>
     *
     * <code>optional string purl = 16;</code>
     * @return The purl.
     */
    @java.lang.Override
    public java.lang.String getPurl() {
      java.lang.Object ref = purl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        purl_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
     * </pre>
     *
     * <code>optional string purl = 16;</code>
     * @return The bytes for purl.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPurlBytes() {
      java.lang.Object ref = purl_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        purl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SWID_FIELD_NUMBER = 17;
    private cyclonedx.v1_3.Bom13.Swid swid_;
    /**
     * <pre>
     * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
     * @return Whether the swid field is set.
     */
    @java.lang.Override
    public boolean hasSwid() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
     * @return The swid.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Swid getSwid() {
      return swid_ == null ? cyclonedx.v1_3.Bom13.Swid.getDefaultInstance() : swid_;
    }
    /**
     * <pre>
     * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.SwidOrBuilder getSwidOrBuilder() {
      return swid_ == null ? cyclonedx.v1_3.Bom13.Swid.getDefaultInstance() : swid_;
    }

    public static final int MODIFIED_FIELD_NUMBER = 18;
    private boolean modified_ = false;
    /**
     * <pre>
     * DEPRECATED - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating is the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
     * </pre>
     *
     * <code>optional bool modified = 18;</code>
     * @return Whether the modified field is set.
     */
    @java.lang.Override
    public boolean hasModified() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     * DEPRECATED - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating is the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
     * </pre>
     *
     * <code>optional bool modified = 18;</code>
     * @return The modified.
     */
    @java.lang.Override
    public boolean getModified() {
      return modified_;
    }

    public static final int PEDIGREE_FIELD_NUMBER = 19;
    private cyclonedx.v1_3.Bom13.Pedigree pedigree_;
    /**
     * <pre>
     * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
     * @return Whether the pedigree field is set.
     */
    @java.lang.Override
    public boolean hasPedigree() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
     * @return The pedigree.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Pedigree getPedigree() {
      return pedigree_ == null ? cyclonedx.v1_3.Bom13.Pedigree.getDefaultInstance() : pedigree_;
    }
    /**
     * <pre>
     * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.PedigreeOrBuilder getPedigreeOrBuilder() {
      return pedigree_ == null ? cyclonedx.v1_3.Bom13.Pedigree.getDefaultInstance() : pedigree_;
    }

    public static final int EXTERNAL_REFERENCES_FIELD_NUMBER = 20;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> externalReferences_;
    /**
     * <pre>
     * Provides the ability to document external references related to the component or to the project the component describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> getExternalReferencesList() {
      return externalReferences_;
    }
    /**
     * <pre>
     * Provides the ability to document external references related to the component or to the project the component describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> 
        getExternalReferencesOrBuilderList() {
      return externalReferences_;
    }
    /**
     * <pre>
     * Provides the ability to document external references related to the component or to the project the component describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
     */
    @java.lang.Override
    public int getExternalReferencesCount() {
      return externalReferences_.size();
    }
    /**
     * <pre>
     * Provides the ability to document external references related to the component or to the project the component describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ExternalReference getExternalReferences(int index) {
      return externalReferences_.get(index);
    }
    /**
     * <pre>
     * Provides the ability to document external references related to the component or to the project the component describes.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder getExternalReferencesOrBuilder(
        int index) {
      return externalReferences_.get(index);
    }

    public static final int COMPONENTS_FIELD_NUMBER = 21;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Component> components_;
    /**
     * <pre>
     * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Component> getComponentsList() {
      return components_;
    }
    /**
     * <pre>
     * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
        getComponentsOrBuilderList() {
      return components_;
    }
    /**
     * <pre>
     * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
     */
    @java.lang.Override
    public int getComponentsCount() {
      return components_.size();
    }
    /**
     * <pre>
     * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Component getComponents(int index) {
      return components_.get(index);
    }
    /**
     * <pre>
     * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ComponentOrBuilder getComponentsOrBuilder(
        int index) {
      return components_.get(index);
    }

    public static final int PROPERTIES_FIELD_NUMBER = 22;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Property> properties_;
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Property> getPropertiesList() {
      return properties_;
    }
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.PropertyOrBuilder> 
        getPropertiesOrBuilderList() {
      return properties_;
    }
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
     */
    @java.lang.Override
    public int getPropertiesCount() {
      return properties_.size();
    }
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Property getProperties(int index) {
      return properties_.get(index);
    }
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.PropertyOrBuilder getPropertiesOrBuilder(
        int index) {
      return properties_.get(index);
    }

    public static final int EVIDENCE_FIELD_NUMBER = 23;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Evidence> evidence_;
    /**
     * <pre>
     * Specifies optional license and copyright evidence
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Evidence> getEvidenceList() {
      return evidence_;
    }
    /**
     * <pre>
     * Specifies optional license and copyright evidence
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.EvidenceOrBuilder> 
        getEvidenceOrBuilderList() {
      return evidence_;
    }
    /**
     * <pre>
     * Specifies optional license and copyright evidence
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
     */
    @java.lang.Override
    public int getEvidenceCount() {
      return evidence_.size();
    }
    /**
     * <pre>
     * Specifies optional license and copyright evidence
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Evidence getEvidence(int index) {
      return evidence_.get(index);
    }
    /**
     * <pre>
     * Specifies optional license and copyright evidence
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.EvidenceOrBuilder getEvidenceOrBuilder(
        int index) {
      return evidence_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != cyclonedx.v1_3.Bom13.Classification.CLASSIFICATION_NULL.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, mimeType_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, bomRef_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(4, getSupplier());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 5, author_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 6, publisher_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 7, group_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 8, name_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(version_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 9, version_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 10, description_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeEnum(11, scope_);
      }
      for (int i = 0; i < hashes_.size(); i++) {
        output.writeMessage(12, hashes_.get(i));
      }
      for (int i = 0; i < licenses_.size(); i++) {
        output.writeMessage(13, licenses_.get(i));
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 14, copyright_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 15, cpe_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 16, purl_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeMessage(17, getSwid());
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeBool(18, modified_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        output.writeMessage(19, getPedigree());
      }
      for (int i = 0; i < externalReferences_.size(); i++) {
        output.writeMessage(20, externalReferences_.get(i));
      }
      for (int i = 0; i < components_.size(); i++) {
        output.writeMessage(21, components_.get(i));
      }
      for (int i = 0; i < properties_.size(); i++) {
        output.writeMessage(22, properties_.get(i));
      }
      for (int i = 0; i < evidence_.size(); i++) {
        output.writeMessage(23, evidence_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != cyclonedx.v1_3.Bom13.Classification.CLASSIFICATION_NULL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, mimeType_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, bomRef_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getSupplier());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(5, author_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(6, publisher_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(7, group_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(8, name_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(version_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(9, version_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(10, description_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, scope_);
      }
      for (int i = 0; i < hashes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, hashes_.get(i));
      }
      for (int i = 0; i < licenses_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, licenses_.get(i));
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(14, copyright_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(15, cpe_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(16, purl_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getSwid());
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(18, modified_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, getPedigree());
      }
      for (int i = 0; i < externalReferences_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, externalReferences_.get(i));
      }
      for (int i = 0; i < components_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, components_.get(i));
      }
      for (int i = 0; i < properties_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, properties_.get(i));
      }
      for (int i = 0; i < evidence_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, evidence_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Component)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Component other = (cyclonedx.v1_3.Bom13.Component) obj;

      if (type_ != other.type_) return false;
      if (hasMimeType() != other.hasMimeType()) return false;
      if (hasMimeType()) {
        if (!getMimeType()
            .equals(other.getMimeType())) return false;
      }
      if (hasBomRef() != other.hasBomRef()) return false;
      if (hasBomRef()) {
        if (!getBomRef()
            .equals(other.getBomRef())) return false;
      }
      if (hasSupplier() != other.hasSupplier()) return false;
      if (hasSupplier()) {
        if (!getSupplier()
            .equals(other.getSupplier())) return false;
      }
      if (hasAuthor() != other.hasAuthor()) return false;
      if (hasAuthor()) {
        if (!getAuthor()
            .equals(other.getAuthor())) return false;
      }
      if (hasPublisher() != other.hasPublisher()) return false;
      if (hasPublisher()) {
        if (!getPublisher()
            .equals(other.getPublisher())) return false;
      }
      if (hasGroup() != other.hasGroup()) return false;
      if (hasGroup()) {
        if (!getGroup()
            .equals(other.getGroup())) return false;
      }
      if (!getName()
          .equals(other.getName())) return false;
      if (!getVersion()
          .equals(other.getVersion())) return false;
      if (hasDescription() != other.hasDescription()) return false;
      if (hasDescription()) {
        if (!getDescription()
            .equals(other.getDescription())) return false;
      }
      if (hasScope() != other.hasScope()) return false;
      if (hasScope()) {
        if (scope_ != other.scope_) return false;
      }
      if (!getHashesList()
          .equals(other.getHashesList())) return false;
      if (!getLicensesList()
          .equals(other.getLicensesList())) return false;
      if (hasCopyright() != other.hasCopyright()) return false;
      if (hasCopyright()) {
        if (!getCopyright()
            .equals(other.getCopyright())) return false;
      }
      if (hasCpe() != other.hasCpe()) return false;
      if (hasCpe()) {
        if (!getCpe()
            .equals(other.getCpe())) return false;
      }
      if (hasPurl() != other.hasPurl()) return false;
      if (hasPurl()) {
        if (!getPurl()
            .equals(other.getPurl())) return false;
      }
      if (hasSwid() != other.hasSwid()) return false;
      if (hasSwid()) {
        if (!getSwid()
            .equals(other.getSwid())) return false;
      }
      if (hasModified() != other.hasModified()) return false;
      if (hasModified()) {
        if (getModified()
            != other.getModified()) return false;
      }
      if (hasPedigree() != other.hasPedigree()) return false;
      if (hasPedigree()) {
        if (!getPedigree()
            .equals(other.getPedigree())) return false;
      }
      if (!getExternalReferencesList()
          .equals(other.getExternalReferencesList())) return false;
      if (!getComponentsList()
          .equals(other.getComponentsList())) return false;
      if (!getPropertiesList()
          .equals(other.getPropertiesList())) return false;
      if (!getEvidenceList()
          .equals(other.getEvidenceList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      if (hasMimeType()) {
        hash = (37 * hash) + MIME_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getMimeType().hashCode();
      }
      if (hasBomRef()) {
        hash = (37 * hash) + BOM_REF_FIELD_NUMBER;
        hash = (53 * hash) + getBomRef().hashCode();
      }
      if (hasSupplier()) {
        hash = (37 * hash) + SUPPLIER_FIELD_NUMBER;
        hash = (53 * hash) + getSupplier().hashCode();
      }
      if (hasAuthor()) {
        hash = (37 * hash) + AUTHOR_FIELD_NUMBER;
        hash = (53 * hash) + getAuthor().hashCode();
      }
      if (hasPublisher()) {
        hash = (37 * hash) + PUBLISHER_FIELD_NUMBER;
        hash = (53 * hash) + getPublisher().hashCode();
      }
      if (hasGroup()) {
        hash = (37 * hash) + GROUP_FIELD_NUMBER;
        hash = (53 * hash) + getGroup().hashCode();
      }
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getVersion().hashCode();
      if (hasDescription()) {
        hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
        hash = (53 * hash) + getDescription().hashCode();
      }
      if (hasScope()) {
        hash = (37 * hash) + SCOPE_FIELD_NUMBER;
        hash = (53 * hash) + scope_;
      }
      if (getHashesCount() > 0) {
        hash = (37 * hash) + HASHES_FIELD_NUMBER;
        hash = (53 * hash) + getHashesList().hashCode();
      }
      if (getLicensesCount() > 0) {
        hash = (37 * hash) + LICENSES_FIELD_NUMBER;
        hash = (53 * hash) + getLicensesList().hashCode();
      }
      if (hasCopyright()) {
        hash = (37 * hash) + COPYRIGHT_FIELD_NUMBER;
        hash = (53 * hash) + getCopyright().hashCode();
      }
      if (hasCpe()) {
        hash = (37 * hash) + CPE_FIELD_NUMBER;
        hash = (53 * hash) + getCpe().hashCode();
      }
      if (hasPurl()) {
        hash = (37 * hash) + PURL_FIELD_NUMBER;
        hash = (53 * hash) + getPurl().hashCode();
      }
      if (hasSwid()) {
        hash = (37 * hash) + SWID_FIELD_NUMBER;
        hash = (53 * hash) + getSwid().hashCode();
      }
      if (hasModified()) {
        hash = (37 * hash) + MODIFIED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getModified());
      }
      if (hasPedigree()) {
        hash = (37 * hash) + PEDIGREE_FIELD_NUMBER;
        hash = (53 * hash) + getPedigree().hashCode();
      }
      if (getExternalReferencesCount() > 0) {
        hash = (37 * hash) + EXTERNAL_REFERENCES_FIELD_NUMBER;
        hash = (53 * hash) + getExternalReferencesList().hashCode();
      }
      if (getComponentsCount() > 0) {
        hash = (37 * hash) + COMPONENTS_FIELD_NUMBER;
        hash = (53 * hash) + getComponentsList().hashCode();
      }
      if (getPropertiesCount() > 0) {
        hash = (37 * hash) + PROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + getPropertiesList().hashCode();
      }
      if (getEvidenceCount() > 0) {
        hash = (37 * hash) + EVIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + getEvidenceList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Component parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Component parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Component parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Component parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Component parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Component parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Component parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Component parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Component parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Component parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Component parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Component parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Component prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.Component}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Component)
        cyclonedx.v1_3.Bom13.ComponentOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Component_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Component_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Component.class, cyclonedx.v1_3.Bom13.Component.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Component.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getSupplierFieldBuilder();
          getHashesFieldBuilder();
          getLicensesFieldBuilder();
          getSwidFieldBuilder();
          getPedigreeFieldBuilder();
          getExternalReferencesFieldBuilder();
          getComponentsFieldBuilder();
          getPropertiesFieldBuilder();
          getEvidenceFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        mimeType_ = "";
        bomRef_ = "";
        supplier_ = null;
        if (supplierBuilder_ != null) {
          supplierBuilder_.dispose();
          supplierBuilder_ = null;
        }
        author_ = "";
        publisher_ = "";
        group_ = "";
        name_ = "";
        version_ = "";
        description_ = "";
        scope_ = 0;
        if (hashesBuilder_ == null) {
          hashes_ = java.util.Collections.emptyList();
        } else {
          hashes_ = null;
          hashesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (licensesBuilder_ == null) {
          licenses_ = java.util.Collections.emptyList();
        } else {
          licenses_ = null;
          licensesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        copyright_ = "";
        cpe_ = "";
        purl_ = "";
        swid_ = null;
        if (swidBuilder_ != null) {
          swidBuilder_.dispose();
          swidBuilder_ = null;
        }
        modified_ = false;
        pedigree_ = null;
        if (pedigreeBuilder_ != null) {
          pedigreeBuilder_.dispose();
          pedigreeBuilder_ = null;
        }
        if (externalReferencesBuilder_ == null) {
          externalReferences_ = java.util.Collections.emptyList();
        } else {
          externalReferences_ = null;
          externalReferencesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (componentsBuilder_ == null) {
          components_ = java.util.Collections.emptyList();
        } else {
          components_ = null;
          componentsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        if (propertiesBuilder_ == null) {
          properties_ = java.util.Collections.emptyList();
        } else {
          properties_ = null;
          propertiesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        if (evidenceBuilder_ == null) {
          evidence_ = java.util.Collections.emptyList();
        } else {
          evidence_ = null;
          evidenceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Component_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Component getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Component.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Component build() {
        cyclonedx.v1_3.Bom13.Component result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Component buildPartial() {
        cyclonedx.v1_3.Bom13.Component result = new cyclonedx.v1_3.Bom13.Component(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(cyclonedx.v1_3.Bom13.Component result) {
        if (hashesBuilder_ == null) {
          if (((bitField0_ & 0x00000800) != 0)) {
            hashes_ = java.util.Collections.unmodifiableList(hashes_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.hashes_ = hashes_;
        } else {
          result.hashes_ = hashesBuilder_.build();
        }
        if (licensesBuilder_ == null) {
          if (((bitField0_ & 0x00001000) != 0)) {
            licenses_ = java.util.Collections.unmodifiableList(licenses_);
            bitField0_ = (bitField0_ & ~0x00001000);
          }
          result.licenses_ = licenses_;
        } else {
          result.licenses_ = licensesBuilder_.build();
        }
        if (externalReferencesBuilder_ == null) {
          if (((bitField0_ & 0x00080000) != 0)) {
            externalReferences_ = java.util.Collections.unmodifiableList(externalReferences_);
            bitField0_ = (bitField0_ & ~0x00080000);
          }
          result.externalReferences_ = externalReferences_;
        } else {
          result.externalReferences_ = externalReferencesBuilder_.build();
        }
        if (componentsBuilder_ == null) {
          if (((bitField0_ & 0x00100000) != 0)) {
            components_ = java.util.Collections.unmodifiableList(components_);
            bitField0_ = (bitField0_ & ~0x00100000);
          }
          result.components_ = components_;
        } else {
          result.components_ = componentsBuilder_.build();
        }
        if (propertiesBuilder_ == null) {
          if (((bitField0_ & 0x00200000) != 0)) {
            properties_ = java.util.Collections.unmodifiableList(properties_);
            bitField0_ = (bitField0_ & ~0x00200000);
          }
          result.properties_ = properties_;
        } else {
          result.properties_ = propertiesBuilder_.build();
        }
        if (evidenceBuilder_ == null) {
          if (((bitField0_ & 0x00400000) != 0)) {
            evidence_ = java.util.Collections.unmodifiableList(evidence_);
            bitField0_ = (bitField0_ & ~0x00400000);
          }
          result.evidence_ = evidence_;
        } else {
          result.evidence_ = evidenceBuilder_.build();
        }
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Component result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.mimeType_ = mimeType_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.bomRef_ = bomRef_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.supplier_ = supplierBuilder_ == null
              ? supplier_
              : supplierBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.author_ = author_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.publisher_ = publisher_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.group_ = group_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.name_ = name_;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.version_ = version_;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.description_ = description_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.scope_ = scope_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.copyright_ = copyright_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.cpe_ = cpe_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00008000) != 0)) {
          result.purl_ = purl_;
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00010000) != 0)) {
          result.swid_ = swidBuilder_ == null
              ? swid_
              : swidBuilder_.build();
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00020000) != 0)) {
          result.modified_ = modified_;
          to_bitField0_ |= 0x00001000;
        }
        if (((from_bitField0_ & 0x00040000) != 0)) {
          result.pedigree_ = pedigreeBuilder_ == null
              ? pedigree_
              : pedigreeBuilder_.build();
          to_bitField0_ |= 0x00002000;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Component) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Component)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Component other) {
        if (other == cyclonedx.v1_3.Bom13.Component.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.hasMimeType()) {
          mimeType_ = other.mimeType_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasBomRef()) {
          bomRef_ = other.bomRef_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.hasSupplier()) {
          mergeSupplier(other.getSupplier());
        }
        if (other.hasAuthor()) {
          author_ = other.author_;
          bitField0_ |= 0x00000010;
          onChanged();
        }
        if (other.hasPublisher()) {
          publisher_ = other.publisher_;
          bitField0_ |= 0x00000020;
          onChanged();
        }
        if (other.hasGroup()) {
          group_ = other.group_;
          bitField0_ |= 0x00000040;
          onChanged();
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          bitField0_ |= 0x00000080;
          onChanged();
        }
        if (!other.getVersion().isEmpty()) {
          version_ = other.version_;
          bitField0_ |= 0x00000100;
          onChanged();
        }
        if (other.hasDescription()) {
          description_ = other.description_;
          bitField0_ |= 0x00000200;
          onChanged();
        }
        if (other.hasScope()) {
          setScope(other.getScope());
        }
        if (hashesBuilder_ == null) {
          if (!other.hashes_.isEmpty()) {
            if (hashes_.isEmpty()) {
              hashes_ = other.hashes_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureHashesIsMutable();
              hashes_.addAll(other.hashes_);
            }
            onChanged();
          }
        } else {
          if (!other.hashes_.isEmpty()) {
            if (hashesBuilder_.isEmpty()) {
              hashesBuilder_.dispose();
              hashesBuilder_ = null;
              hashes_ = other.hashes_;
              bitField0_ = (bitField0_ & ~0x00000800);
              hashesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHashesFieldBuilder() : null;
            } else {
              hashesBuilder_.addAllMessages(other.hashes_);
            }
          }
        }
        if (licensesBuilder_ == null) {
          if (!other.licenses_.isEmpty()) {
            if (licenses_.isEmpty()) {
              licenses_ = other.licenses_;
              bitField0_ = (bitField0_ & ~0x00001000);
            } else {
              ensureLicensesIsMutable();
              licenses_.addAll(other.licenses_);
            }
            onChanged();
          }
        } else {
          if (!other.licenses_.isEmpty()) {
            if (licensesBuilder_.isEmpty()) {
              licensesBuilder_.dispose();
              licensesBuilder_ = null;
              licenses_ = other.licenses_;
              bitField0_ = (bitField0_ & ~0x00001000);
              licensesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLicensesFieldBuilder() : null;
            } else {
              licensesBuilder_.addAllMessages(other.licenses_);
            }
          }
        }
        if (other.hasCopyright()) {
          copyright_ = other.copyright_;
          bitField0_ |= 0x00002000;
          onChanged();
        }
        if (other.hasCpe()) {
          cpe_ = other.cpe_;
          bitField0_ |= 0x00004000;
          onChanged();
        }
        if (other.hasPurl()) {
          purl_ = other.purl_;
          bitField0_ |= 0x00008000;
          onChanged();
        }
        if (other.hasSwid()) {
          mergeSwid(other.getSwid());
        }
        if (other.hasModified()) {
          setModified(other.getModified());
        }
        if (other.hasPedigree()) {
          mergePedigree(other.getPedigree());
        }
        if (externalReferencesBuilder_ == null) {
          if (!other.externalReferences_.isEmpty()) {
            if (externalReferences_.isEmpty()) {
              externalReferences_ = other.externalReferences_;
              bitField0_ = (bitField0_ & ~0x00080000);
            } else {
              ensureExternalReferencesIsMutable();
              externalReferences_.addAll(other.externalReferences_);
            }
            onChanged();
          }
        } else {
          if (!other.externalReferences_.isEmpty()) {
            if (externalReferencesBuilder_.isEmpty()) {
              externalReferencesBuilder_.dispose();
              externalReferencesBuilder_ = null;
              externalReferences_ = other.externalReferences_;
              bitField0_ = (bitField0_ & ~0x00080000);
              externalReferencesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getExternalReferencesFieldBuilder() : null;
            } else {
              externalReferencesBuilder_.addAllMessages(other.externalReferences_);
            }
          }
        }
        if (componentsBuilder_ == null) {
          if (!other.components_.isEmpty()) {
            if (components_.isEmpty()) {
              components_ = other.components_;
              bitField0_ = (bitField0_ & ~0x00100000);
            } else {
              ensureComponentsIsMutable();
              components_.addAll(other.components_);
            }
            onChanged();
          }
        } else {
          if (!other.components_.isEmpty()) {
            if (componentsBuilder_.isEmpty()) {
              componentsBuilder_.dispose();
              componentsBuilder_ = null;
              components_ = other.components_;
              bitField0_ = (bitField0_ & ~0x00100000);
              componentsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getComponentsFieldBuilder() : null;
            } else {
              componentsBuilder_.addAllMessages(other.components_);
            }
          }
        }
        if (propertiesBuilder_ == null) {
          if (!other.properties_.isEmpty()) {
            if (properties_.isEmpty()) {
              properties_ = other.properties_;
              bitField0_ = (bitField0_ & ~0x00200000);
            } else {
              ensurePropertiesIsMutable();
              properties_.addAll(other.properties_);
            }
            onChanged();
          }
        } else {
          if (!other.properties_.isEmpty()) {
            if (propertiesBuilder_.isEmpty()) {
              propertiesBuilder_.dispose();
              propertiesBuilder_ = null;
              properties_ = other.properties_;
              bitField0_ = (bitField0_ & ~0x00200000);
              propertiesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPropertiesFieldBuilder() : null;
            } else {
              propertiesBuilder_.addAllMessages(other.properties_);
            }
          }
        }
        if (evidenceBuilder_ == null) {
          if (!other.evidence_.isEmpty()) {
            if (evidence_.isEmpty()) {
              evidence_ = other.evidence_;
              bitField0_ = (bitField0_ & ~0x00400000);
            } else {
              ensureEvidenceIsMutable();
              evidence_.addAll(other.evidence_);
            }
            onChanged();
          }
        } else {
          if (!other.evidence_.isEmpty()) {
            if (evidenceBuilder_.isEmpty()) {
              evidenceBuilder_.dispose();
              evidenceBuilder_ = null;
              evidence_ = other.evidence_;
              bitField0_ = (bitField0_ & ~0x00400000);
              evidenceBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getEvidenceFieldBuilder() : null;
            } else {
              evidenceBuilder_.addAllMessages(other.evidence_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                mimeType_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                bomRef_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getSupplierFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                author_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 50: {
                publisher_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 58: {
                group_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              case 66: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              case 74: {
                version_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000100;
                break;
              } // case 74
              case 82: {
                description_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000200;
                break;
              } // case 82
              case 88: {
                scope_ = input.readEnum();
                bitField0_ |= 0x00000400;
                break;
              } // case 88
              case 98: {
                cyclonedx.v1_3.Bom13.Hash m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Hash.parser(),
                        extensionRegistry);
                if (hashesBuilder_ == null) {
                  ensureHashesIsMutable();
                  hashes_.add(m);
                } else {
                  hashesBuilder_.addMessage(m);
                }
                break;
              } // case 98
              case 106: {
                cyclonedx.v1_3.Bom13.LicenseChoice m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.LicenseChoice.parser(),
                        extensionRegistry);
                if (licensesBuilder_ == null) {
                  ensureLicensesIsMutable();
                  licenses_.add(m);
                } else {
                  licensesBuilder_.addMessage(m);
                }
                break;
              } // case 106
              case 114: {
                copyright_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00002000;
                break;
              } // case 114
              case 122: {
                cpe_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00004000;
                break;
              } // case 122
              case 130: {
                purl_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00008000;
                break;
              } // case 130
              case 138: {
                input.readMessage(
                    getSwidFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00010000;
                break;
              } // case 138
              case 144: {
                modified_ = input.readBool();
                bitField0_ |= 0x00020000;
                break;
              } // case 144
              case 154: {
                input.readMessage(
                    getPedigreeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00040000;
                break;
              } // case 154
              case 162: {
                cyclonedx.v1_3.Bom13.ExternalReference m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.ExternalReference.parser(),
                        extensionRegistry);
                if (externalReferencesBuilder_ == null) {
                  ensureExternalReferencesIsMutable();
                  externalReferences_.add(m);
                } else {
                  externalReferencesBuilder_.addMessage(m);
                }
                break;
              } // case 162
              case 170: {
                cyclonedx.v1_3.Bom13.Component m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Component.parser(),
                        extensionRegistry);
                if (componentsBuilder_ == null) {
                  ensureComponentsIsMutable();
                  components_.add(m);
                } else {
                  componentsBuilder_.addMessage(m);
                }
                break;
              } // case 170
              case 178: {
                cyclonedx.v1_3.Bom13.Property m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Property.parser(),
                        extensionRegistry);
                if (propertiesBuilder_ == null) {
                  ensurePropertiesIsMutable();
                  properties_.add(m);
                } else {
                  propertiesBuilder_.addMessage(m);
                }
                break;
              } // case 178
              case 186: {
                cyclonedx.v1_3.Bom13.Evidence m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Evidence.parser(),
                        extensionRegistry);
                if (evidenceBuilder_ == null) {
                  ensureEvidenceIsMutable();
                  evidence_.add(m);
                } else {
                  evidenceBuilder_.addMessage(m);
                }
                break;
              } // case 186
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <pre>
       * Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.Classification type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.Classification type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.Classification type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Classification getType() {
        cyclonedx.v1_3.Bom13.Classification result = cyclonedx.v1_3.Bom13.Classification.forNumber(type_);
        return result == null ? cyclonedx.v1_3.Bom13.Classification.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.Classification type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(cyclonedx.v1_3.Bom13.Classification value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.Classification type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mimeType_ = "";
      /**
       * <pre>
       * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
       * </pre>
       *
       * <code>optional string mime_type = 2;</code>
       * @return Whether the mimeType field is set.
       */
      public boolean hasMimeType() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
       * </pre>
       *
       * <code>optional string mime_type = 2;</code>
       * @return The mimeType.
       */
      public java.lang.String getMimeType() {
        java.lang.Object ref = mimeType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          mimeType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
       * </pre>
       *
       * <code>optional string mime_type = 2;</code>
       * @return The bytes for mimeType.
       */
      public com.google.protobuf.ByteString
          getMimeTypeBytes() {
        java.lang.Object ref = mimeType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mimeType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
       * </pre>
       *
       * <code>optional string mime_type = 2;</code>
       * @param value The mimeType to set.
       * @return This builder for chaining.
       */
      public Builder setMimeType(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        mimeType_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
       * </pre>
       *
       * <code>optional string mime_type = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMimeType() {
        mimeType_ = getDefaultInstance().getMimeType();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
       * </pre>
       *
       * <code>optional string mime_type = 2;</code>
       * @param value The bytes for mimeType to set.
       * @return This builder for chaining.
       */
      public Builder setMimeTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        mimeType_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object bomRef_ = "";
      /**
       * <pre>
       * An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
       * </pre>
       *
       * <code>optional string bom_ref = 3;</code>
       * @return Whether the bomRef field is set.
       */
      public boolean hasBomRef() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
       * </pre>
       *
       * <code>optional string bom_ref = 3;</code>
       * @return The bomRef.
       */
      public java.lang.String getBomRef() {
        java.lang.Object ref = bomRef_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          bomRef_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
       * </pre>
       *
       * <code>optional string bom_ref = 3;</code>
       * @return The bytes for bomRef.
       */
      public com.google.protobuf.ByteString
          getBomRefBytes() {
        java.lang.Object ref = bomRef_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          bomRef_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
       * </pre>
       *
       * <code>optional string bom_ref = 3;</code>
       * @param value The bomRef to set.
       * @return This builder for chaining.
       */
      public Builder setBomRef(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        bomRef_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
       * </pre>
       *
       * <code>optional string bom_ref = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearBomRef() {
        bomRef_ = getDefaultInstance().getBomRef();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
       * </pre>
       *
       * <code>optional string bom_ref = 3;</code>
       * @param value The bytes for bomRef to set.
       * @return This builder for chaining.
       */
      public Builder setBomRefBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        bomRef_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private cyclonedx.v1_3.Bom13.OrganizationalEntity supplier_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.OrganizationalEntity, cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder, cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder> supplierBuilder_;
      /**
       * <pre>
       * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
       * @return Whether the supplier field is set.
       */
      public boolean hasSupplier() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
       * @return The supplier.
       */
      public cyclonedx.v1_3.Bom13.OrganizationalEntity getSupplier() {
        if (supplierBuilder_ == null) {
          return supplier_ == null ? cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : supplier_;
        } else {
          return supplierBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
       */
      public Builder setSupplier(cyclonedx.v1_3.Bom13.OrganizationalEntity value) {
        if (supplierBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          supplier_ = value;
        } else {
          supplierBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
       */
      public Builder setSupplier(
          cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder builderForValue) {
        if (supplierBuilder_ == null) {
          supplier_ = builderForValue.build();
        } else {
          supplierBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
       */
      public Builder mergeSupplier(cyclonedx.v1_3.Bom13.OrganizationalEntity value) {
        if (supplierBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            supplier_ != null &&
            supplier_ != cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance()) {
            getSupplierBuilder().mergeFrom(value);
          } else {
            supplier_ = value;
          }
        } else {
          supplierBuilder_.mergeFrom(value);
        }
        if (supplier_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
       */
      public Builder clearSupplier() {
        bitField0_ = (bitField0_ & ~0x00000008);
        supplier_ = null;
        if (supplierBuilder_ != null) {
          supplierBuilder_.dispose();
          supplierBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder getSupplierBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getSupplierFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder getSupplierOrBuilder() {
        if (supplierBuilder_ != null) {
          return supplierBuilder_.getMessageOrBuilder();
        } else {
          return supplier_ == null ?
              cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : supplier_;
        }
      }
      /**
       * <pre>
       * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.OrganizationalEntity, cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder, cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder> 
          getSupplierFieldBuilder() {
        if (supplierBuilder_ == null) {
          supplierBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.OrganizationalEntity, cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder, cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder>(
                  getSupplier(),
                  getParentForChildren(),
                  isClean());
          supplier_ = null;
        }
        return supplierBuilder_;
      }

      private java.lang.Object author_ = "";
      /**
       * <pre>
       * The person(s) or organization(s) that authored the component
       * </pre>
       *
       * <code>optional string author = 5;</code>
       * @return Whether the author field is set.
       */
      public boolean hasAuthor() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * The person(s) or organization(s) that authored the component
       * </pre>
       *
       * <code>optional string author = 5;</code>
       * @return The author.
       */
      public java.lang.String getAuthor() {
        java.lang.Object ref = author_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          author_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The person(s) or organization(s) that authored the component
       * </pre>
       *
       * <code>optional string author = 5;</code>
       * @return The bytes for author.
       */
      public com.google.protobuf.ByteString
          getAuthorBytes() {
        java.lang.Object ref = author_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          author_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The person(s) or organization(s) that authored the component
       * </pre>
       *
       * <code>optional string author = 5;</code>
       * @param value The author to set.
       * @return This builder for chaining.
       */
      public Builder setAuthor(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        author_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The person(s) or organization(s) that authored the component
       * </pre>
       *
       * <code>optional string author = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearAuthor() {
        author_ = getDefaultInstance().getAuthor();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The person(s) or organization(s) that authored the component
       * </pre>
       *
       * <code>optional string author = 5;</code>
       * @param value The bytes for author to set.
       * @return This builder for chaining.
       */
      public Builder setAuthorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        author_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }

      private java.lang.Object publisher_ = "";
      /**
       * <pre>
       * The person(s) or organization(s) that published the component
       * </pre>
       *
       * <code>optional string publisher = 6;</code>
       * @return Whether the publisher field is set.
       */
      public boolean hasPublisher() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * The person(s) or organization(s) that published the component
       * </pre>
       *
       * <code>optional string publisher = 6;</code>
       * @return The publisher.
       */
      public java.lang.String getPublisher() {
        java.lang.Object ref = publisher_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          publisher_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The person(s) or organization(s) that published the component
       * </pre>
       *
       * <code>optional string publisher = 6;</code>
       * @return The bytes for publisher.
       */
      public com.google.protobuf.ByteString
          getPublisherBytes() {
        java.lang.Object ref = publisher_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          publisher_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The person(s) or organization(s) that published the component
       * </pre>
       *
       * <code>optional string publisher = 6;</code>
       * @param value The publisher to set.
       * @return This builder for chaining.
       */
      public Builder setPublisher(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        publisher_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The person(s) or organization(s) that published the component
       * </pre>
       *
       * <code>optional string publisher = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearPublisher() {
        publisher_ = getDefaultInstance().getPublisher();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The person(s) or organization(s) that published the component
       * </pre>
       *
       * <code>optional string publisher = 6;</code>
       * @param value The bytes for publisher to set.
       * @return This builder for chaining.
       */
      public Builder setPublisherBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        publisher_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }

      private java.lang.Object group_ = "";
      /**
       * <pre>
       * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
       * </pre>
       *
       * <code>optional string group = 7;</code>
       * @return Whether the group field is set.
       */
      public boolean hasGroup() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
       * </pre>
       *
       * <code>optional string group = 7;</code>
       * @return The group.
       */
      public java.lang.String getGroup() {
        java.lang.Object ref = group_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          group_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
       * </pre>
       *
       * <code>optional string group = 7;</code>
       * @return The bytes for group.
       */
      public com.google.protobuf.ByteString
          getGroupBytes() {
        java.lang.Object ref = group_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          group_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
       * </pre>
       *
       * <code>optional string group = 7;</code>
       * @param value The group to set.
       * @return This builder for chaining.
       */
      public Builder setGroup(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        group_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
       * </pre>
       *
       * <code>optional string group = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearGroup() {
        group_ = getDefaultInstance().getGroup();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
       * </pre>
       *
       * <code>optional string group = 7;</code>
       * @param value The bytes for group to set.
       * @return This builder for chaining.
       */
      public Builder setGroupBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        group_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
       * </pre>
       *
       * <code>string name = 8;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
       * </pre>
       *
       * <code>string name = 8;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
       * </pre>
       *
       * <code>string name = 8;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
       * </pre>
       *
       * <code>string name = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
       * </pre>
       *
       * <code>string name = 8;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }

      private java.lang.Object version_ = "";
      /**
       * <pre>
       * The component version. The version should ideally comply with semantic versioning but is not enforced.
       * </pre>
       *
       * <code>string version = 9;</code>
       * @return The version.
       */
      public java.lang.String getVersion() {
        java.lang.Object ref = version_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          version_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The component version. The version should ideally comply with semantic versioning but is not enforced.
       * </pre>
       *
       * <code>string version = 9;</code>
       * @return The bytes for version.
       */
      public com.google.protobuf.ByteString
          getVersionBytes() {
        java.lang.Object ref = version_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          version_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The component version. The version should ideally comply with semantic versioning but is not enforced.
       * </pre>
       *
       * <code>string version = 9;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        version_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The component version. The version should ideally comply with semantic versioning but is not enforced.
       * </pre>
       *
       * <code>string version = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        version_ = getDefaultInstance().getVersion();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The component version. The version should ideally comply with semantic versioning but is not enforced.
       * </pre>
       *
       * <code>string version = 9;</code>
       * @param value The bytes for version to set.
       * @return This builder for chaining.
       */
      public Builder setVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        version_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }

      private java.lang.Object description_ = "";
      /**
       * <pre>
       * Specifies a description for the component
       * </pre>
       *
       * <code>optional string description = 10;</code>
       * @return Whether the description field is set.
       */
      public boolean hasDescription() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * Specifies a description for the component
       * </pre>
       *
       * <code>optional string description = 10;</code>
       * @return The description.
       */
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          description_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies a description for the component
       * </pre>
       *
       * <code>optional string description = 10;</code>
       * @return The bytes for description.
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies a description for the component
       * </pre>
       *
       * <code>optional string description = 10;</code>
       * @param value The description to set.
       * @return This builder for chaining.
       */
      public Builder setDescription(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        description_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies a description for the component
       * </pre>
       *
       * <code>optional string description = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearDescription() {
        description_ = getDefaultInstance().getDescription();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies a description for the component
       * </pre>
       *
       * <code>optional string description = 10;</code>
       * @param value The bytes for description to set.
       * @return This builder for chaining.
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        description_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }

      private int scope_ = 0;
      /**
       * <pre>
       * Specifies the scope of the component. If scope is not specified, 'runtime' scope should be assumed by the consumer of the BOM
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Scope scope = 11;</code>
       * @return Whether the scope field is set.
       */
      @java.lang.Override public boolean hasScope() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * Specifies the scope of the component. If scope is not specified, 'runtime' scope should be assumed by the consumer of the BOM
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Scope scope = 11;</code>
       * @return The enum numeric value on the wire for scope.
       */
      @java.lang.Override public int getScopeValue() {
        return scope_;
      }
      /**
       * <pre>
       * Specifies the scope of the component. If scope is not specified, 'runtime' scope should be assumed by the consumer of the BOM
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Scope scope = 11;</code>
       * @param value The enum numeric value on the wire for scope to set.
       * @return This builder for chaining.
       */
      public Builder setScopeValue(int value) {
        scope_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the scope of the component. If scope is not specified, 'runtime' scope should be assumed by the consumer of the BOM
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Scope scope = 11;</code>
       * @return The scope.
       */
      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Scope getScope() {
        cyclonedx.v1_3.Bom13.Scope result = cyclonedx.v1_3.Bom13.Scope.forNumber(scope_);
        return result == null ? cyclonedx.v1_3.Bom13.Scope.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Specifies the scope of the component. If scope is not specified, 'runtime' scope should be assumed by the consumer of the BOM
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Scope scope = 11;</code>
       * @param value The scope to set.
       * @return This builder for chaining.
       */
      public Builder setScope(cyclonedx.v1_3.Bom13.Scope value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        scope_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the scope of the component. If scope is not specified, 'runtime' scope should be assumed by the consumer of the BOM
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Scope scope = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearScope() {
        bitField0_ = (bitField0_ & ~0x00000400);
        scope_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Hash> hashes_ =
        java.util.Collections.emptyList();
      private void ensureHashesIsMutable() {
        if (!((bitField0_ & 0x00000800) != 0)) {
          hashes_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Hash>(hashes_);
          bitField0_ |= 0x00000800;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Hash, cyclonedx.v1_3.Bom13.Hash.Builder, cyclonedx.v1_3.Bom13.HashOrBuilder> hashesBuilder_;

      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Hash> getHashesList() {
        if (hashesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(hashes_);
        } else {
          return hashesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public int getHashesCount() {
        if (hashesBuilder_ == null) {
          return hashes_.size();
        } else {
          return hashesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public cyclonedx.v1_3.Bom13.Hash getHashes(int index) {
        if (hashesBuilder_ == null) {
          return hashes_.get(index);
        } else {
          return hashesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public Builder setHashes(
          int index, cyclonedx.v1_3.Bom13.Hash value) {
        if (hashesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHashesIsMutable();
          hashes_.set(index, value);
          onChanged();
        } else {
          hashesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public Builder setHashes(
          int index, cyclonedx.v1_3.Bom13.Hash.Builder builderForValue) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          hashes_.set(index, builderForValue.build());
          onChanged();
        } else {
          hashesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public Builder addHashes(cyclonedx.v1_3.Bom13.Hash value) {
        if (hashesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHashesIsMutable();
          hashes_.add(value);
          onChanged();
        } else {
          hashesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public Builder addHashes(
          int index, cyclonedx.v1_3.Bom13.Hash value) {
        if (hashesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHashesIsMutable();
          hashes_.add(index, value);
          onChanged();
        } else {
          hashesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public Builder addHashes(
          cyclonedx.v1_3.Bom13.Hash.Builder builderForValue) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          hashes_.add(builderForValue.build());
          onChanged();
        } else {
          hashesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public Builder addHashes(
          int index, cyclonedx.v1_3.Bom13.Hash.Builder builderForValue) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          hashes_.add(index, builderForValue.build());
          onChanged();
        } else {
          hashesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public Builder addAllHashes(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Hash> values) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, hashes_);
          onChanged();
        } else {
          hashesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public Builder clearHashes() {
        if (hashesBuilder_ == null) {
          hashes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
        } else {
          hashesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public Builder removeHashes(int index) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          hashes_.remove(index);
          onChanged();
        } else {
          hashesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public cyclonedx.v1_3.Bom13.Hash.Builder getHashesBuilder(
          int index) {
        return getHashesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public cyclonedx.v1_3.Bom13.HashOrBuilder getHashesOrBuilder(
          int index) {
        if (hashesBuilder_ == null) {
          return hashes_.get(index);  } else {
          return hashesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.HashOrBuilder> 
           getHashesOrBuilderList() {
        if (hashesBuilder_ != null) {
          return hashesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(hashes_);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public cyclonedx.v1_3.Bom13.Hash.Builder addHashesBuilder() {
        return getHashesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Hash.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public cyclonedx.v1_3.Bom13.Hash.Builder addHashesBuilder(
          int index) {
        return getHashesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Hash.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 12;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Hash.Builder> 
           getHashesBuilderList() {
        return getHashesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Hash, cyclonedx.v1_3.Bom13.Hash.Builder, cyclonedx.v1_3.Bom13.HashOrBuilder> 
          getHashesFieldBuilder() {
        if (hashesBuilder_ == null) {
          hashesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Hash, cyclonedx.v1_3.Bom13.Hash.Builder, cyclonedx.v1_3.Bom13.HashOrBuilder>(
                  hashes_,
                  ((bitField0_ & 0x00000800) != 0),
                  getParentForChildren(),
                  isClean());
          hashes_ = null;
        }
        return hashesBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> licenses_ =
        java.util.Collections.emptyList();
      private void ensureLicensesIsMutable() {
        if (!((bitField0_ & 0x00001000) != 0)) {
          licenses_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.LicenseChoice>(licenses_);
          bitField0_ |= 0x00001000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.LicenseChoice, cyclonedx.v1_3.Bom13.LicenseChoice.Builder, cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> licensesBuilder_;

      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> getLicensesList() {
        if (licensesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(licenses_);
        } else {
          return licensesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public int getLicensesCount() {
        if (licensesBuilder_ == null) {
          return licenses_.size();
        } else {
          return licensesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoice getLicenses(int index) {
        if (licensesBuilder_ == null) {
          return licenses_.get(index);
        } else {
          return licensesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public Builder setLicenses(
          int index, cyclonedx.v1_3.Bom13.LicenseChoice value) {
        if (licensesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLicensesIsMutable();
          licenses_.set(index, value);
          onChanged();
        } else {
          licensesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public Builder setLicenses(
          int index, cyclonedx.v1_3.Bom13.LicenseChoice.Builder builderForValue) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          licenses_.set(index, builderForValue.build());
          onChanged();
        } else {
          licensesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public Builder addLicenses(cyclonedx.v1_3.Bom13.LicenseChoice value) {
        if (licensesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLicensesIsMutable();
          licenses_.add(value);
          onChanged();
        } else {
          licensesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public Builder addLicenses(
          int index, cyclonedx.v1_3.Bom13.LicenseChoice value) {
        if (licensesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLicensesIsMutable();
          licenses_.add(index, value);
          onChanged();
        } else {
          licensesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public Builder addLicenses(
          cyclonedx.v1_3.Bom13.LicenseChoice.Builder builderForValue) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          licenses_.add(builderForValue.build());
          onChanged();
        } else {
          licensesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public Builder addLicenses(
          int index, cyclonedx.v1_3.Bom13.LicenseChoice.Builder builderForValue) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          licenses_.add(index, builderForValue.build());
          onChanged();
        } else {
          licensesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public Builder addAllLicenses(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.LicenseChoice> values) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, licenses_);
          onChanged();
        } else {
          licensesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public Builder clearLicenses() {
        if (licensesBuilder_ == null) {
          licenses_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
          onChanged();
        } else {
          licensesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public Builder removeLicenses(int index) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          licenses_.remove(index);
          onChanged();
        } else {
          licensesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoice.Builder getLicensesBuilder(
          int index) {
        return getLicensesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder getLicensesOrBuilder(
          int index) {
        if (licensesBuilder_ == null) {
          return licenses_.get(index);  } else {
          return licensesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> 
           getLicensesOrBuilderList() {
        if (licensesBuilder_ != null) {
          return licensesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(licenses_);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoice.Builder addLicensesBuilder() {
        return getLicensesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.LicenseChoice.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoice.Builder addLicensesBuilder(
          int index) {
        return getLicensesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.LicenseChoice.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 13;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice.Builder> 
           getLicensesBuilderList() {
        return getLicensesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.LicenseChoice, cyclonedx.v1_3.Bom13.LicenseChoice.Builder, cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> 
          getLicensesFieldBuilder() {
        if (licensesBuilder_ == null) {
          licensesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.LicenseChoice, cyclonedx.v1_3.Bom13.LicenseChoice.Builder, cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder>(
                  licenses_,
                  ((bitField0_ & 0x00001000) != 0),
                  getParentForChildren(),
                  isClean());
          licenses_ = null;
        }
        return licensesBuilder_;
      }

      private java.lang.Object copyright_ = "";
      /**
       * <pre>
       * An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
       * </pre>
       *
       * <code>optional string copyright = 14;</code>
       * @return Whether the copyright field is set.
       */
      public boolean hasCopyright() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <pre>
       * An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
       * </pre>
       *
       * <code>optional string copyright = 14;</code>
       * @return The copyright.
       */
      public java.lang.String getCopyright() {
        java.lang.Object ref = copyright_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          copyright_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
       * </pre>
       *
       * <code>optional string copyright = 14;</code>
       * @return The bytes for copyright.
       */
      public com.google.protobuf.ByteString
          getCopyrightBytes() {
        java.lang.Object ref = copyright_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          copyright_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
       * </pre>
       *
       * <code>optional string copyright = 14;</code>
       * @param value The copyright to set.
       * @return This builder for chaining.
       */
      public Builder setCopyright(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        copyright_ = value;
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
       * </pre>
       *
       * <code>optional string copyright = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearCopyright() {
        copyright_ = getDefaultInstance().getCopyright();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
       * </pre>
       *
       * <code>optional string copyright = 14;</code>
       * @param value The bytes for copyright to set.
       * @return This builder for chaining.
       */
      public Builder setCopyrightBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        copyright_ = value;
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }

      private java.lang.Object cpe_ = "";
      /**
       * <pre>
       * DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
       * </pre>
       *
       * <code>optional string cpe = 15;</code>
       * @return Whether the cpe field is set.
       */
      public boolean hasCpe() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <pre>
       * DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
       * </pre>
       *
       * <code>optional string cpe = 15;</code>
       * @return The cpe.
       */
      public java.lang.String getCpe() {
        java.lang.Object ref = cpe_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          cpe_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
       * </pre>
       *
       * <code>optional string cpe = 15;</code>
       * @return The bytes for cpe.
       */
      public com.google.protobuf.ByteString
          getCpeBytes() {
        java.lang.Object ref = cpe_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          cpe_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
       * </pre>
       *
       * <code>optional string cpe = 15;</code>
       * @param value The cpe to set.
       * @return This builder for chaining.
       */
      public Builder setCpe(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        cpe_ = value;
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
       * </pre>
       *
       * <code>optional string cpe = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearCpe() {
        cpe_ = getDefaultInstance().getCpe();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
       * </pre>
       *
       * <code>optional string cpe = 15;</code>
       * @param value The bytes for cpe to set.
       * @return This builder for chaining.
       */
      public Builder setCpeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        cpe_ = value;
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }

      private java.lang.Object purl_ = "";
      /**
       * <pre>
       * Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
       * </pre>
       *
       * <code>optional string purl = 16;</code>
       * @return Whether the purl field is set.
       */
      public boolean hasPurl() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <pre>
       * Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
       * </pre>
       *
       * <code>optional string purl = 16;</code>
       * @return The purl.
       */
      public java.lang.String getPurl() {
        java.lang.Object ref = purl_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          purl_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
       * </pre>
       *
       * <code>optional string purl = 16;</code>
       * @return The bytes for purl.
       */
      public com.google.protobuf.ByteString
          getPurlBytes() {
        java.lang.Object ref = purl_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          purl_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
       * </pre>
       *
       * <code>optional string purl = 16;</code>
       * @param value The purl to set.
       * @return This builder for chaining.
       */
      public Builder setPurl(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        purl_ = value;
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
       * </pre>
       *
       * <code>optional string purl = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearPurl() {
        purl_ = getDefaultInstance().getPurl();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
       * </pre>
       *
       * <code>optional string purl = 16;</code>
       * @param value The bytes for purl to set.
       * @return This builder for chaining.
       */
      public Builder setPurlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        purl_ = value;
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }

      private cyclonedx.v1_3.Bom13.Swid swid_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.Swid, cyclonedx.v1_3.Bom13.Swid.Builder, cyclonedx.v1_3.Bom13.SwidOrBuilder> swidBuilder_;
      /**
       * <pre>
       * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
       * @return Whether the swid field is set.
       */
      public boolean hasSwid() {
        return ((bitField0_ & 0x00010000) != 0);
      }
      /**
       * <pre>
       * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
       * @return The swid.
       */
      public cyclonedx.v1_3.Bom13.Swid getSwid() {
        if (swidBuilder_ == null) {
          return swid_ == null ? cyclonedx.v1_3.Bom13.Swid.getDefaultInstance() : swid_;
        } else {
          return swidBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
       */
      public Builder setSwid(cyclonedx.v1_3.Bom13.Swid value) {
        if (swidBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          swid_ = value;
        } else {
          swidBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
       */
      public Builder setSwid(
          cyclonedx.v1_3.Bom13.Swid.Builder builderForValue) {
        if (swidBuilder_ == null) {
          swid_ = builderForValue.build();
        } else {
          swidBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
       */
      public Builder mergeSwid(cyclonedx.v1_3.Bom13.Swid value) {
        if (swidBuilder_ == null) {
          if (((bitField0_ & 0x00010000) != 0) &&
            swid_ != null &&
            swid_ != cyclonedx.v1_3.Bom13.Swid.getDefaultInstance()) {
            getSwidBuilder().mergeFrom(value);
          } else {
            swid_ = value;
          }
        } else {
          swidBuilder_.mergeFrom(value);
        }
        if (swid_ != null) {
          bitField0_ |= 0x00010000;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
       */
      public Builder clearSwid() {
        bitField0_ = (bitField0_ & ~0x00010000);
        swid_ = null;
        if (swidBuilder_ != null) {
          swidBuilder_.dispose();
          swidBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
       */
      public cyclonedx.v1_3.Bom13.Swid.Builder getSwidBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getSwidFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
       */
      public cyclonedx.v1_3.Bom13.SwidOrBuilder getSwidOrBuilder() {
        if (swidBuilder_ != null) {
          return swidBuilder_.getMessageOrBuilder();
        } else {
          return swid_ == null ?
              cyclonedx.v1_3.Bom13.Swid.getDefaultInstance() : swid_;
        }
      }
      /**
       * <pre>
       * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Swid swid = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.Swid, cyclonedx.v1_3.Bom13.Swid.Builder, cyclonedx.v1_3.Bom13.SwidOrBuilder> 
          getSwidFieldBuilder() {
        if (swidBuilder_ == null) {
          swidBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.Swid, cyclonedx.v1_3.Bom13.Swid.Builder, cyclonedx.v1_3.Bom13.SwidOrBuilder>(
                  getSwid(),
                  getParentForChildren(),
                  isClean());
          swid_ = null;
        }
        return swidBuilder_;
      }

      private boolean modified_ ;
      /**
       * <pre>
       * DEPRECATED - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating is the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
       * </pre>
       *
       * <code>optional bool modified = 18;</code>
       * @return Whether the modified field is set.
       */
      @java.lang.Override
      public boolean hasModified() {
        return ((bitField0_ & 0x00020000) != 0);
      }
      /**
       * <pre>
       * DEPRECATED - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating is the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
       * </pre>
       *
       * <code>optional bool modified = 18;</code>
       * @return The modified.
       */
      @java.lang.Override
      public boolean getModified() {
        return modified_;
      }
      /**
       * <pre>
       * DEPRECATED - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating is the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
       * </pre>
       *
       * <code>optional bool modified = 18;</code>
       * @param value The modified to set.
       * @return This builder for chaining.
       */
      public Builder setModified(boolean value) {

        modified_ = value;
        bitField0_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * DEPRECATED - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating is the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
       * </pre>
       *
       * <code>optional bool modified = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearModified() {
        bitField0_ = (bitField0_ & ~0x00020000);
        modified_ = false;
        onChanged();
        return this;
      }

      private cyclonedx.v1_3.Bom13.Pedigree pedigree_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.Pedigree, cyclonedx.v1_3.Bom13.Pedigree.Builder, cyclonedx.v1_3.Bom13.PedigreeOrBuilder> pedigreeBuilder_;
      /**
       * <pre>
       * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
       * @return Whether the pedigree field is set.
       */
      public boolean hasPedigree() {
        return ((bitField0_ & 0x00040000) != 0);
      }
      /**
       * <pre>
       * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
       * @return The pedigree.
       */
      public cyclonedx.v1_3.Bom13.Pedigree getPedigree() {
        if (pedigreeBuilder_ == null) {
          return pedigree_ == null ? cyclonedx.v1_3.Bom13.Pedigree.getDefaultInstance() : pedigree_;
        } else {
          return pedigreeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
       */
      public Builder setPedigree(cyclonedx.v1_3.Bom13.Pedigree value) {
        if (pedigreeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pedigree_ = value;
        } else {
          pedigreeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
       */
      public Builder setPedigree(
          cyclonedx.v1_3.Bom13.Pedigree.Builder builderForValue) {
        if (pedigreeBuilder_ == null) {
          pedigree_ = builderForValue.build();
        } else {
          pedigreeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
       */
      public Builder mergePedigree(cyclonedx.v1_3.Bom13.Pedigree value) {
        if (pedigreeBuilder_ == null) {
          if (((bitField0_ & 0x00040000) != 0) &&
            pedigree_ != null &&
            pedigree_ != cyclonedx.v1_3.Bom13.Pedigree.getDefaultInstance()) {
            getPedigreeBuilder().mergeFrom(value);
          } else {
            pedigree_ = value;
          }
        } else {
          pedigreeBuilder_.mergeFrom(value);
        }
        if (pedigree_ != null) {
          bitField0_ |= 0x00040000;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
       */
      public Builder clearPedigree() {
        bitField0_ = (bitField0_ & ~0x00040000);
        pedigree_ = null;
        if (pedigreeBuilder_ != null) {
          pedigreeBuilder_.dispose();
          pedigreeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
       */
      public cyclonedx.v1_3.Bom13.Pedigree.Builder getPedigreeBuilder() {
        bitField0_ |= 0x00040000;
        onChanged();
        return getPedigreeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
       */
      public cyclonedx.v1_3.Bom13.PedigreeOrBuilder getPedigreeOrBuilder() {
        if (pedigreeBuilder_ != null) {
          return pedigreeBuilder_.getMessageOrBuilder();
        } else {
          return pedigree_ == null ?
              cyclonedx.v1_3.Bom13.Pedigree.getDefaultInstance() : pedigree_;
        }
      }
      /**
       * <pre>
       * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Pedigree pedigree = 19;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.Pedigree, cyclonedx.v1_3.Bom13.Pedigree.Builder, cyclonedx.v1_3.Bom13.PedigreeOrBuilder> 
          getPedigreeFieldBuilder() {
        if (pedigreeBuilder_ == null) {
          pedigreeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.Pedigree, cyclonedx.v1_3.Bom13.Pedigree.Builder, cyclonedx.v1_3.Bom13.PedigreeOrBuilder>(
                  getPedigree(),
                  getParentForChildren(),
                  isClean());
          pedigree_ = null;
        }
        return pedigreeBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> externalReferences_ =
        java.util.Collections.emptyList();
      private void ensureExternalReferencesIsMutable() {
        if (!((bitField0_ & 0x00080000) != 0)) {
          externalReferences_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.ExternalReference>(externalReferences_);
          bitField0_ |= 0x00080000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.ExternalReference, cyclonedx.v1_3.Bom13.ExternalReference.Builder, cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> externalReferencesBuilder_;

      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> getExternalReferencesList() {
        if (externalReferencesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(externalReferences_);
        } else {
          return externalReferencesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public int getExternalReferencesCount() {
        if (externalReferencesBuilder_ == null) {
          return externalReferences_.size();
        } else {
          return externalReferencesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReference getExternalReferences(int index) {
        if (externalReferencesBuilder_ == null) {
          return externalReferences_.get(index);
        } else {
          return externalReferencesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public Builder setExternalReferences(
          int index, cyclonedx.v1_3.Bom13.ExternalReference value) {
        if (externalReferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExternalReferencesIsMutable();
          externalReferences_.set(index, value);
          onChanged();
        } else {
          externalReferencesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public Builder setExternalReferences(
          int index, cyclonedx.v1_3.Bom13.ExternalReference.Builder builderForValue) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          externalReferences_.set(index, builderForValue.build());
          onChanged();
        } else {
          externalReferencesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public Builder addExternalReferences(cyclonedx.v1_3.Bom13.ExternalReference value) {
        if (externalReferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExternalReferencesIsMutable();
          externalReferences_.add(value);
          onChanged();
        } else {
          externalReferencesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public Builder addExternalReferences(
          int index, cyclonedx.v1_3.Bom13.ExternalReference value) {
        if (externalReferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExternalReferencesIsMutable();
          externalReferences_.add(index, value);
          onChanged();
        } else {
          externalReferencesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public Builder addExternalReferences(
          cyclonedx.v1_3.Bom13.ExternalReference.Builder builderForValue) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          externalReferences_.add(builderForValue.build());
          onChanged();
        } else {
          externalReferencesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public Builder addExternalReferences(
          int index, cyclonedx.v1_3.Bom13.ExternalReference.Builder builderForValue) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          externalReferences_.add(index, builderForValue.build());
          onChanged();
        } else {
          externalReferencesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public Builder addAllExternalReferences(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.ExternalReference> values) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, externalReferences_);
          onChanged();
        } else {
          externalReferencesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public Builder clearExternalReferences() {
        if (externalReferencesBuilder_ == null) {
          externalReferences_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00080000);
          onChanged();
        } else {
          externalReferencesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public Builder removeExternalReferences(int index) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          externalReferences_.remove(index);
          onChanged();
        } else {
          externalReferencesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReference.Builder getExternalReferencesBuilder(
          int index) {
        return getExternalReferencesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder getExternalReferencesOrBuilder(
          int index) {
        if (externalReferencesBuilder_ == null) {
          return externalReferences_.get(index);  } else {
          return externalReferencesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> 
           getExternalReferencesOrBuilderList() {
        if (externalReferencesBuilder_ != null) {
          return externalReferencesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(externalReferences_);
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReference.Builder addExternalReferencesBuilder() {
        return getExternalReferencesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.ExternalReference.getDefaultInstance());
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReference.Builder addExternalReferencesBuilder(
          int index) {
        return getExternalReferencesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.ExternalReference.getDefaultInstance());
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the component or to the project the component describes.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 20;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.ExternalReference.Builder> 
           getExternalReferencesBuilderList() {
        return getExternalReferencesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.ExternalReference, cyclonedx.v1_3.Bom13.ExternalReference.Builder, cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> 
          getExternalReferencesFieldBuilder() {
        if (externalReferencesBuilder_ == null) {
          externalReferencesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.ExternalReference, cyclonedx.v1_3.Bom13.ExternalReference.Builder, cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder>(
                  externalReferences_,
                  ((bitField0_ & 0x00080000) != 0),
                  getParentForChildren(),
                  isClean());
          externalReferences_ = null;
        }
        return externalReferencesBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Component> components_ =
        java.util.Collections.emptyList();
      private void ensureComponentsIsMutable() {
        if (!((bitField0_ & 0x00100000) != 0)) {
          components_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Component>(components_);
          bitField0_ |= 0x00100000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder> componentsBuilder_;

      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Component> getComponentsList() {
        if (componentsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(components_);
        } else {
          return componentsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public int getComponentsCount() {
        if (componentsBuilder_ == null) {
          return components_.size();
        } else {
          return componentsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public cyclonedx.v1_3.Bom13.Component getComponents(int index) {
        if (componentsBuilder_ == null) {
          return components_.get(index);
        } else {
          return componentsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public Builder setComponents(
          int index, cyclonedx.v1_3.Bom13.Component value) {
        if (componentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureComponentsIsMutable();
          components_.set(index, value);
          onChanged();
        } else {
          componentsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public Builder setComponents(
          int index, cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (componentsBuilder_ == null) {
          ensureComponentsIsMutable();
          components_.set(index, builderForValue.build());
          onChanged();
        } else {
          componentsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public Builder addComponents(cyclonedx.v1_3.Bom13.Component value) {
        if (componentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureComponentsIsMutable();
          components_.add(value);
          onChanged();
        } else {
          componentsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public Builder addComponents(
          int index, cyclonedx.v1_3.Bom13.Component value) {
        if (componentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureComponentsIsMutable();
          components_.add(index, value);
          onChanged();
        } else {
          componentsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public Builder addComponents(
          cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (componentsBuilder_ == null) {
          ensureComponentsIsMutable();
          components_.add(builderForValue.build());
          onChanged();
        } else {
          componentsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public Builder addComponents(
          int index, cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (componentsBuilder_ == null) {
          ensureComponentsIsMutable();
          components_.add(index, builderForValue.build());
          onChanged();
        } else {
          componentsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public Builder addAllComponents(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Component> values) {
        if (componentsBuilder_ == null) {
          ensureComponentsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, components_);
          onChanged();
        } else {
          componentsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public Builder clearComponents() {
        if (componentsBuilder_ == null) {
          components_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00100000);
          onChanged();
        } else {
          componentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public Builder removeComponents(int index) {
        if (componentsBuilder_ == null) {
          ensureComponentsIsMutable();
          components_.remove(index);
          onChanged();
        } else {
          componentsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder getComponentsBuilder(
          int index) {
        return getComponentsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public cyclonedx.v1_3.Bom13.ComponentOrBuilder getComponentsOrBuilder(
          int index) {
        if (componentsBuilder_ == null) {
          return components_.get(index);  } else {
          return componentsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
           getComponentsOrBuilderList() {
        if (componentsBuilder_ != null) {
          return componentsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(components_);
        }
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder addComponentsBuilder() {
        return getComponentsFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Component.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder addComponentsBuilder(
          int index) {
        return getComponentsFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Component.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component components = 21;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Component.Builder> 
           getComponentsBuilderList() {
        return getComponentsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
          getComponentsFieldBuilder() {
        if (componentsBuilder_ == null) {
          componentsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder>(
                  components_,
                  ((bitField0_ & 0x00100000) != 0),
                  getParentForChildren(),
                  isClean());
          components_ = null;
        }
        return componentsBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Property> properties_ =
        java.util.Collections.emptyList();
      private void ensurePropertiesIsMutable() {
        if (!((bitField0_ & 0x00200000) != 0)) {
          properties_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Property>(properties_);
          bitField0_ |= 0x00200000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Property, cyclonedx.v1_3.Bom13.Property.Builder, cyclonedx.v1_3.Bom13.PropertyOrBuilder> propertiesBuilder_;

      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Property> getPropertiesList() {
        if (propertiesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(properties_);
        } else {
          return propertiesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public int getPropertiesCount() {
        if (propertiesBuilder_ == null) {
          return properties_.size();
        } else {
          return propertiesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public cyclonedx.v1_3.Bom13.Property getProperties(int index) {
        if (propertiesBuilder_ == null) {
          return properties_.get(index);
        } else {
          return propertiesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public Builder setProperties(
          int index, cyclonedx.v1_3.Bom13.Property value) {
        if (propertiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertiesIsMutable();
          properties_.set(index, value);
          onChanged();
        } else {
          propertiesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public Builder setProperties(
          int index, cyclonedx.v1_3.Bom13.Property.Builder builderForValue) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          properties_.set(index, builderForValue.build());
          onChanged();
        } else {
          propertiesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public Builder addProperties(cyclonedx.v1_3.Bom13.Property value) {
        if (propertiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertiesIsMutable();
          properties_.add(value);
          onChanged();
        } else {
          propertiesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public Builder addProperties(
          int index, cyclonedx.v1_3.Bom13.Property value) {
        if (propertiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertiesIsMutable();
          properties_.add(index, value);
          onChanged();
        } else {
          propertiesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public Builder addProperties(
          cyclonedx.v1_3.Bom13.Property.Builder builderForValue) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          properties_.add(builderForValue.build());
          onChanged();
        } else {
          propertiesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public Builder addProperties(
          int index, cyclonedx.v1_3.Bom13.Property.Builder builderForValue) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          properties_.add(index, builderForValue.build());
          onChanged();
        } else {
          propertiesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public Builder addAllProperties(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Property> values) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, properties_);
          onChanged();
        } else {
          propertiesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public Builder clearProperties() {
        if (propertiesBuilder_ == null) {
          properties_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00200000);
          onChanged();
        } else {
          propertiesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public Builder removeProperties(int index) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          properties_.remove(index);
          onChanged();
        } else {
          propertiesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public cyclonedx.v1_3.Bom13.Property.Builder getPropertiesBuilder(
          int index) {
        return getPropertiesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public cyclonedx.v1_3.Bom13.PropertyOrBuilder getPropertiesOrBuilder(
          int index) {
        if (propertiesBuilder_ == null) {
          return properties_.get(index);  } else {
          return propertiesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.PropertyOrBuilder> 
           getPropertiesOrBuilderList() {
        if (propertiesBuilder_ != null) {
          return propertiesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(properties_);
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public cyclonedx.v1_3.Bom13.Property.Builder addPropertiesBuilder() {
        return getPropertiesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Property.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public cyclonedx.v1_3.Bom13.Property.Builder addPropertiesBuilder(
          int index) {
        return getPropertiesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Property.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 22;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Property.Builder> 
           getPropertiesBuilderList() {
        return getPropertiesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Property, cyclonedx.v1_3.Bom13.Property.Builder, cyclonedx.v1_3.Bom13.PropertyOrBuilder> 
          getPropertiesFieldBuilder() {
        if (propertiesBuilder_ == null) {
          propertiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Property, cyclonedx.v1_3.Bom13.Property.Builder, cyclonedx.v1_3.Bom13.PropertyOrBuilder>(
                  properties_,
                  ((bitField0_ & 0x00200000) != 0),
                  getParentForChildren(),
                  isClean());
          properties_ = null;
        }
        return propertiesBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Evidence> evidence_ =
        java.util.Collections.emptyList();
      private void ensureEvidenceIsMutable() {
        if (!((bitField0_ & 0x00400000) != 0)) {
          evidence_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Evidence>(evidence_);
          bitField0_ |= 0x00400000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Evidence, cyclonedx.v1_3.Bom13.Evidence.Builder, cyclonedx.v1_3.Bom13.EvidenceOrBuilder> evidenceBuilder_;

      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Evidence> getEvidenceList() {
        if (evidenceBuilder_ == null) {
          return java.util.Collections.unmodifiableList(evidence_);
        } else {
          return evidenceBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public int getEvidenceCount() {
        if (evidenceBuilder_ == null) {
          return evidence_.size();
        } else {
          return evidenceBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public cyclonedx.v1_3.Bom13.Evidence getEvidence(int index) {
        if (evidenceBuilder_ == null) {
          return evidence_.get(index);
        } else {
          return evidenceBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public Builder setEvidence(
          int index, cyclonedx.v1_3.Bom13.Evidence value) {
        if (evidenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEvidenceIsMutable();
          evidence_.set(index, value);
          onChanged();
        } else {
          evidenceBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public Builder setEvidence(
          int index, cyclonedx.v1_3.Bom13.Evidence.Builder builderForValue) {
        if (evidenceBuilder_ == null) {
          ensureEvidenceIsMutable();
          evidence_.set(index, builderForValue.build());
          onChanged();
        } else {
          evidenceBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public Builder addEvidence(cyclonedx.v1_3.Bom13.Evidence value) {
        if (evidenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEvidenceIsMutable();
          evidence_.add(value);
          onChanged();
        } else {
          evidenceBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public Builder addEvidence(
          int index, cyclonedx.v1_3.Bom13.Evidence value) {
        if (evidenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEvidenceIsMutable();
          evidence_.add(index, value);
          onChanged();
        } else {
          evidenceBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public Builder addEvidence(
          cyclonedx.v1_3.Bom13.Evidence.Builder builderForValue) {
        if (evidenceBuilder_ == null) {
          ensureEvidenceIsMutable();
          evidence_.add(builderForValue.build());
          onChanged();
        } else {
          evidenceBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public Builder addEvidence(
          int index, cyclonedx.v1_3.Bom13.Evidence.Builder builderForValue) {
        if (evidenceBuilder_ == null) {
          ensureEvidenceIsMutable();
          evidence_.add(index, builderForValue.build());
          onChanged();
        } else {
          evidenceBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public Builder addAllEvidence(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Evidence> values) {
        if (evidenceBuilder_ == null) {
          ensureEvidenceIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, evidence_);
          onChanged();
        } else {
          evidenceBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public Builder clearEvidence() {
        if (evidenceBuilder_ == null) {
          evidence_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00400000);
          onChanged();
        } else {
          evidenceBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public Builder removeEvidence(int index) {
        if (evidenceBuilder_ == null) {
          ensureEvidenceIsMutable();
          evidence_.remove(index);
          onChanged();
        } else {
          evidenceBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public cyclonedx.v1_3.Bom13.Evidence.Builder getEvidenceBuilder(
          int index) {
        return getEvidenceFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public cyclonedx.v1_3.Bom13.EvidenceOrBuilder getEvidenceOrBuilder(
          int index) {
        if (evidenceBuilder_ == null) {
          return evidence_.get(index);  } else {
          return evidenceBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.EvidenceOrBuilder> 
           getEvidenceOrBuilderList() {
        if (evidenceBuilder_ != null) {
          return evidenceBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(evidence_);
        }
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public cyclonedx.v1_3.Bom13.Evidence.Builder addEvidenceBuilder() {
        return getEvidenceFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Evidence.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public cyclonedx.v1_3.Bom13.Evidence.Builder addEvidenceBuilder(
          int index) {
        return getEvidenceFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Evidence.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies optional license and copyright evidence
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Evidence evidence = 23;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Evidence.Builder> 
           getEvidenceBuilderList() {
        return getEvidenceFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Evidence, cyclonedx.v1_3.Bom13.Evidence.Builder, cyclonedx.v1_3.Bom13.EvidenceOrBuilder> 
          getEvidenceFieldBuilder() {
        if (evidenceBuilder_ == null) {
          evidenceBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Evidence, cyclonedx.v1_3.Bom13.Evidence.Builder, cyclonedx.v1_3.Bom13.EvidenceOrBuilder>(
                  evidence_,
                  ((bitField0_ & 0x00400000) != 0),
                  getParentForChildren(),
                  isClean());
          evidence_ = null;
        }
        return evidenceBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Component)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Component)
    private static final cyclonedx.v1_3.Bom13.Component DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Component();
    }

    public static cyclonedx.v1_3.Bom13.Component getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Component>
        PARSER = new com.google.protobuf.AbstractParser<Component>() {
      @java.lang.Override
      public Component parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Component> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Component> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Component getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DataClassificationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.DataClassification)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the flow direction of the data.
     * </pre>
     *
     * <code>.cyclonedx.v1_3.DataFlow flow = 1;</code>
     * @return The enum numeric value on the wire for flow.
     */
    int getFlowValue();
    /**
     * <pre>
     * Specifies the flow direction of the data.
     * </pre>
     *
     * <code>.cyclonedx.v1_3.DataFlow flow = 1;</code>
     * @return The flow.
     */
    cyclonedx.v1_3.Bom13.DataFlow getFlow();

    /**
     * <pre>
     * SimpleContent value of element
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The value.
     */
    java.lang.String getValue();
    /**
     * <pre>
     * SimpleContent value of element
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * <pre>
   * Specifies the data classification.
   * </pre>
   *
   * Protobuf type {@code cyclonedx.v1_3.DataClassification}
   */
  public static final class DataClassification extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.DataClassification)
      DataClassificationOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        DataClassification.class.getName());
    }
    // Use DataClassification.newBuilder() to construct.
    private DataClassification(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private DataClassification() {
      flow_ = 0;
      value_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_DataClassification_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_DataClassification_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.DataClassification.class, cyclonedx.v1_3.Bom13.DataClassification.Builder.class);
    }

    public static final int FLOW_FIELD_NUMBER = 1;
    private int flow_ = 0;
    /**
     * <pre>
     * Specifies the flow direction of the data.
     * </pre>
     *
     * <code>.cyclonedx.v1_3.DataFlow flow = 1;</code>
     * @return The enum numeric value on the wire for flow.
     */
    @java.lang.Override public int getFlowValue() {
      return flow_;
    }
    /**
     * <pre>
     * Specifies the flow direction of the data.
     * </pre>
     *
     * <code>.cyclonedx.v1_3.DataFlow flow = 1;</code>
     * @return The flow.
     */
    @java.lang.Override public cyclonedx.v1_3.Bom13.DataFlow getFlow() {
      cyclonedx.v1_3.Bom13.DataFlow result = cyclonedx.v1_3.Bom13.DataFlow.forNumber(flow_);
      return result == null ? cyclonedx.v1_3.Bom13.DataFlow.UNRECOGNIZED : result;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object value_ = "";
    /**
     * <pre>
     * SimpleContent value of element
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The value.
     */
    @java.lang.Override
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        value_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * SimpleContent value of element
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (flow_ != cyclonedx.v1_3.Bom13.DataFlow.DATA_FLOW_NULL.getNumber()) {
        output.writeEnum(1, flow_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(value_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (flow_ != cyclonedx.v1_3.Bom13.DataFlow.DATA_FLOW_NULL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, flow_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(value_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.DataClassification)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.DataClassification other = (cyclonedx.v1_3.Bom13.DataClassification) obj;

      if (flow_ != other.flow_) return false;
      if (!getValue()
          .equals(other.getValue())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + FLOW_FIELD_NUMBER;
      hash = (53 * hash) + flow_;
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.DataClassification parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.DataClassification parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.DataClassification parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.DataClassification parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.DataClassification parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.DataClassification parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.DataClassification parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.DataClassification parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.DataClassification parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.DataClassification parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.DataClassification parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.DataClassification parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.DataClassification prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies the data classification.
     * </pre>
     *
     * Protobuf type {@code cyclonedx.v1_3.DataClassification}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.DataClassification)
        cyclonedx.v1_3.Bom13.DataClassificationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_DataClassification_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_DataClassification_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.DataClassification.class, cyclonedx.v1_3.Bom13.DataClassification.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.DataClassification.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        flow_ = 0;
        value_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_DataClassification_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.DataClassification getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.DataClassification.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.DataClassification build() {
        cyclonedx.v1_3.Bom13.DataClassification result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.DataClassification buildPartial() {
        cyclonedx.v1_3.Bom13.DataClassification result = new cyclonedx.v1_3.Bom13.DataClassification(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.DataClassification result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.flow_ = flow_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.value_ = value_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.DataClassification) {
          return mergeFrom((cyclonedx.v1_3.Bom13.DataClassification)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.DataClassification other) {
        if (other == cyclonedx.v1_3.Bom13.DataClassification.getDefaultInstance()) return this;
        if (other.flow_ != 0) {
          setFlowValue(other.getFlowValue());
        }
        if (!other.getValue().isEmpty()) {
          value_ = other.value_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                flow_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                value_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int flow_ = 0;
      /**
       * <pre>
       * Specifies the flow direction of the data.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.DataFlow flow = 1;</code>
       * @return The enum numeric value on the wire for flow.
       */
      @java.lang.Override public int getFlowValue() {
        return flow_;
      }
      /**
       * <pre>
       * Specifies the flow direction of the data.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.DataFlow flow = 1;</code>
       * @param value The enum numeric value on the wire for flow to set.
       * @return This builder for chaining.
       */
      public Builder setFlowValue(int value) {
        flow_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the flow direction of the data.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.DataFlow flow = 1;</code>
       * @return The flow.
       */
      @java.lang.Override
      public cyclonedx.v1_3.Bom13.DataFlow getFlow() {
        cyclonedx.v1_3.Bom13.DataFlow result = cyclonedx.v1_3.Bom13.DataFlow.forNumber(flow_);
        return result == null ? cyclonedx.v1_3.Bom13.DataFlow.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Specifies the flow direction of the data.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.DataFlow flow = 1;</code>
       * @param value The flow to set.
       * @return This builder for chaining.
       */
      public Builder setFlow(cyclonedx.v1_3.Bom13.DataFlow value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        flow_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the flow direction of the data.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.DataFlow flow = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlow() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flow_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object value_ = "";
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return The value.
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return The bytes for value.
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 2;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        value_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        value_ = getDefaultInstance().getValue();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 2;</code>
       * @param value The bytes for value to set.
       * @return This builder for chaining.
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        value_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.DataClassification)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.DataClassification)
    private static final cyclonedx.v1_3.Bom13.DataClassification DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.DataClassification();
    }

    public static cyclonedx.v1_3.Bom13.DataClassification getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DataClassification>
        PARSER = new com.google.protobuf.AbstractParser<DataClassification>() {
      @java.lang.Override
      public DataClassification parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<DataClassification> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DataClassification> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.DataClassification getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DependencyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Dependency)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * References a component or service by the its bom-ref attribute
     * </pre>
     *
     * <code>string ref = 1;</code>
     * @return The ref.
     */
    java.lang.String getRef();
    /**
     * <pre>
     * References a component or service by the its bom-ref attribute
     * </pre>
     *
     * <code>string ref = 1;</code>
     * @return The bytes for ref.
     */
    com.google.protobuf.ByteString
        getRefBytes();

    /**
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Dependency> 
        getDependenciesList();
    /**
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
     */
    cyclonedx.v1_3.Bom13.Dependency getDependencies(int index);
    /**
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
     */
    int getDependenciesCount();
    /**
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.DependencyOrBuilder> 
        getDependenciesOrBuilderList();
    /**
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
     */
    cyclonedx.v1_3.Bom13.DependencyOrBuilder getDependenciesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.Dependency}
   */
  public static final class Dependency extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Dependency)
      DependencyOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Dependency.class.getName());
    }
    // Use Dependency.newBuilder() to construct.
    private Dependency(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Dependency() {
      ref_ = "";
      dependencies_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Dependency_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Dependency_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Dependency.class, cyclonedx.v1_3.Bom13.Dependency.Builder.class);
    }

    public static final int REF_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object ref_ = "";
    /**
     * <pre>
     * References a component or service by the its bom-ref attribute
     * </pre>
     *
     * <code>string ref = 1;</code>
     * @return The ref.
     */
    @java.lang.Override
    public java.lang.String getRef() {
      java.lang.Object ref = ref_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        ref_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * References a component or service by the its bom-ref attribute
     * </pre>
     *
     * <code>string ref = 1;</code>
     * @return The bytes for ref.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRefBytes() {
      java.lang.Object ref = ref_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ref_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEPENDENCIES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Dependency> dependencies_;
    /**
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Dependency> getDependenciesList() {
      return dependencies_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.DependencyOrBuilder> 
        getDependenciesOrBuilderList() {
      return dependencies_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
     */
    @java.lang.Override
    public int getDependenciesCount() {
      return dependencies_.size();
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Dependency getDependencies(int index) {
      return dependencies_.get(index);
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.DependencyOrBuilder getDependenciesOrBuilder(
        int index) {
      return dependencies_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(ref_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, ref_);
      }
      for (int i = 0; i < dependencies_.size(); i++) {
        output.writeMessage(2, dependencies_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(ref_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, ref_);
      }
      for (int i = 0; i < dependencies_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, dependencies_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Dependency)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Dependency other = (cyclonedx.v1_3.Bom13.Dependency) obj;

      if (!getRef()
          .equals(other.getRef())) return false;
      if (!getDependenciesList()
          .equals(other.getDependenciesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + REF_FIELD_NUMBER;
      hash = (53 * hash) + getRef().hashCode();
      if (getDependenciesCount() > 0) {
        hash = (37 * hash) + DEPENDENCIES_FIELD_NUMBER;
        hash = (53 * hash) + getDependenciesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Dependency parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Dependency parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Dependency parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Dependency parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Dependency parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Dependency parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Dependency parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Dependency parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Dependency parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Dependency parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Dependency parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Dependency parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Dependency prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.Dependency}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Dependency)
        cyclonedx.v1_3.Bom13.DependencyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Dependency_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Dependency_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Dependency.class, cyclonedx.v1_3.Bom13.Dependency.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Dependency.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        ref_ = "";
        if (dependenciesBuilder_ == null) {
          dependencies_ = java.util.Collections.emptyList();
        } else {
          dependencies_ = null;
          dependenciesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Dependency_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Dependency getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Dependency.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Dependency build() {
        cyclonedx.v1_3.Bom13.Dependency result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Dependency buildPartial() {
        cyclonedx.v1_3.Bom13.Dependency result = new cyclonedx.v1_3.Bom13.Dependency(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(cyclonedx.v1_3.Bom13.Dependency result) {
        if (dependenciesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            dependencies_ = java.util.Collections.unmodifiableList(dependencies_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.dependencies_ = dependencies_;
        } else {
          result.dependencies_ = dependenciesBuilder_.build();
        }
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Dependency result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.ref_ = ref_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Dependency) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Dependency)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Dependency other) {
        if (other == cyclonedx.v1_3.Bom13.Dependency.getDefaultInstance()) return this;
        if (!other.getRef().isEmpty()) {
          ref_ = other.ref_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (dependenciesBuilder_ == null) {
          if (!other.dependencies_.isEmpty()) {
            if (dependencies_.isEmpty()) {
              dependencies_ = other.dependencies_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureDependenciesIsMutable();
              dependencies_.addAll(other.dependencies_);
            }
            onChanged();
          }
        } else {
          if (!other.dependencies_.isEmpty()) {
            if (dependenciesBuilder_.isEmpty()) {
              dependenciesBuilder_.dispose();
              dependenciesBuilder_ = null;
              dependencies_ = other.dependencies_;
              bitField0_ = (bitField0_ & ~0x00000002);
              dependenciesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDependenciesFieldBuilder() : null;
            } else {
              dependenciesBuilder_.addAllMessages(other.dependencies_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                ref_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                cyclonedx.v1_3.Bom13.Dependency m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Dependency.parser(),
                        extensionRegistry);
                if (dependenciesBuilder_ == null) {
                  ensureDependenciesIsMutable();
                  dependencies_.add(m);
                } else {
                  dependenciesBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object ref_ = "";
      /**
       * <pre>
       * References a component or service by the its bom-ref attribute
       * </pre>
       *
       * <code>string ref = 1;</code>
       * @return The ref.
       */
      public java.lang.String getRef() {
        java.lang.Object ref = ref_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          ref_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * References a component or service by the its bom-ref attribute
       * </pre>
       *
       * <code>string ref = 1;</code>
       * @return The bytes for ref.
       */
      public com.google.protobuf.ByteString
          getRefBytes() {
        java.lang.Object ref = ref_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ref_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * References a component or service by the its bom-ref attribute
       * </pre>
       *
       * <code>string ref = 1;</code>
       * @param value The ref to set.
       * @return This builder for chaining.
       */
      public Builder setRef(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ref_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * References a component or service by the its bom-ref attribute
       * </pre>
       *
       * <code>string ref = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearRef() {
        ref_ = getDefaultInstance().getRef();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * References a component or service by the its bom-ref attribute
       * </pre>
       *
       * <code>string ref = 1;</code>
       * @param value The bytes for ref to set.
       * @return This builder for chaining.
       */
      public Builder setRefBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ref_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Dependency> dependencies_ =
        java.util.Collections.emptyList();
      private void ensureDependenciesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          dependencies_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Dependency>(dependencies_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Dependency, cyclonedx.v1_3.Bom13.Dependency.Builder, cyclonedx.v1_3.Bom13.DependencyOrBuilder> dependenciesBuilder_;

      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Dependency> getDependenciesList() {
        if (dependenciesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dependencies_);
        } else {
          return dependenciesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public int getDependenciesCount() {
        if (dependenciesBuilder_ == null) {
          return dependencies_.size();
        } else {
          return dependenciesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.Dependency getDependencies(int index) {
        if (dependenciesBuilder_ == null) {
          return dependencies_.get(index);
        } else {
          return dependenciesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public Builder setDependencies(
          int index, cyclonedx.v1_3.Bom13.Dependency value) {
        if (dependenciesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependenciesIsMutable();
          dependencies_.set(index, value);
          onChanged();
        } else {
          dependenciesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public Builder setDependencies(
          int index, cyclonedx.v1_3.Bom13.Dependency.Builder builderForValue) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          dependencies_.set(index, builderForValue.build());
          onChanged();
        } else {
          dependenciesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public Builder addDependencies(cyclonedx.v1_3.Bom13.Dependency value) {
        if (dependenciesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependenciesIsMutable();
          dependencies_.add(value);
          onChanged();
        } else {
          dependenciesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public Builder addDependencies(
          int index, cyclonedx.v1_3.Bom13.Dependency value) {
        if (dependenciesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependenciesIsMutable();
          dependencies_.add(index, value);
          onChanged();
        } else {
          dependenciesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public Builder addDependencies(
          cyclonedx.v1_3.Bom13.Dependency.Builder builderForValue) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          dependencies_.add(builderForValue.build());
          onChanged();
        } else {
          dependenciesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public Builder addDependencies(
          int index, cyclonedx.v1_3.Bom13.Dependency.Builder builderForValue) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          dependencies_.add(index, builderForValue.build());
          onChanged();
        } else {
          dependenciesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public Builder addAllDependencies(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Dependency> values) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dependencies_);
          onChanged();
        } else {
          dependenciesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public Builder clearDependencies() {
        if (dependenciesBuilder_ == null) {
          dependencies_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          dependenciesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public Builder removeDependencies(int index) {
        if (dependenciesBuilder_ == null) {
          ensureDependenciesIsMutable();
          dependencies_.remove(index);
          onChanged();
        } else {
          dependenciesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.Dependency.Builder getDependenciesBuilder(
          int index) {
        return getDependenciesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.DependencyOrBuilder getDependenciesOrBuilder(
          int index) {
        if (dependenciesBuilder_ == null) {
          return dependencies_.get(index);  } else {
          return dependenciesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.DependencyOrBuilder> 
           getDependenciesOrBuilderList() {
        if (dependenciesBuilder_ != null) {
          return dependenciesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dependencies_);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.Dependency.Builder addDependenciesBuilder() {
        return getDependenciesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Dependency.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.Dependency.Builder addDependenciesBuilder(
          int index) {
        return getDependenciesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Dependency.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Dependency dependencies = 2;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Dependency.Builder> 
           getDependenciesBuilderList() {
        return getDependenciesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Dependency, cyclonedx.v1_3.Bom13.Dependency.Builder, cyclonedx.v1_3.Bom13.DependencyOrBuilder> 
          getDependenciesFieldBuilder() {
        if (dependenciesBuilder_ == null) {
          dependenciesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Dependency, cyclonedx.v1_3.Bom13.Dependency.Builder, cyclonedx.v1_3.Bom13.DependencyOrBuilder>(
                  dependencies_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          dependencies_ = null;
        }
        return dependenciesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Dependency)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Dependency)
    private static final cyclonedx.v1_3.Bom13.Dependency DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Dependency();
    }

    public static cyclonedx.v1_3.Bom13.Dependency getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Dependency>
        PARSER = new com.google.protobuf.AbstractParser<Dependency>() {
      @java.lang.Override
      public Dependency parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Dependency> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Dependency> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Dependency getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DiffOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Diff)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the optional text of the diff
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
     * @return Whether the text field is set.
     */
    boolean hasText();
    /**
     * <pre>
     * Specifies the optional text of the diff
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
     * @return The text.
     */
    cyclonedx.v1_3.Bom13.AttachedText getText();
    /**
     * <pre>
     * Specifies the optional text of the diff
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
     */
    cyclonedx.v1_3.Bom13.AttachedTextOrBuilder getTextOrBuilder();

    /**
     * <pre>
     * Specifies the URL to the diff
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return Whether the url field is set.
     */
    boolean hasUrl();
    /**
     * <pre>
     * Specifies the URL to the diff
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return The url.
     */
    java.lang.String getUrl();
    /**
     * <pre>
     * Specifies the URL to the diff
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return The bytes for url.
     */
    com.google.protobuf.ByteString
        getUrlBytes();
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.Diff}
   */
  public static final class Diff extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Diff)
      DiffOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Diff.class.getName());
    }
    // Use Diff.newBuilder() to construct.
    private Diff(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Diff() {
      url_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Diff_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Diff_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Diff.class, cyclonedx.v1_3.Bom13.Diff.Builder.class);
    }

    private int bitField0_;
    public static final int TEXT_FIELD_NUMBER = 1;
    private cyclonedx.v1_3.Bom13.AttachedText text_;
    /**
     * <pre>
     * Specifies the optional text of the diff
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
     * @return Whether the text field is set.
     */
    @java.lang.Override
    public boolean hasText() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Specifies the optional text of the diff
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
     * @return The text.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.AttachedText getText() {
      return text_ == null ? cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance() : text_;
    }
    /**
     * <pre>
     * Specifies the optional text of the diff
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.AttachedTextOrBuilder getTextOrBuilder() {
      return text_ == null ? cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance() : text_;
    }

    public static final int URL_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object url_ = "";
    /**
     * <pre>
     * Specifies the URL to the diff
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return Whether the url field is set.
     */
    @java.lang.Override
    public boolean hasUrl() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Specifies the URL to the diff
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return The url.
     */
    @java.lang.Override
    public java.lang.String getUrl() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        url_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Specifies the URL to the diff
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return The bytes for url.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUrlBytes() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        url_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getText());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, url_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getText());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, url_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Diff)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Diff other = (cyclonedx.v1_3.Bom13.Diff) obj;

      if (hasText() != other.hasText()) return false;
      if (hasText()) {
        if (!getText()
            .equals(other.getText())) return false;
      }
      if (hasUrl() != other.hasUrl()) return false;
      if (hasUrl()) {
        if (!getUrl()
            .equals(other.getUrl())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasText()) {
        hash = (37 * hash) + TEXT_FIELD_NUMBER;
        hash = (53 * hash) + getText().hashCode();
      }
      if (hasUrl()) {
        hash = (37 * hash) + URL_FIELD_NUMBER;
        hash = (53 * hash) + getUrl().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Diff parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Diff parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Diff parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Diff parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Diff parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Diff parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Diff parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Diff parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Diff parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Diff parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Diff parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Diff parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Diff prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.Diff}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Diff)
        cyclonedx.v1_3.Bom13.DiffOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Diff_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Diff_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Diff.class, cyclonedx.v1_3.Bom13.Diff.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Diff.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTextFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        text_ = null;
        if (textBuilder_ != null) {
          textBuilder_.dispose();
          textBuilder_ = null;
        }
        url_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Diff_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Diff getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Diff.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Diff build() {
        cyclonedx.v1_3.Bom13.Diff result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Diff buildPartial() {
        cyclonedx.v1_3.Bom13.Diff result = new cyclonedx.v1_3.Bom13.Diff(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Diff result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.text_ = textBuilder_ == null
              ? text_
              : textBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.url_ = url_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Diff) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Diff)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Diff other) {
        if (other == cyclonedx.v1_3.Bom13.Diff.getDefaultInstance()) return this;
        if (other.hasText()) {
          mergeText(other.getText());
        }
        if (other.hasUrl()) {
          url_ = other.url_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTextFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                url_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private cyclonedx.v1_3.Bom13.AttachedText text_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.AttachedText, cyclonedx.v1_3.Bom13.AttachedText.Builder, cyclonedx.v1_3.Bom13.AttachedTextOrBuilder> textBuilder_;
      /**
       * <pre>
       * Specifies the optional text of the diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
       * @return Whether the text field is set.
       */
      public boolean hasText() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Specifies the optional text of the diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
       * @return The text.
       */
      public cyclonedx.v1_3.Bom13.AttachedText getText() {
        if (textBuilder_ == null) {
          return text_ == null ? cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance() : text_;
        } else {
          return textBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the optional text of the diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
       */
      public Builder setText(cyclonedx.v1_3.Bom13.AttachedText value) {
        if (textBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          text_ = value;
        } else {
          textBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the optional text of the diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
       */
      public Builder setText(
          cyclonedx.v1_3.Bom13.AttachedText.Builder builderForValue) {
        if (textBuilder_ == null) {
          text_ = builderForValue.build();
        } else {
          textBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the optional text of the diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
       */
      public Builder mergeText(cyclonedx.v1_3.Bom13.AttachedText value) {
        if (textBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            text_ != null &&
            text_ != cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance()) {
            getTextBuilder().mergeFrom(value);
          } else {
            text_ = value;
          }
        } else {
          textBuilder_.mergeFrom(value);
        }
        if (text_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the optional text of the diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
       */
      public Builder clearText() {
        bitField0_ = (bitField0_ & ~0x00000001);
        text_ = null;
        if (textBuilder_ != null) {
          textBuilder_.dispose();
          textBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the optional text of the diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
       */
      public cyclonedx.v1_3.Bom13.AttachedText.Builder getTextBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTextFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the optional text of the diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
       */
      public cyclonedx.v1_3.Bom13.AttachedTextOrBuilder getTextOrBuilder() {
        if (textBuilder_ != null) {
          return textBuilder_.getMessageOrBuilder();
        } else {
          return text_ == null ?
              cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance() : text_;
        }
      }
      /**
       * <pre>
       * Specifies the optional text of the diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.AttachedText, cyclonedx.v1_3.Bom13.AttachedText.Builder, cyclonedx.v1_3.Bom13.AttachedTextOrBuilder> 
          getTextFieldBuilder() {
        if (textBuilder_ == null) {
          textBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.AttachedText, cyclonedx.v1_3.Bom13.AttachedText.Builder, cyclonedx.v1_3.Bom13.AttachedTextOrBuilder>(
                  getText(),
                  getParentForChildren(),
                  isClean());
          text_ = null;
        }
        return textBuilder_;
      }

      private java.lang.Object url_ = "";
      /**
       * <pre>
       * Specifies the URL to the diff
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @return Whether the url field is set.
       */
      public boolean hasUrl() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Specifies the URL to the diff
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @return The url.
       */
      public java.lang.String getUrl() {
        java.lang.Object ref = url_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          url_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies the URL to the diff
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @return The bytes for url.
       */
      public com.google.protobuf.ByteString
          getUrlBytes() {
        java.lang.Object ref = url_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          url_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies the URL to the diff
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @param value The url to set.
       * @return This builder for chaining.
       */
      public Builder setUrl(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        url_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the URL to the diff
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearUrl() {
        url_ = getDefaultInstance().getUrl();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the URL to the diff
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @param value The bytes for url to set.
       * @return This builder for chaining.
       */
      public Builder setUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        url_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Diff)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Diff)
    private static final cyclonedx.v1_3.Bom13.Diff DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Diff();
    }

    public static cyclonedx.v1_3.Bom13.Diff getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Diff>
        PARSER = new com.google.protobuf.AbstractParser<Diff>() {
      @java.lang.Override
      public Diff parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Diff> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Diff> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Diff getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExternalReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.ExternalReference)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the "other" type.
     * </pre>
     *
     * <code>.cyclonedx.v1_3.ExternalReferenceType type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the "other" type.
     * </pre>
     *
     * <code>.cyclonedx.v1_3.ExternalReferenceType type = 1;</code>
     * @return The type.
     */
    cyclonedx.v1_3.Bom13.ExternalReferenceType getType();

    /**
     * <pre>
     * The URL to the external reference
     * </pre>
     *
     * <code>string url = 2;</code>
     * @return The url.
     */
    java.lang.String getUrl();
    /**
     * <pre>
     * The URL to the external reference
     * </pre>
     *
     * <code>string url = 2;</code>
     * @return The bytes for url.
     */
    com.google.protobuf.ByteString
        getUrlBytes();

    /**
     * <pre>
     * An optional comment describing the external reference
     * </pre>
     *
     * <code>optional string comment = 3;</code>
     * @return Whether the comment field is set.
     */
    boolean hasComment();
    /**
     * <pre>
     * An optional comment describing the external reference
     * </pre>
     *
     * <code>optional string comment = 3;</code>
     * @return The comment.
     */
    java.lang.String getComment();
    /**
     * <pre>
     * An optional comment describing the external reference
     * </pre>
     *
     * <code>optional string comment = 3;</code>
     * @return The bytes for comment.
     */
    com.google.protobuf.ByteString
        getCommentBytes();

    /**
     * <pre>
     * Optional integrity hashes for the external resource content
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Hash> 
        getHashesList();
    /**
     * <pre>
     * Optional integrity hashes for the external resource content
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    cyclonedx.v1_3.Bom13.Hash getHashes(int index);
    /**
     * <pre>
     * Optional integrity hashes for the external resource content
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    int getHashesCount();
    /**
     * <pre>
     * Optional integrity hashes for the external resource content
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.HashOrBuilder> 
        getHashesOrBuilderList();
    /**
     * <pre>
     * Optional integrity hashes for the external resource content
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    cyclonedx.v1_3.Bom13.HashOrBuilder getHashesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.ExternalReference}
   */
  public static final class ExternalReference extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.ExternalReference)
      ExternalReferenceOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        ExternalReference.class.getName());
    }
    // Use ExternalReference.newBuilder() to construct.
    private ExternalReference(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ExternalReference() {
      type_ = 0;
      url_ = "";
      comment_ = "";
      hashes_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_ExternalReference_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_ExternalReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.ExternalReference.class, cyclonedx.v1_3.Bom13.ExternalReference.Builder.class);
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <pre>
     * Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the "other" type.
     * </pre>
     *
     * <code>.cyclonedx.v1_3.ExternalReferenceType type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the "other" type.
     * </pre>
     *
     * <code>.cyclonedx.v1_3.ExternalReferenceType type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public cyclonedx.v1_3.Bom13.ExternalReferenceType getType() {
      cyclonedx.v1_3.Bom13.ExternalReferenceType result = cyclonedx.v1_3.Bom13.ExternalReferenceType.forNumber(type_);
      return result == null ? cyclonedx.v1_3.Bom13.ExternalReferenceType.UNRECOGNIZED : result;
    }

    public static final int URL_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object url_ = "";
    /**
     * <pre>
     * The URL to the external reference
     * </pre>
     *
     * <code>string url = 2;</code>
     * @return The url.
     */
    @java.lang.Override
    public java.lang.String getUrl() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        url_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The URL to the external reference
     * </pre>
     *
     * <code>string url = 2;</code>
     * @return The bytes for url.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUrlBytes() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        url_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COMMENT_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object comment_ = "";
    /**
     * <pre>
     * An optional comment describing the external reference
     * </pre>
     *
     * <code>optional string comment = 3;</code>
     * @return Whether the comment field is set.
     */
    @java.lang.Override
    public boolean hasComment() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * An optional comment describing the external reference
     * </pre>
     *
     * <code>optional string comment = 3;</code>
     * @return The comment.
     */
    @java.lang.Override
    public java.lang.String getComment() {
      java.lang.Object ref = comment_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        comment_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * An optional comment describing the external reference
     * </pre>
     *
     * <code>optional string comment = 3;</code>
     * @return The bytes for comment.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCommentBytes() {
      java.lang.Object ref = comment_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        comment_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HASHES_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Hash> hashes_;
    /**
     * <pre>
     * Optional integrity hashes for the external resource content
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Hash> getHashesList() {
      return hashes_;
    }
    /**
     * <pre>
     * Optional integrity hashes for the external resource content
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.HashOrBuilder> 
        getHashesOrBuilderList() {
      return hashes_;
    }
    /**
     * <pre>
     * Optional integrity hashes for the external resource content
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    @java.lang.Override
    public int getHashesCount() {
      return hashes_.size();
    }
    /**
     * <pre>
     * Optional integrity hashes for the external resource content
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Hash getHashes(int index) {
      return hashes_.get(index);
    }
    /**
     * <pre>
     * Optional integrity hashes for the external resource content
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.HashOrBuilder getHashesOrBuilder(
        int index) {
      return hashes_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != cyclonedx.v1_3.Bom13.ExternalReferenceType.EXTERNAL_REFERENCE_TYPE_OTHER.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(url_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, url_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, comment_);
      }
      for (int i = 0; i < hashes_.size(); i++) {
        output.writeMessage(4, hashes_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != cyclonedx.v1_3.Bom13.ExternalReferenceType.EXTERNAL_REFERENCE_TYPE_OTHER.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(url_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, url_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, comment_);
      }
      for (int i = 0; i < hashes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, hashes_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.ExternalReference)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.ExternalReference other = (cyclonedx.v1_3.Bom13.ExternalReference) obj;

      if (type_ != other.type_) return false;
      if (!getUrl()
          .equals(other.getUrl())) return false;
      if (hasComment() != other.hasComment()) return false;
      if (hasComment()) {
        if (!getComment()
            .equals(other.getComment())) return false;
      }
      if (!getHashesList()
          .equals(other.getHashesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + URL_FIELD_NUMBER;
      hash = (53 * hash) + getUrl().hashCode();
      if (hasComment()) {
        hash = (37 * hash) + COMMENT_FIELD_NUMBER;
        hash = (53 * hash) + getComment().hashCode();
      }
      if (getHashesCount() > 0) {
        hash = (37 * hash) + HASHES_FIELD_NUMBER;
        hash = (53 * hash) + getHashesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.ExternalReference parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.ExternalReference parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.ExternalReference parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.ExternalReference parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.ExternalReference parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.ExternalReference parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.ExternalReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.ExternalReference parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.ExternalReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.ExternalReference parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.ExternalReference parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.ExternalReference parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.ExternalReference prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.ExternalReference}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.ExternalReference)
        cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_ExternalReference_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_ExternalReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.ExternalReference.class, cyclonedx.v1_3.Bom13.ExternalReference.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.ExternalReference.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        url_ = "";
        comment_ = "";
        if (hashesBuilder_ == null) {
          hashes_ = java.util.Collections.emptyList();
        } else {
          hashes_ = null;
          hashesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_ExternalReference_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.ExternalReference getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.ExternalReference.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.ExternalReference build() {
        cyclonedx.v1_3.Bom13.ExternalReference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.ExternalReference buildPartial() {
        cyclonedx.v1_3.Bom13.ExternalReference result = new cyclonedx.v1_3.Bom13.ExternalReference(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(cyclonedx.v1_3.Bom13.ExternalReference result) {
        if (hashesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            hashes_ = java.util.Collections.unmodifiableList(hashes_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.hashes_ = hashes_;
        } else {
          result.hashes_ = hashesBuilder_.build();
        }
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.ExternalReference result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.url_ = url_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.comment_ = comment_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.ExternalReference) {
          return mergeFrom((cyclonedx.v1_3.Bom13.ExternalReference)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.ExternalReference other) {
        if (other == cyclonedx.v1_3.Bom13.ExternalReference.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (!other.getUrl().isEmpty()) {
          url_ = other.url_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasComment()) {
          comment_ = other.comment_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (hashesBuilder_ == null) {
          if (!other.hashes_.isEmpty()) {
            if (hashes_.isEmpty()) {
              hashes_ = other.hashes_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureHashesIsMutable();
              hashes_.addAll(other.hashes_);
            }
            onChanged();
          }
        } else {
          if (!other.hashes_.isEmpty()) {
            if (hashesBuilder_.isEmpty()) {
              hashesBuilder_.dispose();
              hashesBuilder_ = null;
              hashes_ = other.hashes_;
              bitField0_ = (bitField0_ & ~0x00000008);
              hashesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHashesFieldBuilder() : null;
            } else {
              hashesBuilder_.addAllMessages(other.hashes_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                url_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                comment_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                cyclonedx.v1_3.Bom13.Hash m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Hash.parser(),
                        extensionRegistry);
                if (hashesBuilder_ == null) {
                  ensureHashesIsMutable();
                  hashes_.add(m);
                } else {
                  hashesBuilder_.addMessage(m);
                }
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <pre>
       * Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the "other" type.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.ExternalReferenceType type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the "other" type.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.ExternalReferenceType type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the "other" type.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.ExternalReferenceType type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public cyclonedx.v1_3.Bom13.ExternalReferenceType getType() {
        cyclonedx.v1_3.Bom13.ExternalReferenceType result = cyclonedx.v1_3.Bom13.ExternalReferenceType.forNumber(type_);
        return result == null ? cyclonedx.v1_3.Bom13.ExternalReferenceType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the "other" type.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.ExternalReferenceType type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(cyclonedx.v1_3.Bom13.ExternalReferenceType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the "other" type.
       * </pre>
       *
       * <code>.cyclonedx.v1_3.ExternalReferenceType type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object url_ = "";
      /**
       * <pre>
       * The URL to the external reference
       * </pre>
       *
       * <code>string url = 2;</code>
       * @return The url.
       */
      public java.lang.String getUrl() {
        java.lang.Object ref = url_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          url_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The URL to the external reference
       * </pre>
       *
       * <code>string url = 2;</code>
       * @return The bytes for url.
       */
      public com.google.protobuf.ByteString
          getUrlBytes() {
        java.lang.Object ref = url_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          url_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The URL to the external reference
       * </pre>
       *
       * <code>string url = 2;</code>
       * @param value The url to set.
       * @return This builder for chaining.
       */
      public Builder setUrl(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        url_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The URL to the external reference
       * </pre>
       *
       * <code>string url = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearUrl() {
        url_ = getDefaultInstance().getUrl();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The URL to the external reference
       * </pre>
       *
       * <code>string url = 2;</code>
       * @param value The bytes for url to set.
       * @return This builder for chaining.
       */
      public Builder setUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        url_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object comment_ = "";
      /**
       * <pre>
       * An optional comment describing the external reference
       * </pre>
       *
       * <code>optional string comment = 3;</code>
       * @return Whether the comment field is set.
       */
      public boolean hasComment() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * An optional comment describing the external reference
       * </pre>
       *
       * <code>optional string comment = 3;</code>
       * @return The comment.
       */
      public java.lang.String getComment() {
        java.lang.Object ref = comment_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          comment_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * An optional comment describing the external reference
       * </pre>
       *
       * <code>optional string comment = 3;</code>
       * @return The bytes for comment.
       */
      public com.google.protobuf.ByteString
          getCommentBytes() {
        java.lang.Object ref = comment_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          comment_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * An optional comment describing the external reference
       * </pre>
       *
       * <code>optional string comment = 3;</code>
       * @param value The comment to set.
       * @return This builder for chaining.
       */
      public Builder setComment(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        comment_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An optional comment describing the external reference
       * </pre>
       *
       * <code>optional string comment = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearComment() {
        comment_ = getDefaultInstance().getComment();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An optional comment describing the external reference
       * </pre>
       *
       * <code>optional string comment = 3;</code>
       * @param value The bytes for comment to set.
       * @return This builder for chaining.
       */
      public Builder setCommentBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        comment_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Hash> hashes_ =
        java.util.Collections.emptyList();
      private void ensureHashesIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          hashes_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Hash>(hashes_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Hash, cyclonedx.v1_3.Bom13.Hash.Builder, cyclonedx.v1_3.Bom13.HashOrBuilder> hashesBuilder_;

      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Hash> getHashesList() {
        if (hashesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(hashes_);
        } else {
          return hashesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public int getHashesCount() {
        if (hashesBuilder_ == null) {
          return hashes_.size();
        } else {
          return hashesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.Hash getHashes(int index) {
        if (hashesBuilder_ == null) {
          return hashes_.get(index);
        } else {
          return hashesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder setHashes(
          int index, cyclonedx.v1_3.Bom13.Hash value) {
        if (hashesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHashesIsMutable();
          hashes_.set(index, value);
          onChanged();
        } else {
          hashesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder setHashes(
          int index, cyclonedx.v1_3.Bom13.Hash.Builder builderForValue) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          hashes_.set(index, builderForValue.build());
          onChanged();
        } else {
          hashesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder addHashes(cyclonedx.v1_3.Bom13.Hash value) {
        if (hashesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHashesIsMutable();
          hashes_.add(value);
          onChanged();
        } else {
          hashesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder addHashes(
          int index, cyclonedx.v1_3.Bom13.Hash value) {
        if (hashesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHashesIsMutable();
          hashes_.add(index, value);
          onChanged();
        } else {
          hashesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder addHashes(
          cyclonedx.v1_3.Bom13.Hash.Builder builderForValue) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          hashes_.add(builderForValue.build());
          onChanged();
        } else {
          hashesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder addHashes(
          int index, cyclonedx.v1_3.Bom13.Hash.Builder builderForValue) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          hashes_.add(index, builderForValue.build());
          onChanged();
        } else {
          hashesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder addAllHashes(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Hash> values) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, hashes_);
          onChanged();
        } else {
          hashesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder clearHashes() {
        if (hashesBuilder_ == null) {
          hashes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          hashesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder removeHashes(int index) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          hashes_.remove(index);
          onChanged();
        } else {
          hashesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.Hash.Builder getHashesBuilder(
          int index) {
        return getHashesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.HashOrBuilder getHashesOrBuilder(
          int index) {
        if (hashesBuilder_ == null) {
          return hashes_.get(index);  } else {
          return hashesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.HashOrBuilder> 
           getHashesOrBuilderList() {
        if (hashesBuilder_ != null) {
          return hashesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(hashes_);
        }
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.Hash.Builder addHashesBuilder() {
        return getHashesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Hash.getDefaultInstance());
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.Hash.Builder addHashesBuilder(
          int index) {
        return getHashesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Hash.getDefaultInstance());
      }
      /**
       * <pre>
       * Optional integrity hashes for the external resource content
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Hash.Builder> 
           getHashesBuilderList() {
        return getHashesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Hash, cyclonedx.v1_3.Bom13.Hash.Builder, cyclonedx.v1_3.Bom13.HashOrBuilder> 
          getHashesFieldBuilder() {
        if (hashesBuilder_ == null) {
          hashesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Hash, cyclonedx.v1_3.Bom13.Hash.Builder, cyclonedx.v1_3.Bom13.HashOrBuilder>(
                  hashes_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          hashes_ = null;
        }
        return hashesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.ExternalReference)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.ExternalReference)
    private static final cyclonedx.v1_3.Bom13.ExternalReference DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.ExternalReference();
    }

    public static cyclonedx.v1_3.Bom13.ExternalReference getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExternalReference>
        PARSER = new com.google.protobuf.AbstractParser<ExternalReference>() {
      @java.lang.Override
      public ExternalReference parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ExternalReference> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExternalReference> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ExternalReference getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HashOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Hash)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the algorithm used to create the hash
     * </pre>
     *
     * <code>.cyclonedx.v1_3.HashAlg alg = 1;</code>
     * @return The enum numeric value on the wire for alg.
     */
    int getAlgValue();
    /**
     * <pre>
     * Specifies the algorithm used to create the hash
     * </pre>
     *
     * <code>.cyclonedx.v1_3.HashAlg alg = 1;</code>
     * @return The alg.
     */
    cyclonedx.v1_3.Bom13.HashAlg getAlg();

    /**
     * <pre>
     * SimpleContent value of element
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The value.
     */
    java.lang.String getValue();
    /**
     * <pre>
     * SimpleContent value of element
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * <pre>
   * Specifies the file hash of the component
   * </pre>
   *
   * Protobuf type {@code cyclonedx.v1_3.Hash}
   */
  public static final class Hash extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Hash)
      HashOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Hash.class.getName());
    }
    // Use Hash.newBuilder() to construct.
    private Hash(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Hash() {
      alg_ = 0;
      value_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Hash_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Hash_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Hash.class, cyclonedx.v1_3.Bom13.Hash.Builder.class);
    }

    public static final int ALG_FIELD_NUMBER = 1;
    private int alg_ = 0;
    /**
     * <pre>
     * Specifies the algorithm used to create the hash
     * </pre>
     *
     * <code>.cyclonedx.v1_3.HashAlg alg = 1;</code>
     * @return The enum numeric value on the wire for alg.
     */
    @java.lang.Override public int getAlgValue() {
      return alg_;
    }
    /**
     * <pre>
     * Specifies the algorithm used to create the hash
     * </pre>
     *
     * <code>.cyclonedx.v1_3.HashAlg alg = 1;</code>
     * @return The alg.
     */
    @java.lang.Override public cyclonedx.v1_3.Bom13.HashAlg getAlg() {
      cyclonedx.v1_3.Bom13.HashAlg result = cyclonedx.v1_3.Bom13.HashAlg.forNumber(alg_);
      return result == null ? cyclonedx.v1_3.Bom13.HashAlg.UNRECOGNIZED : result;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object value_ = "";
    /**
     * <pre>
     * SimpleContent value of element
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The value.
     */
    @java.lang.Override
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        value_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * SimpleContent value of element
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (alg_ != cyclonedx.v1_3.Bom13.HashAlg.HASH_ALG_NULL.getNumber()) {
        output.writeEnum(1, alg_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(value_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (alg_ != cyclonedx.v1_3.Bom13.HashAlg.HASH_ALG_NULL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, alg_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(value_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Hash)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Hash other = (cyclonedx.v1_3.Bom13.Hash) obj;

      if (alg_ != other.alg_) return false;
      if (!getValue()
          .equals(other.getValue())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ALG_FIELD_NUMBER;
      hash = (53 * hash) + alg_;
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Hash parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Hash parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Hash parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Hash parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Hash parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Hash parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Hash parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Hash parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Hash parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Hash parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Hash parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Hash parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Hash prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies the file hash of the component
     * </pre>
     *
     * Protobuf type {@code cyclonedx.v1_3.Hash}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Hash)
        cyclonedx.v1_3.Bom13.HashOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Hash_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Hash_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Hash.class, cyclonedx.v1_3.Bom13.Hash.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Hash.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        alg_ = 0;
        value_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Hash_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Hash getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Hash.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Hash build() {
        cyclonedx.v1_3.Bom13.Hash result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Hash buildPartial() {
        cyclonedx.v1_3.Bom13.Hash result = new cyclonedx.v1_3.Bom13.Hash(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Hash result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.alg_ = alg_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.value_ = value_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Hash) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Hash)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Hash other) {
        if (other == cyclonedx.v1_3.Bom13.Hash.getDefaultInstance()) return this;
        if (other.alg_ != 0) {
          setAlgValue(other.getAlgValue());
        }
        if (!other.getValue().isEmpty()) {
          value_ = other.value_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                alg_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                value_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int alg_ = 0;
      /**
       * <pre>
       * Specifies the algorithm used to create the hash
       * </pre>
       *
       * <code>.cyclonedx.v1_3.HashAlg alg = 1;</code>
       * @return The enum numeric value on the wire for alg.
       */
      @java.lang.Override public int getAlgValue() {
        return alg_;
      }
      /**
       * <pre>
       * Specifies the algorithm used to create the hash
       * </pre>
       *
       * <code>.cyclonedx.v1_3.HashAlg alg = 1;</code>
       * @param value The enum numeric value on the wire for alg to set.
       * @return This builder for chaining.
       */
      public Builder setAlgValue(int value) {
        alg_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the algorithm used to create the hash
       * </pre>
       *
       * <code>.cyclonedx.v1_3.HashAlg alg = 1;</code>
       * @return The alg.
       */
      @java.lang.Override
      public cyclonedx.v1_3.Bom13.HashAlg getAlg() {
        cyclonedx.v1_3.Bom13.HashAlg result = cyclonedx.v1_3.Bom13.HashAlg.forNumber(alg_);
        return result == null ? cyclonedx.v1_3.Bom13.HashAlg.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Specifies the algorithm used to create the hash
       * </pre>
       *
       * <code>.cyclonedx.v1_3.HashAlg alg = 1;</code>
       * @param value The alg to set.
       * @return This builder for chaining.
       */
      public Builder setAlg(cyclonedx.v1_3.Bom13.HashAlg value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        alg_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the algorithm used to create the hash
       * </pre>
       *
       * <code>.cyclonedx.v1_3.HashAlg alg = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAlg() {
        bitField0_ = (bitField0_ & ~0x00000001);
        alg_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object value_ = "";
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return The value.
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return The bytes for value.
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 2;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        value_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        value_ = getDefaultInstance().getValue();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SimpleContent value of element
       * </pre>
       *
       * <code>string value = 2;</code>
       * @param value The bytes for value to set.
       * @return This builder for chaining.
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        value_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Hash)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Hash)
    private static final cyclonedx.v1_3.Bom13.Hash DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Hash();
    }

    public static cyclonedx.v1_3.Bom13.Hash getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Hash>
        PARSER = new com.google.protobuf.AbstractParser<Hash>() {
      @java.lang.Override
      public Hash parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Hash> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Hash> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Hash getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface IdentifiableActionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.IdentifiableAction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The timestamp in which the action occurred
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
     * @return Whether the timestamp field is set.
     */
    boolean hasTimestamp();
    /**
     * <pre>
     * The timestamp in which the action occurred
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
     * @return The timestamp.
     */
    com.google.protobuf.Timestamp getTimestamp();
    /**
     * <pre>
     * The timestamp in which the action occurred
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
     */
    com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder();

    /**
     * <pre>
     * The name of the individual who performed the action
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <pre>
     * The name of the individual who performed the action
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The name of the individual who performed the action
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The email address of the individual who performed the action
     * </pre>
     *
     * <code>optional string email = 3;</code>
     * @return Whether the email field is set.
     */
    boolean hasEmail();
    /**
     * <pre>
     * The email address of the individual who performed the action
     * </pre>
     *
     * <code>optional string email = 3;</code>
     * @return The email.
     */
    java.lang.String getEmail();
    /**
     * <pre>
     * The email address of the individual who performed the action
     * </pre>
     *
     * <code>optional string email = 3;</code>
     * @return The bytes for email.
     */
    com.google.protobuf.ByteString
        getEmailBytes();
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.IdentifiableAction}
   */
  public static final class IdentifiableAction extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.IdentifiableAction)
      IdentifiableActionOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        IdentifiableAction.class.getName());
    }
    // Use IdentifiableAction.newBuilder() to construct.
    private IdentifiableAction(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private IdentifiableAction() {
      name_ = "";
      email_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_IdentifiableAction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_IdentifiableAction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.IdentifiableAction.class, cyclonedx.v1_3.Bom13.IdentifiableAction.Builder.class);
    }

    private int bitField0_;
    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private com.google.protobuf.Timestamp timestamp_;
    /**
     * <pre>
     * The timestamp in which the action occurred
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
     * @return Whether the timestamp field is set.
     */
    @java.lang.Override
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The timestamp in which the action occurred
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public com.google.protobuf.Timestamp getTimestamp() {
      return timestamp_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : timestamp_;
    }
    /**
     * <pre>
     * The timestamp in which the action occurred
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder() {
      return timestamp_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : timestamp_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of the individual who performed the action
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The name of the individual who performed the action
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the individual who performed the action
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EMAIL_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object email_ = "";
    /**
     * <pre>
     * The email address of the individual who performed the action
     * </pre>
     *
     * <code>optional string email = 3;</code>
     * @return Whether the email field is set.
     */
    @java.lang.Override
    public boolean hasEmail() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The email address of the individual who performed the action
     * </pre>
     *
     * <code>optional string email = 3;</code>
     * @return The email.
     */
    @java.lang.Override
    public java.lang.String getEmail() {
      java.lang.Object ref = email_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        email_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The email address of the individual who performed the action
     * </pre>
     *
     * <code>optional string email = 3;</code>
     * @return The bytes for email.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getEmailBytes() {
      java.lang.Object ref = email_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        email_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTimestamp());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, name_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, email_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTimestamp());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, name_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, email_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.IdentifiableAction)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.IdentifiableAction other = (cyclonedx.v1_3.Bom13.IdentifiableAction) obj;

      if (hasTimestamp() != other.hasTimestamp()) return false;
      if (hasTimestamp()) {
        if (!getTimestamp()
            .equals(other.getTimestamp())) return false;
      }
      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (!getName()
            .equals(other.getName())) return false;
      }
      if (hasEmail() != other.hasEmail()) return false;
      if (hasEmail()) {
        if (!getEmail()
            .equals(other.getEmail())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTimestamp()) {
        hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + getTimestamp().hashCode();
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasEmail()) {
        hash = (37 * hash) + EMAIL_FIELD_NUMBER;
        hash = (53 * hash) + getEmail().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.IdentifiableAction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.IdentifiableAction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.IdentifiableAction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.IdentifiableAction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.IdentifiableAction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.IdentifiableAction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.IdentifiableAction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.IdentifiableAction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.IdentifiableAction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.IdentifiableAction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.IdentifiableAction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.IdentifiableAction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.IdentifiableAction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.IdentifiableAction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.IdentifiableAction)
        cyclonedx.v1_3.Bom13.IdentifiableActionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_IdentifiableAction_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_IdentifiableAction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.IdentifiableAction.class, cyclonedx.v1_3.Bom13.IdentifiableAction.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.IdentifiableAction.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTimestampFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        timestamp_ = null;
        if (timestampBuilder_ != null) {
          timestampBuilder_.dispose();
          timestampBuilder_ = null;
        }
        name_ = "";
        email_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_IdentifiableAction_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.IdentifiableAction getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.IdentifiableAction.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.IdentifiableAction build() {
        cyclonedx.v1_3.Bom13.IdentifiableAction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.IdentifiableAction buildPartial() {
        cyclonedx.v1_3.Bom13.IdentifiableAction result = new cyclonedx.v1_3.Bom13.IdentifiableAction(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.IdentifiableAction result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.timestamp_ = timestampBuilder_ == null
              ? timestamp_
              : timestampBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.email_ = email_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.IdentifiableAction) {
          return mergeFrom((cyclonedx.v1_3.Bom13.IdentifiableAction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.IdentifiableAction other) {
        if (other == cyclonedx.v1_3.Bom13.IdentifiableAction.getDefaultInstance()) return this;
        if (other.hasTimestamp()) {
          mergeTimestamp(other.getTimestamp());
        }
        if (other.hasName()) {
          name_ = other.name_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasEmail()) {
          email_ = other.email_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTimestampFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                email_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Timestamp timestamp_;
      private com.google.protobuf.SingleFieldBuilder<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> timestampBuilder_;
      /**
       * <pre>
       * The timestamp in which the action occurred
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       * @return Whether the timestamp field is set.
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The timestamp in which the action occurred
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       * @return The timestamp.
       */
      public com.google.protobuf.Timestamp getTimestamp() {
        if (timestampBuilder_ == null) {
          return timestamp_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : timestamp_;
        } else {
          return timestampBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The timestamp in which the action occurred
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       */
      public Builder setTimestamp(com.google.protobuf.Timestamp value) {
        if (timestampBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          timestamp_ = value;
        } else {
          timestampBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The timestamp in which the action occurred
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       */
      public Builder setTimestamp(
          com.google.protobuf.Timestamp.Builder builderForValue) {
        if (timestampBuilder_ == null) {
          timestamp_ = builderForValue.build();
        } else {
          timestampBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The timestamp in which the action occurred
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       */
      public Builder mergeTimestamp(com.google.protobuf.Timestamp value) {
        if (timestampBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            timestamp_ != null &&
            timestamp_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
            getTimestampBuilder().mergeFrom(value);
          } else {
            timestamp_ = value;
          }
        } else {
          timestampBuilder_.mergeFrom(value);
        }
        if (timestamp_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The timestamp in which the action occurred
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000001);
        timestamp_ = null;
        if (timestampBuilder_ != null) {
          timestampBuilder_.dispose();
          timestampBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The timestamp in which the action occurred
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       */
      public com.google.protobuf.Timestamp.Builder getTimestampBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTimestampFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The timestamp in which the action occurred
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       */
      public com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder() {
        if (timestampBuilder_ != null) {
          return timestampBuilder_.getMessageOrBuilder();
        } else {
          return timestamp_ == null ?
              com.google.protobuf.Timestamp.getDefaultInstance() : timestamp_;
        }
      }
      /**
       * <pre>
       * The timestamp in which the action occurred
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
          getTimestampFieldBuilder() {
        if (timestampBuilder_ == null) {
          timestampBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                  getTimestamp(),
                  getParentForChildren(),
                  isClean());
          timestamp_ = null;
        }
        return timestampBuilder_;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The name of the individual who performed the action
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return Whether the name field is set.
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The name of the individual who performed the action
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the individual who performed the action
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the individual who performed the action
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the individual who performed the action
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the individual who performed the action
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object email_ = "";
      /**
       * <pre>
       * The email address of the individual who performed the action
       * </pre>
       *
       * <code>optional string email = 3;</code>
       * @return Whether the email field is set.
       */
      public boolean hasEmail() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The email address of the individual who performed the action
       * </pre>
       *
       * <code>optional string email = 3;</code>
       * @return The email.
       */
      public java.lang.String getEmail() {
        java.lang.Object ref = email_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          email_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The email address of the individual who performed the action
       * </pre>
       *
       * <code>optional string email = 3;</code>
       * @return The bytes for email.
       */
      public com.google.protobuf.ByteString
          getEmailBytes() {
        java.lang.Object ref = email_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          email_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The email address of the individual who performed the action
       * </pre>
       *
       * <code>optional string email = 3;</code>
       * @param value The email to set.
       * @return This builder for chaining.
       */
      public Builder setEmail(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        email_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The email address of the individual who performed the action
       * </pre>
       *
       * <code>optional string email = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearEmail() {
        email_ = getDefaultInstance().getEmail();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The email address of the individual who performed the action
       * </pre>
       *
       * <code>optional string email = 3;</code>
       * @param value The bytes for email to set.
       * @return This builder for chaining.
       */
      public Builder setEmailBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        email_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.IdentifiableAction)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.IdentifiableAction)
    private static final cyclonedx.v1_3.Bom13.IdentifiableAction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.IdentifiableAction();
    }

    public static cyclonedx.v1_3.Bom13.IdentifiableAction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IdentifiableAction>
        PARSER = new com.google.protobuf.AbstractParser<IdentifiableAction>() {
      @java.lang.Override
      public IdentifiableAction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<IdentifiableAction> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<IdentifiableAction> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.IdentifiableAction getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface IssueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Issue)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the type of issue
     * </pre>
     *
     * <code>.cyclonedx.v1_3.IssueClassification type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * Specifies the type of issue
     * </pre>
     *
     * <code>.cyclonedx.v1_3.IssueClassification type = 1;</code>
     * @return The type.
     */
    cyclonedx.v1_3.Bom13.IssueClassification getType();

    /**
     * <pre>
     * The identifier of the issue assigned by the source of the issue
     * </pre>
     *
     * <code>optional string id = 2;</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <pre>
     * The identifier of the issue assigned by the source of the issue
     * </pre>
     *
     * <code>optional string id = 2;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * The identifier of the issue assigned by the source of the issue
     * </pre>
     *
     * <code>optional string id = 2;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * The name of the issue
     * </pre>
     *
     * <code>optional string name = 3;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <pre>
     * The name of the issue
     * </pre>
     *
     * <code>optional string name = 3;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The name of the issue
     * </pre>
     *
     * <code>optional string name = 3;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * A description of the issue
     * </pre>
     *
     * <code>optional string description = 4;</code>
     * @return Whether the description field is set.
     */
    boolean hasDescription();
    /**
     * <pre>
     * A description of the issue
     * </pre>
     *
     * <code>optional string description = 4;</code>
     * @return The description.
     */
    java.lang.String getDescription();
    /**
     * <pre>
     * A description of the issue
     * </pre>
     *
     * <code>optional string description = 4;</code>
     * @return The bytes for description.
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();

    /**
     * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
     * @return Whether the source field is set.
     */
    boolean hasSource();
    /**
     * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
     * @return The source.
     */
    cyclonedx.v1_3.Bom13.Source getSource();
    /**
     * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
     */
    cyclonedx.v1_3.Bom13.SourceOrBuilder getSourceOrBuilder();

    /**
     * <code>repeated string references = 6;</code>
     * @return A list containing the references.
     */
    java.util.List<java.lang.String>
        getReferencesList();
    /**
     * <code>repeated string references = 6;</code>
     * @return The count of references.
     */
    int getReferencesCount();
    /**
     * <code>repeated string references = 6;</code>
     * @param index The index of the element to return.
     * @return The references at the given index.
     */
    java.lang.String getReferences(int index);
    /**
     * <code>repeated string references = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the references at the given index.
     */
    com.google.protobuf.ByteString
        getReferencesBytes(int index);
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.Issue}
   */
  public static final class Issue extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Issue)
      IssueOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Issue.class.getName());
    }
    // Use Issue.newBuilder() to construct.
    private Issue(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Issue() {
      type_ = 0;
      id_ = "";
      name_ = "";
      description_ = "";
      references_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Issue_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Issue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Issue.class, cyclonedx.v1_3.Bom13.Issue.Builder.class);
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <pre>
     * Specifies the type of issue
     * </pre>
     *
     * <code>.cyclonedx.v1_3.IssueClassification type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Specifies the type of issue
     * </pre>
     *
     * <code>.cyclonedx.v1_3.IssueClassification type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public cyclonedx.v1_3.Bom13.IssueClassification getType() {
      cyclonedx.v1_3.Bom13.IssueClassification result = cyclonedx.v1_3.Bom13.IssueClassification.forNumber(type_);
      return result == null ? cyclonedx.v1_3.Bom13.IssueClassification.UNRECOGNIZED : result;
    }

    public static final int ID_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object id_ = "";
    /**
     * <pre>
     * The identifier of the issue assigned by the source of the issue
     * </pre>
     *
     * <code>optional string id = 2;</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The identifier of the issue assigned by the source of the issue
     * </pre>
     *
     * <code>optional string id = 2;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The identifier of the issue assigned by the source of the issue
     * </pre>
     *
     * <code>optional string id = 2;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of the issue
     * </pre>
     *
     * <code>optional string name = 3;</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The name of the issue
     * </pre>
     *
     * <code>optional string name = 3;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the issue
     * </pre>
     *
     * <code>optional string name = 3;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object description_ = "";
    /**
     * <pre>
     * A description of the issue
     * </pre>
     *
     * <code>optional string description = 4;</code>
     * @return Whether the description field is set.
     */
    @java.lang.Override
    public boolean hasDescription() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * A description of the issue
     * </pre>
     *
     * <code>optional string description = 4;</code>
     * @return The description.
     */
    @java.lang.Override
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        description_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A description of the issue
     * </pre>
     *
     * <code>optional string description = 4;</code>
     * @return The bytes for description.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SOURCE_FIELD_NUMBER = 5;
    private cyclonedx.v1_3.Bom13.Source source_;
    /**
     * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
     * @return Whether the source field is set.
     */
    @java.lang.Override
    public boolean hasSource() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
     * @return The source.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Source getSource() {
      return source_ == null ? cyclonedx.v1_3.Bom13.Source.getDefaultInstance() : source_;
    }
    /**
     * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.SourceOrBuilder getSourceOrBuilder() {
      return source_ == null ? cyclonedx.v1_3.Bom13.Source.getDefaultInstance() : source_;
    }

    public static final int REFERENCES_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList references_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <code>repeated string references = 6;</code>
     * @return A list containing the references.
     */
    public com.google.protobuf.ProtocolStringList
        getReferencesList() {
      return references_;
    }
    /**
     * <code>repeated string references = 6;</code>
     * @return The count of references.
     */
    public int getReferencesCount() {
      return references_.size();
    }
    /**
     * <code>repeated string references = 6;</code>
     * @param index The index of the element to return.
     * @return The references at the given index.
     */
    public java.lang.String getReferences(int index) {
      return references_.get(index);
    }
    /**
     * <code>repeated string references = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the references at the given index.
     */
    public com.google.protobuf.ByteString
        getReferencesBytes(int index) {
      return references_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != cyclonedx.v1_3.Bom13.IssueClassification.ISSUE_CLASSIFICATION_NULL.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, id_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, name_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 4, description_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(5, getSource());
      }
      for (int i = 0; i < references_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 6, references_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != cyclonedx.v1_3.Bom13.IssueClassification.ISSUE_CLASSIFICATION_NULL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, id_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, name_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(4, description_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getSource());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < references_.size(); i++) {
          dataSize += computeStringSizeNoTag(references_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getReferencesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Issue)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Issue other = (cyclonedx.v1_3.Bom13.Issue) obj;

      if (type_ != other.type_) return false;
      if (hasId() != other.hasId()) return false;
      if (hasId()) {
        if (!getId()
            .equals(other.getId())) return false;
      }
      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (!getName()
            .equals(other.getName())) return false;
      }
      if (hasDescription() != other.hasDescription()) return false;
      if (hasDescription()) {
        if (!getDescription()
            .equals(other.getDescription())) return false;
      }
      if (hasSource() != other.hasSource()) return false;
      if (hasSource()) {
        if (!getSource()
            .equals(other.getSource())) return false;
      }
      if (!getReferencesList()
          .equals(other.getReferencesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasDescription()) {
        hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
        hash = (53 * hash) + getDescription().hashCode();
      }
      if (hasSource()) {
        hash = (37 * hash) + SOURCE_FIELD_NUMBER;
        hash = (53 * hash) + getSource().hashCode();
      }
      if (getReferencesCount() > 0) {
        hash = (37 * hash) + REFERENCES_FIELD_NUMBER;
        hash = (53 * hash) + getReferencesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Issue parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Issue parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Issue parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Issue parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Issue parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Issue parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Issue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Issue parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Issue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Issue parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Issue parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Issue parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Issue prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.Issue}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Issue)
        cyclonedx.v1_3.Bom13.IssueOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Issue_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Issue_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Issue.class, cyclonedx.v1_3.Bom13.Issue.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Issue.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getSourceFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        id_ = "";
        name_ = "";
        description_ = "";
        source_ = null;
        if (sourceBuilder_ != null) {
          sourceBuilder_.dispose();
          sourceBuilder_ = null;
        }
        references_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Issue_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Issue getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Issue.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Issue build() {
        cyclonedx.v1_3.Bom13.Issue result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Issue buildPartial() {
        cyclonedx.v1_3.Bom13.Issue result = new cyclonedx.v1_3.Bom13.Issue(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Issue result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.id_ = id_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.description_ = description_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.source_ = sourceBuilder_ == null
              ? source_
              : sourceBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          references_.makeImmutable();
          result.references_ = references_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Issue) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Issue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Issue other) {
        if (other == cyclonedx.v1_3.Bom13.Issue.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.hasId()) {
          id_ = other.id_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasName()) {
          name_ = other.name_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.hasDescription()) {
          description_ = other.description_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        if (other.hasSource()) {
          mergeSource(other.getSource());
        }
        if (!other.references_.isEmpty()) {
          if (references_.isEmpty()) {
            references_ = other.references_;
            bitField0_ |= 0x00000020;
          } else {
            ensureReferencesIsMutable();
            references_.addAll(other.references_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                id_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                description_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getSourceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 50: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureReferencesIsMutable();
                references_.add(s);
                break;
              } // case 50
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <pre>
       * Specifies the type of issue
       * </pre>
       *
       * <code>.cyclonedx.v1_3.IssueClassification type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Specifies the type of issue
       * </pre>
       *
       * <code>.cyclonedx.v1_3.IssueClassification type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the type of issue
       * </pre>
       *
       * <code>.cyclonedx.v1_3.IssueClassification type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public cyclonedx.v1_3.Bom13.IssueClassification getType() {
        cyclonedx.v1_3.Bom13.IssueClassification result = cyclonedx.v1_3.Bom13.IssueClassification.forNumber(type_);
        return result == null ? cyclonedx.v1_3.Bom13.IssueClassification.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Specifies the type of issue
       * </pre>
       *
       * <code>.cyclonedx.v1_3.IssueClassification type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(cyclonedx.v1_3.Bom13.IssueClassification value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the type of issue
       * </pre>
       *
       * <code>.cyclonedx.v1_3.IssueClassification type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * The identifier of the issue assigned by the source of the issue
       * </pre>
       *
       * <code>optional string id = 2;</code>
       * @return Whether the id field is set.
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The identifier of the issue assigned by the source of the issue
       * </pre>
       *
       * <code>optional string id = 2;</code>
       * @return The id.
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The identifier of the issue assigned by the source of the issue
       * </pre>
       *
       * <code>optional string id = 2;</code>
       * @return The bytes for id.
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The identifier of the issue assigned by the source of the issue
       * </pre>
       *
       * <code>optional string id = 2;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        id_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The identifier of the issue assigned by the source of the issue
       * </pre>
       *
       * <code>optional string id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        id_ = getDefaultInstance().getId();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The identifier of the issue assigned by the source of the issue
       * </pre>
       *
       * <code>optional string id = 2;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        id_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The name of the issue
       * </pre>
       *
       * <code>optional string name = 3;</code>
       * @return Whether the name field is set.
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The name of the issue
       * </pre>
       *
       * <code>optional string name = 3;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the issue
       * </pre>
       *
       * <code>optional string name = 3;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the issue
       * </pre>
       *
       * <code>optional string name = 3;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the issue
       * </pre>
       *
       * <code>optional string name = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the issue
       * </pre>
       *
       * <code>optional string name = 3;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private java.lang.Object description_ = "";
      /**
       * <pre>
       * A description of the issue
       * </pre>
       *
       * <code>optional string description = 4;</code>
       * @return Whether the description field is set.
       */
      public boolean hasDescription() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * A description of the issue
       * </pre>
       *
       * <code>optional string description = 4;</code>
       * @return The description.
       */
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          description_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A description of the issue
       * </pre>
       *
       * <code>optional string description = 4;</code>
       * @return The bytes for description.
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A description of the issue
       * </pre>
       *
       * <code>optional string description = 4;</code>
       * @param value The description to set.
       * @return This builder for chaining.
       */
      public Builder setDescription(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        description_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A description of the issue
       * </pre>
       *
       * <code>optional string description = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearDescription() {
        description_ = getDefaultInstance().getDescription();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A description of the issue
       * </pre>
       *
       * <code>optional string description = 4;</code>
       * @param value The bytes for description to set.
       * @return This builder for chaining.
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        description_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private cyclonedx.v1_3.Bom13.Source source_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.Source, cyclonedx.v1_3.Bom13.Source.Builder, cyclonedx.v1_3.Bom13.SourceOrBuilder> sourceBuilder_;
      /**
       * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
       * @return Whether the source field is set.
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
       * @return The source.
       */
      public cyclonedx.v1_3.Bom13.Source getSource() {
        if (sourceBuilder_ == null) {
          return source_ == null ? cyclonedx.v1_3.Bom13.Source.getDefaultInstance() : source_;
        } else {
          return sourceBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
       */
      public Builder setSource(cyclonedx.v1_3.Bom13.Source value) {
        if (sourceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          source_ = value;
        } else {
          sourceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
       */
      public Builder setSource(
          cyclonedx.v1_3.Bom13.Source.Builder builderForValue) {
        if (sourceBuilder_ == null) {
          source_ = builderForValue.build();
        } else {
          sourceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
       */
      public Builder mergeSource(cyclonedx.v1_3.Bom13.Source value) {
        if (sourceBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            source_ != null &&
            source_ != cyclonedx.v1_3.Bom13.Source.getDefaultInstance()) {
            getSourceBuilder().mergeFrom(value);
          } else {
            source_ = value;
          }
        } else {
          sourceBuilder_.mergeFrom(value);
        }
        if (source_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00000010);
        source_ = null;
        if (sourceBuilder_ != null) {
          sourceBuilder_.dispose();
          sourceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
       */
      public cyclonedx.v1_3.Bom13.Source.Builder getSourceBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getSourceFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
       */
      public cyclonedx.v1_3.Bom13.SourceOrBuilder getSourceOrBuilder() {
        if (sourceBuilder_ != null) {
          return sourceBuilder_.getMessageOrBuilder();
        } else {
          return source_ == null ?
              cyclonedx.v1_3.Bom13.Source.getDefaultInstance() : source_;
        }
      }
      /**
       * <code>optional .cyclonedx.v1_3.Source source = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.Source, cyclonedx.v1_3.Bom13.Source.Builder, cyclonedx.v1_3.Bom13.SourceOrBuilder> 
          getSourceFieldBuilder() {
        if (sourceBuilder_ == null) {
          sourceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.Source, cyclonedx.v1_3.Bom13.Source.Builder, cyclonedx.v1_3.Bom13.SourceOrBuilder>(
                  getSource(),
                  getParentForChildren(),
                  isClean());
          source_ = null;
        }
        return sourceBuilder_;
      }

      private com.google.protobuf.LazyStringArrayList references_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureReferencesIsMutable() {
        if (!references_.isModifiable()) {
          references_ = new com.google.protobuf.LazyStringArrayList(references_);
        }
        bitField0_ |= 0x00000020;
      }
      /**
       * <code>repeated string references = 6;</code>
       * @return A list containing the references.
       */
      public com.google.protobuf.ProtocolStringList
          getReferencesList() {
        references_.makeImmutable();
        return references_;
      }
      /**
       * <code>repeated string references = 6;</code>
       * @return The count of references.
       */
      public int getReferencesCount() {
        return references_.size();
      }
      /**
       * <code>repeated string references = 6;</code>
       * @param index The index of the element to return.
       * @return The references at the given index.
       */
      public java.lang.String getReferences(int index) {
        return references_.get(index);
      }
      /**
       * <code>repeated string references = 6;</code>
       * @param index The index of the value to return.
       * @return The bytes of the references at the given index.
       */
      public com.google.protobuf.ByteString
          getReferencesBytes(int index) {
        return references_.getByteString(index);
      }
      /**
       * <code>repeated string references = 6;</code>
       * @param index The index to set the value at.
       * @param value The references to set.
       * @return This builder for chaining.
       */
      public Builder setReferences(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureReferencesIsMutable();
        references_.set(index, value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string references = 6;</code>
       * @param value The references to add.
       * @return This builder for chaining.
       */
      public Builder addReferences(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureReferencesIsMutable();
        references_.add(value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string references = 6;</code>
       * @param values The references to add.
       * @return This builder for chaining.
       */
      public Builder addAllReferences(
          java.lang.Iterable<java.lang.String> values) {
        ensureReferencesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, references_);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string references = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearReferences() {
        references_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string references = 6;</code>
       * @param value The bytes of the references to add.
       * @return This builder for chaining.
       */
      public Builder addReferencesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureReferencesIsMutable();
        references_.add(value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Issue)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Issue)
    private static final cyclonedx.v1_3.Bom13.Issue DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Issue();
    }

    public static cyclonedx.v1_3.Bom13.Issue getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Issue>
        PARSER = new com.google.protobuf.AbstractParser<Issue>() {
      @java.lang.Override
      public Issue parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Issue> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Issue> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Issue getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SourceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Source)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <pre>
     * The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The url of the issue documentation as provided by the source
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return Whether the url field is set.
     */
    boolean hasUrl();
    /**
     * <pre>
     * The url of the issue documentation as provided by the source
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return The url.
     */
    java.lang.String getUrl();
    /**
     * <pre>
     * The url of the issue documentation as provided by the source
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return The bytes for url.
     */
    com.google.protobuf.ByteString
        getUrlBytes();
  }
  /**
   * <pre>
   * The source of the issue where it is documented.
   * </pre>
   *
   * Protobuf type {@code cyclonedx.v1_3.Source}
   */
  public static final class Source extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Source)
      SourceOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Source.class.getName());
    }
    // Use Source.newBuilder() to construct.
    private Source(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Source() {
      name_ = "";
      url_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Source_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Source_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Source.class, cyclonedx.v1_3.Bom13.Source.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int URL_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object url_ = "";
    /**
     * <pre>
     * The url of the issue documentation as provided by the source
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return Whether the url field is set.
     */
    @java.lang.Override
    public boolean hasUrl() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The url of the issue documentation as provided by the source
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return The url.
     */
    @java.lang.Override
    public java.lang.String getUrl() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        url_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The url of the issue documentation as provided by the source
     * </pre>
     *
     * <code>optional string url = 2;</code>
     * @return The bytes for url.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUrlBytes() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        url_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, url_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, url_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Source)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Source other = (cyclonedx.v1_3.Bom13.Source) obj;

      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (!getName()
            .equals(other.getName())) return false;
      }
      if (hasUrl() != other.hasUrl()) return false;
      if (hasUrl()) {
        if (!getUrl()
            .equals(other.getUrl())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasUrl()) {
        hash = (37 * hash) + URL_FIELD_NUMBER;
        hash = (53 * hash) + getUrl().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Source parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Source parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Source parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Source parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Source parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Source parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Source parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Source parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Source parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Source parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Source parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Source parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Source prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The source of the issue where it is documented.
     * </pre>
     *
     * Protobuf type {@code cyclonedx.v1_3.Source}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Source)
        cyclonedx.v1_3.Bom13.SourceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Source_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Source_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Source.class, cyclonedx.v1_3.Bom13.Source.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Source.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        name_ = "";
        url_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Source_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Source getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Source.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Source build() {
        cyclonedx.v1_3.Bom13.Source result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Source buildPartial() {
        cyclonedx.v1_3.Bom13.Source result = new cyclonedx.v1_3.Bom13.Source(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Source result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.url_ = url_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Source) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Source)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Source other) {
        if (other == cyclonedx.v1_3.Bom13.Source.getDefaultInstance()) return this;
        if (other.hasName()) {
          name_ = other.name_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasUrl()) {
          url_ = other.url_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                url_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return Whether the name field is set.
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object url_ = "";
      /**
       * <pre>
       * The url of the issue documentation as provided by the source
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @return Whether the url field is set.
       */
      public boolean hasUrl() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The url of the issue documentation as provided by the source
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @return The url.
       */
      public java.lang.String getUrl() {
        java.lang.Object ref = url_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          url_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The url of the issue documentation as provided by the source
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @return The bytes for url.
       */
      public com.google.protobuf.ByteString
          getUrlBytes() {
        java.lang.Object ref = url_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          url_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The url of the issue documentation as provided by the source
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @param value The url to set.
       * @return This builder for chaining.
       */
      public Builder setUrl(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        url_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The url of the issue documentation as provided by the source
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearUrl() {
        url_ = getDefaultInstance().getUrl();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The url of the issue documentation as provided by the source
       * </pre>
       *
       * <code>optional string url = 2;</code>
       * @param value The bytes for url to set.
       * @return This builder for chaining.
       */
      public Builder setUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        url_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Source)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Source)
    private static final cyclonedx.v1_3.Bom13.Source DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Source();
    }

    public static cyclonedx.v1_3.Bom13.Source getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Source>
        PARSER = new com.google.protobuf.AbstractParser<Source>() {
      @java.lang.Override
      public Source parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Source> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Source> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Source getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LicenseChoiceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.LicenseChoice)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.cyclonedx.v1_3.License license = 1;</code>
     * @return Whether the license field is set.
     */
    boolean hasLicense();
    /**
     * <code>.cyclonedx.v1_3.License license = 1;</code>
     * @return The license.
     */
    cyclonedx.v1_3.Bom13.License getLicense();
    /**
     * <code>.cyclonedx.v1_3.License license = 1;</code>
     */
    cyclonedx.v1_3.Bom13.LicenseOrBuilder getLicenseOrBuilder();

    /**
     * <code>string expression = 2;</code>
     * @return Whether the expression field is set.
     */
    boolean hasExpression();
    /**
     * <code>string expression = 2;</code>
     * @return The expression.
     */
    java.lang.String getExpression();
    /**
     * <code>string expression = 2;</code>
     * @return The bytes for expression.
     */
    com.google.protobuf.ByteString
        getExpressionBytes();

    cyclonedx.v1_3.Bom13.LicenseChoice.ChoiceCase getChoiceCase();
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.LicenseChoice}
   */
  public static final class LicenseChoice extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.LicenseChoice)
      LicenseChoiceOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        LicenseChoice.class.getName());
    }
    // Use LicenseChoice.newBuilder() to construct.
    private LicenseChoice(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private LicenseChoice() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_LicenseChoice_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_LicenseChoice_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.LicenseChoice.class, cyclonedx.v1_3.Bom13.LicenseChoice.Builder.class);
    }

    private int choiceCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object choice_;
    public enum ChoiceCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      LICENSE(1),
      EXPRESSION(2),
      CHOICE_NOT_SET(0);
      private final int value;
      private ChoiceCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ChoiceCase valueOf(int value) {
        return forNumber(value);
      }

      public static ChoiceCase forNumber(int value) {
        switch (value) {
          case 1: return LICENSE;
          case 2: return EXPRESSION;
          case 0: return CHOICE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ChoiceCase
    getChoiceCase() {
      return ChoiceCase.forNumber(
          choiceCase_);
    }

    public static final int LICENSE_FIELD_NUMBER = 1;
    /**
     * <code>.cyclonedx.v1_3.License license = 1;</code>
     * @return Whether the license field is set.
     */
    @java.lang.Override
    public boolean hasLicense() {
      return choiceCase_ == 1;
    }
    /**
     * <code>.cyclonedx.v1_3.License license = 1;</code>
     * @return The license.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.License getLicense() {
      if (choiceCase_ == 1) {
         return (cyclonedx.v1_3.Bom13.License) choice_;
      }
      return cyclonedx.v1_3.Bom13.License.getDefaultInstance();
    }
    /**
     * <code>.cyclonedx.v1_3.License license = 1;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.LicenseOrBuilder getLicenseOrBuilder() {
      if (choiceCase_ == 1) {
         return (cyclonedx.v1_3.Bom13.License) choice_;
      }
      return cyclonedx.v1_3.Bom13.License.getDefaultInstance();
    }

    public static final int EXPRESSION_FIELD_NUMBER = 2;
    /**
     * <code>string expression = 2;</code>
     * @return Whether the expression field is set.
     */
    public boolean hasExpression() {
      return choiceCase_ == 2;
    }
    /**
     * <code>string expression = 2;</code>
     * @return The expression.
     */
    public java.lang.String getExpression() {
      java.lang.Object ref = "";
      if (choiceCase_ == 2) {
        ref = choice_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (choiceCase_ == 2) {
          choice_ = s;
        }
        return s;
      }
    }
    /**
     * <code>string expression = 2;</code>
     * @return The bytes for expression.
     */
    public com.google.protobuf.ByteString
        getExpressionBytes() {
      java.lang.Object ref = "";
      if (choiceCase_ == 2) {
        ref = choice_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (choiceCase_ == 2) {
          choice_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (choiceCase_ == 1) {
        output.writeMessage(1, (cyclonedx.v1_3.Bom13.License) choice_);
      }
      if (choiceCase_ == 2) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, choice_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (choiceCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (cyclonedx.v1_3.Bom13.License) choice_);
      }
      if (choiceCase_ == 2) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, choice_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.LicenseChoice)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.LicenseChoice other = (cyclonedx.v1_3.Bom13.LicenseChoice) obj;

      if (!getChoiceCase().equals(other.getChoiceCase())) return false;
      switch (choiceCase_) {
        case 1:
          if (!getLicense()
              .equals(other.getLicense())) return false;
          break;
        case 2:
          if (!getExpression()
              .equals(other.getExpression())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (choiceCase_) {
        case 1:
          hash = (37 * hash) + LICENSE_FIELD_NUMBER;
          hash = (53 * hash) + getLicense().hashCode();
          break;
        case 2:
          hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
          hash = (53 * hash) + getExpression().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.LicenseChoice parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.LicenseChoice parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.LicenseChoice parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.LicenseChoice parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.LicenseChoice parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.LicenseChoice parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.LicenseChoice parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.LicenseChoice parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.LicenseChoice parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.LicenseChoice parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.LicenseChoice parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.LicenseChoice parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.LicenseChoice prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.LicenseChoice}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.LicenseChoice)
        cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_LicenseChoice_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_LicenseChoice_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.LicenseChoice.class, cyclonedx.v1_3.Bom13.LicenseChoice.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.LicenseChoice.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (licenseBuilder_ != null) {
          licenseBuilder_.clear();
        }
        choiceCase_ = 0;
        choice_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_LicenseChoice_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.LicenseChoice getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.LicenseChoice.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.LicenseChoice build() {
        cyclonedx.v1_3.Bom13.LicenseChoice result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.LicenseChoice buildPartial() {
        cyclonedx.v1_3.Bom13.LicenseChoice result = new cyclonedx.v1_3.Bom13.LicenseChoice(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.LicenseChoice result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(cyclonedx.v1_3.Bom13.LicenseChoice result) {
        result.choiceCase_ = choiceCase_;
        result.choice_ = this.choice_;
        if (choiceCase_ == 1 &&
            licenseBuilder_ != null) {
          result.choice_ = licenseBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.LicenseChoice) {
          return mergeFrom((cyclonedx.v1_3.Bom13.LicenseChoice)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.LicenseChoice other) {
        if (other == cyclonedx.v1_3.Bom13.LicenseChoice.getDefaultInstance()) return this;
        switch (other.getChoiceCase()) {
          case LICENSE: {
            mergeLicense(other.getLicense());
            break;
          }
          case EXPRESSION: {
            choiceCase_ = 2;
            choice_ = other.choice_;
            onChanged();
            break;
          }
          case CHOICE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getLicenseFieldBuilder().getBuilder(),
                    extensionRegistry);
                choiceCase_ = 1;
                break;
              } // case 10
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();
                choiceCase_ = 2;
                choice_ = s;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int choiceCase_ = 0;
      private java.lang.Object choice_;
      public ChoiceCase
          getChoiceCase() {
        return ChoiceCase.forNumber(
            choiceCase_);
      }

      public Builder clearChoice() {
        choiceCase_ = 0;
        choice_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.License, cyclonedx.v1_3.Bom13.License.Builder, cyclonedx.v1_3.Bom13.LicenseOrBuilder> licenseBuilder_;
      /**
       * <code>.cyclonedx.v1_3.License license = 1;</code>
       * @return Whether the license field is set.
       */
      @java.lang.Override
      public boolean hasLicense() {
        return choiceCase_ == 1;
      }
      /**
       * <code>.cyclonedx.v1_3.License license = 1;</code>
       * @return The license.
       */
      @java.lang.Override
      public cyclonedx.v1_3.Bom13.License getLicense() {
        if (licenseBuilder_ == null) {
          if (choiceCase_ == 1) {
            return (cyclonedx.v1_3.Bom13.License) choice_;
          }
          return cyclonedx.v1_3.Bom13.License.getDefaultInstance();
        } else {
          if (choiceCase_ == 1) {
            return licenseBuilder_.getMessage();
          }
          return cyclonedx.v1_3.Bom13.License.getDefaultInstance();
        }
      }
      /**
       * <code>.cyclonedx.v1_3.License license = 1;</code>
       */
      public Builder setLicense(cyclonedx.v1_3.Bom13.License value) {
        if (licenseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          choice_ = value;
          onChanged();
        } else {
          licenseBuilder_.setMessage(value);
        }
        choiceCase_ = 1;
        return this;
      }
      /**
       * <code>.cyclonedx.v1_3.License license = 1;</code>
       */
      public Builder setLicense(
          cyclonedx.v1_3.Bom13.License.Builder builderForValue) {
        if (licenseBuilder_ == null) {
          choice_ = builderForValue.build();
          onChanged();
        } else {
          licenseBuilder_.setMessage(builderForValue.build());
        }
        choiceCase_ = 1;
        return this;
      }
      /**
       * <code>.cyclonedx.v1_3.License license = 1;</code>
       */
      public Builder mergeLicense(cyclonedx.v1_3.Bom13.License value) {
        if (licenseBuilder_ == null) {
          if (choiceCase_ == 1 &&
              choice_ != cyclonedx.v1_3.Bom13.License.getDefaultInstance()) {
            choice_ = cyclonedx.v1_3.Bom13.License.newBuilder((cyclonedx.v1_3.Bom13.License) choice_)
                .mergeFrom(value).buildPartial();
          } else {
            choice_ = value;
          }
          onChanged();
        } else {
          if (choiceCase_ == 1) {
            licenseBuilder_.mergeFrom(value);
          } else {
            licenseBuilder_.setMessage(value);
          }
        }
        choiceCase_ = 1;
        return this;
      }
      /**
       * <code>.cyclonedx.v1_3.License license = 1;</code>
       */
      public Builder clearLicense() {
        if (licenseBuilder_ == null) {
          if (choiceCase_ == 1) {
            choiceCase_ = 0;
            choice_ = null;
            onChanged();
          }
        } else {
          if (choiceCase_ == 1) {
            choiceCase_ = 0;
            choice_ = null;
          }
          licenseBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.cyclonedx.v1_3.License license = 1;</code>
       */
      public cyclonedx.v1_3.Bom13.License.Builder getLicenseBuilder() {
        return getLicenseFieldBuilder().getBuilder();
      }
      /**
       * <code>.cyclonedx.v1_3.License license = 1;</code>
       */
      @java.lang.Override
      public cyclonedx.v1_3.Bom13.LicenseOrBuilder getLicenseOrBuilder() {
        if ((choiceCase_ == 1) && (licenseBuilder_ != null)) {
          return licenseBuilder_.getMessageOrBuilder();
        } else {
          if (choiceCase_ == 1) {
            return (cyclonedx.v1_3.Bom13.License) choice_;
          }
          return cyclonedx.v1_3.Bom13.License.getDefaultInstance();
        }
      }
      /**
       * <code>.cyclonedx.v1_3.License license = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.License, cyclonedx.v1_3.Bom13.License.Builder, cyclonedx.v1_3.Bom13.LicenseOrBuilder> 
          getLicenseFieldBuilder() {
        if (licenseBuilder_ == null) {
          if (!(choiceCase_ == 1)) {
            choice_ = cyclonedx.v1_3.Bom13.License.getDefaultInstance();
          }
          licenseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.License, cyclonedx.v1_3.Bom13.License.Builder, cyclonedx.v1_3.Bom13.LicenseOrBuilder>(
                  (cyclonedx.v1_3.Bom13.License) choice_,
                  getParentForChildren(),
                  isClean());
          choice_ = null;
        }
        choiceCase_ = 1;
        onChanged();
        return licenseBuilder_;
      }

      /**
       * <code>string expression = 2;</code>
       * @return Whether the expression field is set.
       */
      @java.lang.Override
      public boolean hasExpression() {
        return choiceCase_ == 2;
      }
      /**
       * <code>string expression = 2;</code>
       * @return The expression.
       */
      @java.lang.Override
      public java.lang.String getExpression() {
        java.lang.Object ref = "";
        if (choiceCase_ == 2) {
          ref = choice_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (choiceCase_ == 2) {
            choice_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string expression = 2;</code>
       * @return The bytes for expression.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getExpressionBytes() {
        java.lang.Object ref = "";
        if (choiceCase_ == 2) {
          ref = choice_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (choiceCase_ == 2) {
            choice_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string expression = 2;</code>
       * @param value The expression to set.
       * @return This builder for chaining.
       */
      public Builder setExpression(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        choiceCase_ = 2;
        choice_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string expression = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearExpression() {
        if (choiceCase_ == 2) {
          choiceCase_ = 0;
          choice_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <code>string expression = 2;</code>
       * @param value The bytes for expression to set.
       * @return This builder for chaining.
       */
      public Builder setExpressionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        choiceCase_ = 2;
        choice_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.LicenseChoice)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.LicenseChoice)
    private static final cyclonedx.v1_3.Bom13.LicenseChoice DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.LicenseChoice();
    }

    public static cyclonedx.v1_3.Bom13.LicenseChoice getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LicenseChoice>
        PARSER = new com.google.protobuf.AbstractParser<LicenseChoice>() {
      @java.lang.Override
      public LicenseChoice parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<LicenseChoice> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LicenseChoice> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.LicenseChoice getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LicenseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.License)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A valid SPDX license ID
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <pre>
     * A valid SPDX license ID
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * A valid SPDX license ID
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * If SPDX does not define the license used, this field may be used to provide the license name
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <pre>
     * If SPDX does not define the license used, this field may be used to provide the license name
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * If SPDX does not define the license used, this field may be used to provide the license name
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Specifies the optional full text of the attachment
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
     * @return Whether the text field is set.
     */
    boolean hasText();
    /**
     * <pre>
     * Specifies the optional full text of the attachment
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
     * @return The text.
     */
    cyclonedx.v1_3.Bom13.AttachedText getText();
    /**
     * <pre>
     * Specifies the optional full text of the attachment
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
     */
    cyclonedx.v1_3.Bom13.AttachedTextOrBuilder getTextOrBuilder();

    /**
     * <pre>
     * The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
     * </pre>
     *
     * <code>optional string url = 4;</code>
     * @return Whether the url field is set.
     */
    boolean hasUrl();
    /**
     * <pre>
     * The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
     * </pre>
     *
     * <code>optional string url = 4;</code>
     * @return The url.
     */
    java.lang.String getUrl();
    /**
     * <pre>
     * The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
     * </pre>
     *
     * <code>optional string url = 4;</code>
     * @return The bytes for url.
     */
    com.google.protobuf.ByteString
        getUrlBytes();

    cyclonedx.v1_3.Bom13.License.LicenseCase getLicenseCase();
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.License}
   */
  public static final class License extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.License)
      LicenseOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        License.class.getName());
    }
    // Use License.newBuilder() to construct.
    private License(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private License() {
      url_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_License_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_License_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.License.class, cyclonedx.v1_3.Bom13.License.Builder.class);
    }

    private int bitField0_;
    private int licenseCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object license_;
    public enum LicenseCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      ID(1),
      NAME(2),
      LICENSE_NOT_SET(0);
      private final int value;
      private LicenseCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LicenseCase valueOf(int value) {
        return forNumber(value);
      }

      public static LicenseCase forNumber(int value) {
        switch (value) {
          case 1: return ID;
          case 2: return NAME;
          case 0: return LICENSE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public LicenseCase
    getLicenseCase() {
      return LicenseCase.forNumber(
          licenseCase_);
    }

    public static final int ID_FIELD_NUMBER = 1;
    /**
     * <pre>
     * A valid SPDX license ID
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return Whether the id field is set.
     */
    public boolean hasId() {
      return licenseCase_ == 1;
    }
    /**
     * <pre>
     * A valid SPDX license ID
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    public java.lang.String getId() {
      java.lang.Object ref = "";
      if (licenseCase_ == 1) {
        ref = license_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (licenseCase_ == 1) {
          license_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * A valid SPDX license ID
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = "";
      if (licenseCase_ == 1) {
        ref = license_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (licenseCase_ == 1) {
          license_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 2;
    /**
     * <pre>
     * If SPDX does not define the license used, this field may be used to provide the license name
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return Whether the name field is set.
     */
    public boolean hasName() {
      return licenseCase_ == 2;
    }
    /**
     * <pre>
     * If SPDX does not define the license used, this field may be used to provide the license name
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = "";
      if (licenseCase_ == 2) {
        ref = license_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (licenseCase_ == 2) {
          license_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * If SPDX does not define the license used, this field may be used to provide the license name
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = "";
      if (licenseCase_ == 2) {
        ref = license_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (licenseCase_ == 2) {
          license_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TEXT_FIELD_NUMBER = 3;
    private cyclonedx.v1_3.Bom13.AttachedText text_;
    /**
     * <pre>
     * Specifies the optional full text of the attachment
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
     * @return Whether the text field is set.
     */
    @java.lang.Override
    public boolean hasText() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Specifies the optional full text of the attachment
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
     * @return The text.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.AttachedText getText() {
      return text_ == null ? cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance() : text_;
    }
    /**
     * <pre>
     * Specifies the optional full text of the attachment
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.AttachedTextOrBuilder getTextOrBuilder() {
      return text_ == null ? cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance() : text_;
    }

    public static final int URL_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object url_ = "";
    /**
     * <pre>
     * The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
     * </pre>
     *
     * <code>optional string url = 4;</code>
     * @return Whether the url field is set.
     */
    @java.lang.Override
    public boolean hasUrl() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
     * </pre>
     *
     * <code>optional string url = 4;</code>
     * @return The url.
     */
    @java.lang.Override
    public java.lang.String getUrl() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        url_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
     * </pre>
     *
     * <code>optional string url = 4;</code>
     * @return The bytes for url.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUrlBytes() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        url_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (licenseCase_ == 1) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, license_);
      }
      if (licenseCase_ == 2) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, license_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(3, getText());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 4, url_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (licenseCase_ == 1) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, license_);
      }
      if (licenseCase_ == 2) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, license_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getText());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(4, url_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.License)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.License other = (cyclonedx.v1_3.Bom13.License) obj;

      if (hasText() != other.hasText()) return false;
      if (hasText()) {
        if (!getText()
            .equals(other.getText())) return false;
      }
      if (hasUrl() != other.hasUrl()) return false;
      if (hasUrl()) {
        if (!getUrl()
            .equals(other.getUrl())) return false;
      }
      if (!getLicenseCase().equals(other.getLicenseCase())) return false;
      switch (licenseCase_) {
        case 1:
          if (!getId()
              .equals(other.getId())) return false;
          break;
        case 2:
          if (!getName()
              .equals(other.getName())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasText()) {
        hash = (37 * hash) + TEXT_FIELD_NUMBER;
        hash = (53 * hash) + getText().hashCode();
      }
      if (hasUrl()) {
        hash = (37 * hash) + URL_FIELD_NUMBER;
        hash = (53 * hash) + getUrl().hashCode();
      }
      switch (licenseCase_) {
        case 1:
          hash = (37 * hash) + ID_FIELD_NUMBER;
          hash = (53 * hash) + getId().hashCode();
          break;
        case 2:
          hash = (37 * hash) + NAME_FIELD_NUMBER;
          hash = (53 * hash) + getName().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.License parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.License parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.License parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.License parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.License parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.License parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.License parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.License parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.License parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.License parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.License parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.License parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.License prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.License}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.License)
        cyclonedx.v1_3.Bom13.LicenseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_License_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_License_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.License.class, cyclonedx.v1_3.Bom13.License.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.License.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTextFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        text_ = null;
        if (textBuilder_ != null) {
          textBuilder_.dispose();
          textBuilder_ = null;
        }
        url_ = "";
        licenseCase_ = 0;
        license_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_License_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.License getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.License.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.License build() {
        cyclonedx.v1_3.Bom13.License result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.License buildPartial() {
        cyclonedx.v1_3.Bom13.License result = new cyclonedx.v1_3.Bom13.License(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.License result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.text_ = textBuilder_ == null
              ? text_
              : textBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.url_ = url_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      private void buildPartialOneofs(cyclonedx.v1_3.Bom13.License result) {
        result.licenseCase_ = licenseCase_;
        result.license_ = this.license_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.License) {
          return mergeFrom((cyclonedx.v1_3.Bom13.License)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.License other) {
        if (other == cyclonedx.v1_3.Bom13.License.getDefaultInstance()) return this;
        if (other.hasText()) {
          mergeText(other.getText());
        }
        if (other.hasUrl()) {
          url_ = other.url_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        switch (other.getLicenseCase()) {
          case ID: {
            licenseCase_ = 1;
            license_ = other.license_;
            onChanged();
            break;
          }
          case NAME: {
            licenseCase_ = 2;
            license_ = other.license_;
            onChanged();
            break;
          }
          case LICENSE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();
                licenseCase_ = 1;
                license_ = s;
                break;
              } // case 10
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();
                licenseCase_ = 2;
                license_ = s;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getTextFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                url_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int licenseCase_ = 0;
      private java.lang.Object license_;
      public LicenseCase
          getLicenseCase() {
        return LicenseCase.forNumber(
            licenseCase_);
      }

      public Builder clearLicense() {
        licenseCase_ = 0;
        license_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      /**
       * <pre>
       * A valid SPDX license ID
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return Whether the id field is set.
       */
      @java.lang.Override
      public boolean hasId() {
        return licenseCase_ == 1;
      }
      /**
       * <pre>
       * A valid SPDX license ID
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public java.lang.String getId() {
        java.lang.Object ref = "";
        if (licenseCase_ == 1) {
          ref = license_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (licenseCase_ == 1) {
            license_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A valid SPDX license ID
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return The bytes for id.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = "";
        if (licenseCase_ == 1) {
          ref = license_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (licenseCase_ == 1) {
            license_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A valid SPDX license ID
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        licenseCase_ = 1;
        license_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A valid SPDX license ID
       * </pre>
       *
       * <code>string id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        if (licenseCase_ == 1) {
          licenseCase_ = 0;
          license_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * A valid SPDX license ID
       * </pre>
       *
       * <code>string id = 1;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        licenseCase_ = 1;
        license_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * If SPDX does not define the license used, this field may be used to provide the license name
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return licenseCase_ == 2;
      }
      /**
       * <pre>
       * If SPDX does not define the license used, this field may be used to provide the license name
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The name.
       */
      @java.lang.Override
      public java.lang.String getName() {
        java.lang.Object ref = "";
        if (licenseCase_ == 2) {
          ref = license_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (licenseCase_ == 2) {
            license_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * If SPDX does not define the license used, this field may be used to provide the license name
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The bytes for name.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = "";
        if (licenseCase_ == 2) {
          ref = license_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (licenseCase_ == 2) {
            license_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * If SPDX does not define the license used, this field may be used to provide the license name
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        licenseCase_ = 2;
        license_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If SPDX does not define the license used, this field may be used to provide the license name
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        if (licenseCase_ == 2) {
          licenseCase_ = 0;
          license_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * If SPDX does not define the license used, this field may be used to provide the license name
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        licenseCase_ = 2;
        license_ = value;
        onChanged();
        return this;
      }

      private cyclonedx.v1_3.Bom13.AttachedText text_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.AttachedText, cyclonedx.v1_3.Bom13.AttachedText.Builder, cyclonedx.v1_3.Bom13.AttachedTextOrBuilder> textBuilder_;
      /**
       * <pre>
       * Specifies the optional full text of the attachment
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
       * @return Whether the text field is set.
       */
      public boolean hasText() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Specifies the optional full text of the attachment
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
       * @return The text.
       */
      public cyclonedx.v1_3.Bom13.AttachedText getText() {
        if (textBuilder_ == null) {
          return text_ == null ? cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance() : text_;
        } else {
          return textBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the optional full text of the attachment
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
       */
      public Builder setText(cyclonedx.v1_3.Bom13.AttachedText value) {
        if (textBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          text_ = value;
        } else {
          textBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the optional full text of the attachment
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
       */
      public Builder setText(
          cyclonedx.v1_3.Bom13.AttachedText.Builder builderForValue) {
        if (textBuilder_ == null) {
          text_ = builderForValue.build();
        } else {
          textBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the optional full text of the attachment
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
       */
      public Builder mergeText(cyclonedx.v1_3.Bom13.AttachedText value) {
        if (textBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            text_ != null &&
            text_ != cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance()) {
            getTextBuilder().mergeFrom(value);
          } else {
            text_ = value;
          }
        } else {
          textBuilder_.mergeFrom(value);
        }
        if (text_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the optional full text of the attachment
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
       */
      public Builder clearText() {
        bitField0_ = (bitField0_ & ~0x00000004);
        text_ = null;
        if (textBuilder_ != null) {
          textBuilder_.dispose();
          textBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the optional full text of the attachment
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.AttachedText.Builder getTextBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getTextFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the optional full text of the attachment
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.AttachedTextOrBuilder getTextOrBuilder() {
        if (textBuilder_ != null) {
          return textBuilder_.getMessageOrBuilder();
        } else {
          return text_ == null ?
              cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance() : text_;
        }
      }
      /**
       * <pre>
       * Specifies the optional full text of the attachment
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.AttachedText, cyclonedx.v1_3.Bom13.AttachedText.Builder, cyclonedx.v1_3.Bom13.AttachedTextOrBuilder> 
          getTextFieldBuilder() {
        if (textBuilder_ == null) {
          textBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.AttachedText, cyclonedx.v1_3.Bom13.AttachedText.Builder, cyclonedx.v1_3.Bom13.AttachedTextOrBuilder>(
                  getText(),
                  getParentForChildren(),
                  isClean());
          text_ = null;
        }
        return textBuilder_;
      }

      private java.lang.Object url_ = "";
      /**
       * <pre>
       * The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
       * </pre>
       *
       * <code>optional string url = 4;</code>
       * @return Whether the url field is set.
       */
      public boolean hasUrl() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
       * </pre>
       *
       * <code>optional string url = 4;</code>
       * @return The url.
       */
      public java.lang.String getUrl() {
        java.lang.Object ref = url_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          url_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
       * </pre>
       *
       * <code>optional string url = 4;</code>
       * @return The bytes for url.
       */
      public com.google.protobuf.ByteString
          getUrlBytes() {
        java.lang.Object ref = url_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          url_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
       * </pre>
       *
       * <code>optional string url = 4;</code>
       * @param value The url to set.
       * @return This builder for chaining.
       */
      public Builder setUrl(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        url_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
       * </pre>
       *
       * <code>optional string url = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearUrl() {
        url_ = getDefaultInstance().getUrl();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
       * </pre>
       *
       * <code>optional string url = 4;</code>
       * @param value The bytes for url to set.
       * @return This builder for chaining.
       */
      public Builder setUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        url_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.License)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.License)
    private static final cyclonedx.v1_3.Bom13.License DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.License();
    }

    public static cyclonedx.v1_3.Bom13.License getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<License>
        PARSER = new com.google.protobuf.AbstractParser<License>() {
      @java.lang.Override
      public License parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<License> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<License> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.License getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Metadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The date and time (timestamp) when the document was created.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
     * @return Whether the timestamp field is set.
     */
    boolean hasTimestamp();
    /**
     * <pre>
     * The date and time (timestamp) when the document was created.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
     * @return The timestamp.
     */
    com.google.protobuf.Timestamp getTimestamp();
    /**
     * <pre>
     * The date and time (timestamp) when the document was created.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
     */
    com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder();

    /**
     * <pre>
     * The tool(s) used in the creation of the BOM.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Tool> 
        getToolsList();
    /**
     * <pre>
     * The tool(s) used in the creation of the BOM.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
     */
    cyclonedx.v1_3.Bom13.Tool getTools(int index);
    /**
     * <pre>
     * The tool(s) used in the creation of the BOM.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
     */
    int getToolsCount();
    /**
     * <pre>
     * The tool(s) used in the creation of the BOM.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.ToolOrBuilder> 
        getToolsOrBuilderList();
    /**
     * <pre>
     * The tool(s) used in the creation of the BOM.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
     */
    cyclonedx.v1_3.Bom13.ToolOrBuilder getToolsOrBuilder(
        int index);

    /**
     * <pre>
     * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.OrganizationalContact> 
        getAuthorsList();
    /**
     * <pre>
     * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
     */
    cyclonedx.v1_3.Bom13.OrganizationalContact getAuthors(int index);
    /**
     * <pre>
     * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
     */
    int getAuthorsCount();
    /**
     * <pre>
     * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder> 
        getAuthorsOrBuilderList();
    /**
     * <pre>
     * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
     */
    cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder getAuthorsOrBuilder(
        int index);

    /**
     * <pre>
     * The component that the BOM describes.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
     * @return Whether the component field is set.
     */
    boolean hasComponent();
    /**
     * <pre>
     * The component that the BOM describes.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
     * @return The component.
     */
    cyclonedx.v1_3.Bom13.Component getComponent();
    /**
     * <pre>
     * The component that the BOM describes.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
     */
    cyclonedx.v1_3.Bom13.ComponentOrBuilder getComponentOrBuilder();

    /**
     * <pre>
     * The organization that manufactured the component that the BOM describes.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
     * @return Whether the manufacture field is set.
     */
    boolean hasManufacture();
    /**
     * <pre>
     * The organization that manufactured the component that the BOM describes.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
     * @return The manufacture.
     */
    cyclonedx.v1_3.Bom13.OrganizationalEntity getManufacture();
    /**
     * <pre>
     * The organization that manufactured the component that the BOM describes.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
     */
    cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder getManufactureOrBuilder();

    /**
     * <pre>
     * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
     * @return Whether the supplier field is set.
     */
    boolean hasSupplier();
    /**
     * <pre>
     * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
     * @return The supplier.
     */
    cyclonedx.v1_3.Bom13.OrganizationalEntity getSupplier();
    /**
     * <pre>
     * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
     */
    cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder getSupplierOrBuilder();

    /**
     * <pre>
     * The license information for the BOM document
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
     * @return Whether the licenses field is set.
     */
    boolean hasLicenses();
    /**
     * <pre>
     * The license information for the BOM document
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
     * @return The licenses.
     */
    cyclonedx.v1_3.Bom13.LicenseChoice getLicenses();
    /**
     * <pre>
     * The license information for the BOM document
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
     */
    cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder getLicensesOrBuilder();

    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Property> 
        getPropertiesList();
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
     */
    cyclonedx.v1_3.Bom13.Property getProperties(int index);
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
     */
    int getPropertiesCount();
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.PropertyOrBuilder> 
        getPropertiesOrBuilderList();
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
     */
    cyclonedx.v1_3.Bom13.PropertyOrBuilder getPropertiesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.Metadata}
   */
  public static final class Metadata extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Metadata)
      MetadataOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Metadata.class.getName());
    }
    // Use Metadata.newBuilder() to construct.
    private Metadata(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Metadata() {
      tools_ = java.util.Collections.emptyList();
      authors_ = java.util.Collections.emptyList();
      properties_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Metadata_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Metadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Metadata.class, cyclonedx.v1_3.Bom13.Metadata.Builder.class);
    }

    private int bitField0_;
    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private com.google.protobuf.Timestamp timestamp_;
    /**
     * <pre>
     * The date and time (timestamp) when the document was created.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
     * @return Whether the timestamp field is set.
     */
    @java.lang.Override
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The date and time (timestamp) when the document was created.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public com.google.protobuf.Timestamp getTimestamp() {
      return timestamp_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : timestamp_;
    }
    /**
     * <pre>
     * The date and time (timestamp) when the document was created.
     * </pre>
     *
     * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder() {
      return timestamp_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : timestamp_;
    }

    public static final int TOOLS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Tool> tools_;
    /**
     * <pre>
     * The tool(s) used in the creation of the BOM.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Tool> getToolsList() {
      return tools_;
    }
    /**
     * <pre>
     * The tool(s) used in the creation of the BOM.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.ToolOrBuilder> 
        getToolsOrBuilderList() {
      return tools_;
    }
    /**
     * <pre>
     * The tool(s) used in the creation of the BOM.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
     */
    @java.lang.Override
    public int getToolsCount() {
      return tools_.size();
    }
    /**
     * <pre>
     * The tool(s) used in the creation of the BOM.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Tool getTools(int index) {
      return tools_.get(index);
    }
    /**
     * <pre>
     * The tool(s) used in the creation of the BOM.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ToolOrBuilder getToolsOrBuilder(
        int index) {
      return tools_.get(index);
    }

    public static final int AUTHORS_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.OrganizationalContact> authors_;
    /**
     * <pre>
     * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.OrganizationalContact> getAuthorsList() {
      return authors_;
    }
    /**
     * <pre>
     * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder> 
        getAuthorsOrBuilderList() {
      return authors_;
    }
    /**
     * <pre>
     * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
     */
    @java.lang.Override
    public int getAuthorsCount() {
      return authors_.size();
    }
    /**
     * <pre>
     * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.OrganizationalContact getAuthors(int index) {
      return authors_.get(index);
    }
    /**
     * <pre>
     * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder getAuthorsOrBuilder(
        int index) {
      return authors_.get(index);
    }

    public static final int COMPONENT_FIELD_NUMBER = 4;
    private cyclonedx.v1_3.Bom13.Component component_;
    /**
     * <pre>
     * The component that the BOM describes.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
     * @return Whether the component field is set.
     */
    @java.lang.Override
    public boolean hasComponent() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The component that the BOM describes.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
     * @return The component.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Component getComponent() {
      return component_ == null ? cyclonedx.v1_3.Bom13.Component.getDefaultInstance() : component_;
    }
    /**
     * <pre>
     * The component that the BOM describes.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ComponentOrBuilder getComponentOrBuilder() {
      return component_ == null ? cyclonedx.v1_3.Bom13.Component.getDefaultInstance() : component_;
    }

    public static final int MANUFACTURE_FIELD_NUMBER = 5;
    private cyclonedx.v1_3.Bom13.OrganizationalEntity manufacture_;
    /**
     * <pre>
     * The organization that manufactured the component that the BOM describes.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
     * @return Whether the manufacture field is set.
     */
    @java.lang.Override
    public boolean hasManufacture() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The organization that manufactured the component that the BOM describes.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
     * @return The manufacture.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.OrganizationalEntity getManufacture() {
      return manufacture_ == null ? cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : manufacture_;
    }
    /**
     * <pre>
     * The organization that manufactured the component that the BOM describes.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder getManufactureOrBuilder() {
      return manufacture_ == null ? cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : manufacture_;
    }

    public static final int SUPPLIER_FIELD_NUMBER = 6;
    private cyclonedx.v1_3.Bom13.OrganizationalEntity supplier_;
    /**
     * <pre>
     * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
     * @return Whether the supplier field is set.
     */
    @java.lang.Override
    public boolean hasSupplier() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
     * @return The supplier.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.OrganizationalEntity getSupplier() {
      return supplier_ == null ? cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : supplier_;
    }
    /**
     * <pre>
     * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder getSupplierOrBuilder() {
      return supplier_ == null ? cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : supplier_;
    }

    public static final int LICENSES_FIELD_NUMBER = 7;
    private cyclonedx.v1_3.Bom13.LicenseChoice licenses_;
    /**
     * <pre>
     * The license information for the BOM document
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
     * @return Whether the licenses field is set.
     */
    @java.lang.Override
    public boolean hasLicenses() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The license information for the BOM document
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
     * @return The licenses.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.LicenseChoice getLicenses() {
      return licenses_ == null ? cyclonedx.v1_3.Bom13.LicenseChoice.getDefaultInstance() : licenses_;
    }
    /**
     * <pre>
     * The license information for the BOM document
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder getLicensesOrBuilder() {
      return licenses_ == null ? cyclonedx.v1_3.Bom13.LicenseChoice.getDefaultInstance() : licenses_;
    }

    public static final int PROPERTIES_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Property> properties_;
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Property> getPropertiesList() {
      return properties_;
    }
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.PropertyOrBuilder> 
        getPropertiesOrBuilderList() {
      return properties_;
    }
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
     */
    @java.lang.Override
    public int getPropertiesCount() {
      return properties_.size();
    }
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Property getProperties(int index) {
      return properties_.get(index);
    }
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.PropertyOrBuilder getPropertiesOrBuilder(
        int index) {
      return properties_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTimestamp());
      }
      for (int i = 0; i < tools_.size(); i++) {
        output.writeMessage(2, tools_.get(i));
      }
      for (int i = 0; i < authors_.size(); i++) {
        output.writeMessage(3, authors_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(4, getComponent());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(5, getManufacture());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(6, getSupplier());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(7, getLicenses());
      }
      for (int i = 0; i < properties_.size(); i++) {
        output.writeMessage(8, properties_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTimestamp());
      }
      for (int i = 0; i < tools_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, tools_.get(i));
      }
      for (int i = 0; i < authors_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, authors_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getComponent());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getManufacture());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getSupplier());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getLicenses());
      }
      for (int i = 0; i < properties_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, properties_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Metadata)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Metadata other = (cyclonedx.v1_3.Bom13.Metadata) obj;

      if (hasTimestamp() != other.hasTimestamp()) return false;
      if (hasTimestamp()) {
        if (!getTimestamp()
            .equals(other.getTimestamp())) return false;
      }
      if (!getToolsList()
          .equals(other.getToolsList())) return false;
      if (!getAuthorsList()
          .equals(other.getAuthorsList())) return false;
      if (hasComponent() != other.hasComponent()) return false;
      if (hasComponent()) {
        if (!getComponent()
            .equals(other.getComponent())) return false;
      }
      if (hasManufacture() != other.hasManufacture()) return false;
      if (hasManufacture()) {
        if (!getManufacture()
            .equals(other.getManufacture())) return false;
      }
      if (hasSupplier() != other.hasSupplier()) return false;
      if (hasSupplier()) {
        if (!getSupplier()
            .equals(other.getSupplier())) return false;
      }
      if (hasLicenses() != other.hasLicenses()) return false;
      if (hasLicenses()) {
        if (!getLicenses()
            .equals(other.getLicenses())) return false;
      }
      if (!getPropertiesList()
          .equals(other.getPropertiesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTimestamp()) {
        hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + getTimestamp().hashCode();
      }
      if (getToolsCount() > 0) {
        hash = (37 * hash) + TOOLS_FIELD_NUMBER;
        hash = (53 * hash) + getToolsList().hashCode();
      }
      if (getAuthorsCount() > 0) {
        hash = (37 * hash) + AUTHORS_FIELD_NUMBER;
        hash = (53 * hash) + getAuthorsList().hashCode();
      }
      if (hasComponent()) {
        hash = (37 * hash) + COMPONENT_FIELD_NUMBER;
        hash = (53 * hash) + getComponent().hashCode();
      }
      if (hasManufacture()) {
        hash = (37 * hash) + MANUFACTURE_FIELD_NUMBER;
        hash = (53 * hash) + getManufacture().hashCode();
      }
      if (hasSupplier()) {
        hash = (37 * hash) + SUPPLIER_FIELD_NUMBER;
        hash = (53 * hash) + getSupplier().hashCode();
      }
      if (hasLicenses()) {
        hash = (37 * hash) + LICENSES_FIELD_NUMBER;
        hash = (53 * hash) + getLicenses().hashCode();
      }
      if (getPropertiesCount() > 0) {
        hash = (37 * hash) + PROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + getPropertiesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Metadata parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Metadata parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Metadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Metadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Metadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Metadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Metadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Metadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Metadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Metadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Metadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Metadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Metadata prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.Metadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Metadata)
        cyclonedx.v1_3.Bom13.MetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Metadata_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Metadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Metadata.class, cyclonedx.v1_3.Bom13.Metadata.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Metadata.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTimestampFieldBuilder();
          getToolsFieldBuilder();
          getAuthorsFieldBuilder();
          getComponentFieldBuilder();
          getManufactureFieldBuilder();
          getSupplierFieldBuilder();
          getLicensesFieldBuilder();
          getPropertiesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        timestamp_ = null;
        if (timestampBuilder_ != null) {
          timestampBuilder_.dispose();
          timestampBuilder_ = null;
        }
        if (toolsBuilder_ == null) {
          tools_ = java.util.Collections.emptyList();
        } else {
          tools_ = null;
          toolsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (authorsBuilder_ == null) {
          authors_ = java.util.Collections.emptyList();
        } else {
          authors_ = null;
          authorsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        component_ = null;
        if (componentBuilder_ != null) {
          componentBuilder_.dispose();
          componentBuilder_ = null;
        }
        manufacture_ = null;
        if (manufactureBuilder_ != null) {
          manufactureBuilder_.dispose();
          manufactureBuilder_ = null;
        }
        supplier_ = null;
        if (supplierBuilder_ != null) {
          supplierBuilder_.dispose();
          supplierBuilder_ = null;
        }
        licenses_ = null;
        if (licensesBuilder_ != null) {
          licensesBuilder_.dispose();
          licensesBuilder_ = null;
        }
        if (propertiesBuilder_ == null) {
          properties_ = java.util.Collections.emptyList();
        } else {
          properties_ = null;
          propertiesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Metadata_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Metadata getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Metadata.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Metadata build() {
        cyclonedx.v1_3.Bom13.Metadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Metadata buildPartial() {
        cyclonedx.v1_3.Bom13.Metadata result = new cyclonedx.v1_3.Bom13.Metadata(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(cyclonedx.v1_3.Bom13.Metadata result) {
        if (toolsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            tools_ = java.util.Collections.unmodifiableList(tools_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.tools_ = tools_;
        } else {
          result.tools_ = toolsBuilder_.build();
        }
        if (authorsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            authors_ = java.util.Collections.unmodifiableList(authors_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.authors_ = authors_;
        } else {
          result.authors_ = authorsBuilder_.build();
        }
        if (propertiesBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0)) {
            properties_ = java.util.Collections.unmodifiableList(properties_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.properties_ = properties_;
        } else {
          result.properties_ = propertiesBuilder_.build();
        }
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Metadata result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.timestamp_ = timestampBuilder_ == null
              ? timestamp_
              : timestampBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.component_ = componentBuilder_ == null
              ? component_
              : componentBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.manufacture_ = manufactureBuilder_ == null
              ? manufacture_
              : manufactureBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.supplier_ = supplierBuilder_ == null
              ? supplier_
              : supplierBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.licenses_ = licensesBuilder_ == null
              ? licenses_
              : licensesBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Metadata) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Metadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Metadata other) {
        if (other == cyclonedx.v1_3.Bom13.Metadata.getDefaultInstance()) return this;
        if (other.hasTimestamp()) {
          mergeTimestamp(other.getTimestamp());
        }
        if (toolsBuilder_ == null) {
          if (!other.tools_.isEmpty()) {
            if (tools_.isEmpty()) {
              tools_ = other.tools_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureToolsIsMutable();
              tools_.addAll(other.tools_);
            }
            onChanged();
          }
        } else {
          if (!other.tools_.isEmpty()) {
            if (toolsBuilder_.isEmpty()) {
              toolsBuilder_.dispose();
              toolsBuilder_ = null;
              tools_ = other.tools_;
              bitField0_ = (bitField0_ & ~0x00000002);
              toolsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getToolsFieldBuilder() : null;
            } else {
              toolsBuilder_.addAllMessages(other.tools_);
            }
          }
        }
        if (authorsBuilder_ == null) {
          if (!other.authors_.isEmpty()) {
            if (authors_.isEmpty()) {
              authors_ = other.authors_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureAuthorsIsMutable();
              authors_.addAll(other.authors_);
            }
            onChanged();
          }
        } else {
          if (!other.authors_.isEmpty()) {
            if (authorsBuilder_.isEmpty()) {
              authorsBuilder_.dispose();
              authorsBuilder_ = null;
              authors_ = other.authors_;
              bitField0_ = (bitField0_ & ~0x00000004);
              authorsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAuthorsFieldBuilder() : null;
            } else {
              authorsBuilder_.addAllMessages(other.authors_);
            }
          }
        }
        if (other.hasComponent()) {
          mergeComponent(other.getComponent());
        }
        if (other.hasManufacture()) {
          mergeManufacture(other.getManufacture());
        }
        if (other.hasSupplier()) {
          mergeSupplier(other.getSupplier());
        }
        if (other.hasLicenses()) {
          mergeLicenses(other.getLicenses());
        }
        if (propertiesBuilder_ == null) {
          if (!other.properties_.isEmpty()) {
            if (properties_.isEmpty()) {
              properties_ = other.properties_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensurePropertiesIsMutable();
              properties_.addAll(other.properties_);
            }
            onChanged();
          }
        } else {
          if (!other.properties_.isEmpty()) {
            if (propertiesBuilder_.isEmpty()) {
              propertiesBuilder_.dispose();
              propertiesBuilder_ = null;
              properties_ = other.properties_;
              bitField0_ = (bitField0_ & ~0x00000080);
              propertiesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPropertiesFieldBuilder() : null;
            } else {
              propertiesBuilder_.addAllMessages(other.properties_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTimestampFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                cyclonedx.v1_3.Bom13.Tool m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Tool.parser(),
                        extensionRegistry);
                if (toolsBuilder_ == null) {
                  ensureToolsIsMutable();
                  tools_.add(m);
                } else {
                  toolsBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 26: {
                cyclonedx.v1_3.Bom13.OrganizationalContact m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.OrganizationalContact.parser(),
                        extensionRegistry);
                if (authorsBuilder_ == null) {
                  ensureAuthorsIsMutable();
                  authors_.add(m);
                } else {
                  authorsBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getComponentFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getManufactureFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 50: {
                input.readMessage(
                    getSupplierFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 58: {
                input.readMessage(
                    getLicensesFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              case 66: {
                cyclonedx.v1_3.Bom13.Property m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Property.parser(),
                        extensionRegistry);
                if (propertiesBuilder_ == null) {
                  ensurePropertiesIsMutable();
                  properties_.add(m);
                } else {
                  propertiesBuilder_.addMessage(m);
                }
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Timestamp timestamp_;
      private com.google.protobuf.SingleFieldBuilder<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> timestampBuilder_;
      /**
       * <pre>
       * The date and time (timestamp) when the document was created.
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       * @return Whether the timestamp field is set.
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The date and time (timestamp) when the document was created.
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       * @return The timestamp.
       */
      public com.google.protobuf.Timestamp getTimestamp() {
        if (timestampBuilder_ == null) {
          return timestamp_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : timestamp_;
        } else {
          return timestampBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The date and time (timestamp) when the document was created.
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       */
      public Builder setTimestamp(com.google.protobuf.Timestamp value) {
        if (timestampBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          timestamp_ = value;
        } else {
          timestampBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The date and time (timestamp) when the document was created.
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       */
      public Builder setTimestamp(
          com.google.protobuf.Timestamp.Builder builderForValue) {
        if (timestampBuilder_ == null) {
          timestamp_ = builderForValue.build();
        } else {
          timestampBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The date and time (timestamp) when the document was created.
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       */
      public Builder mergeTimestamp(com.google.protobuf.Timestamp value) {
        if (timestampBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            timestamp_ != null &&
            timestamp_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
            getTimestampBuilder().mergeFrom(value);
          } else {
            timestamp_ = value;
          }
        } else {
          timestampBuilder_.mergeFrom(value);
        }
        if (timestamp_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The date and time (timestamp) when the document was created.
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000001);
        timestamp_ = null;
        if (timestampBuilder_ != null) {
          timestampBuilder_.dispose();
          timestampBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The date and time (timestamp) when the document was created.
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       */
      public com.google.protobuf.Timestamp.Builder getTimestampBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTimestampFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The date and time (timestamp) when the document was created.
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       */
      public com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder() {
        if (timestampBuilder_ != null) {
          return timestampBuilder_.getMessageOrBuilder();
        } else {
          return timestamp_ == null ?
              com.google.protobuf.Timestamp.getDefaultInstance() : timestamp_;
        }
      }
      /**
       * <pre>
       * The date and time (timestamp) when the document was created.
       * </pre>
       *
       * <code>optional .google.protobuf.Timestamp timestamp = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
          getTimestampFieldBuilder() {
        if (timestampBuilder_ == null) {
          timestampBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                  getTimestamp(),
                  getParentForChildren(),
                  isClean());
          timestamp_ = null;
        }
        return timestampBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Tool> tools_ =
        java.util.Collections.emptyList();
      private void ensureToolsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          tools_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Tool>(tools_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Tool, cyclonedx.v1_3.Bom13.Tool.Builder, cyclonedx.v1_3.Bom13.ToolOrBuilder> toolsBuilder_;

      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Tool> getToolsList() {
        if (toolsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tools_);
        } else {
          return toolsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public int getToolsCount() {
        if (toolsBuilder_ == null) {
          return tools_.size();
        } else {
          return toolsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.Tool getTools(int index) {
        if (toolsBuilder_ == null) {
          return tools_.get(index);
        } else {
          return toolsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public Builder setTools(
          int index, cyclonedx.v1_3.Bom13.Tool value) {
        if (toolsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureToolsIsMutable();
          tools_.set(index, value);
          onChanged();
        } else {
          toolsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public Builder setTools(
          int index, cyclonedx.v1_3.Bom13.Tool.Builder builderForValue) {
        if (toolsBuilder_ == null) {
          ensureToolsIsMutable();
          tools_.set(index, builderForValue.build());
          onChanged();
        } else {
          toolsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public Builder addTools(cyclonedx.v1_3.Bom13.Tool value) {
        if (toolsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureToolsIsMutable();
          tools_.add(value);
          onChanged();
        } else {
          toolsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public Builder addTools(
          int index, cyclonedx.v1_3.Bom13.Tool value) {
        if (toolsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureToolsIsMutable();
          tools_.add(index, value);
          onChanged();
        } else {
          toolsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public Builder addTools(
          cyclonedx.v1_3.Bom13.Tool.Builder builderForValue) {
        if (toolsBuilder_ == null) {
          ensureToolsIsMutable();
          tools_.add(builderForValue.build());
          onChanged();
        } else {
          toolsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public Builder addTools(
          int index, cyclonedx.v1_3.Bom13.Tool.Builder builderForValue) {
        if (toolsBuilder_ == null) {
          ensureToolsIsMutable();
          tools_.add(index, builderForValue.build());
          onChanged();
        } else {
          toolsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public Builder addAllTools(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Tool> values) {
        if (toolsBuilder_ == null) {
          ensureToolsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tools_);
          onChanged();
        } else {
          toolsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public Builder clearTools() {
        if (toolsBuilder_ == null) {
          tools_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          toolsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public Builder removeTools(int index) {
        if (toolsBuilder_ == null) {
          ensureToolsIsMutable();
          tools_.remove(index);
          onChanged();
        } else {
          toolsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.Tool.Builder getToolsBuilder(
          int index) {
        return getToolsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.ToolOrBuilder getToolsOrBuilder(
          int index) {
        if (toolsBuilder_ == null) {
          return tools_.get(index);  } else {
          return toolsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.ToolOrBuilder> 
           getToolsOrBuilderList() {
        if (toolsBuilder_ != null) {
          return toolsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tools_);
        }
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.Tool.Builder addToolsBuilder() {
        return getToolsFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Tool.getDefaultInstance());
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.Tool.Builder addToolsBuilder(
          int index) {
        return getToolsFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Tool.getDefaultInstance());
      }
      /**
       * <pre>
       * The tool(s) used in the creation of the BOM.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Tool tools = 2;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Tool.Builder> 
           getToolsBuilderList() {
        return getToolsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Tool, cyclonedx.v1_3.Bom13.Tool.Builder, cyclonedx.v1_3.Bom13.ToolOrBuilder> 
          getToolsFieldBuilder() {
        if (toolsBuilder_ == null) {
          toolsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Tool, cyclonedx.v1_3.Bom13.Tool.Builder, cyclonedx.v1_3.Bom13.ToolOrBuilder>(
                  tools_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          tools_ = null;
        }
        return toolsBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.OrganizationalContact> authors_ =
        java.util.Collections.emptyList();
      private void ensureAuthorsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          authors_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.OrganizationalContact>(authors_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.OrganizationalContact, cyclonedx.v1_3.Bom13.OrganizationalContact.Builder, cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder> authorsBuilder_;

      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.OrganizationalContact> getAuthorsList() {
        if (authorsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(authors_);
        } else {
          return authorsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public int getAuthorsCount() {
        if (authorsBuilder_ == null) {
          return authors_.size();
        } else {
          return authorsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalContact getAuthors(int index) {
        if (authorsBuilder_ == null) {
          return authors_.get(index);
        } else {
          return authorsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public Builder setAuthors(
          int index, cyclonedx.v1_3.Bom13.OrganizationalContact value) {
        if (authorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAuthorsIsMutable();
          authors_.set(index, value);
          onChanged();
        } else {
          authorsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public Builder setAuthors(
          int index, cyclonedx.v1_3.Bom13.OrganizationalContact.Builder builderForValue) {
        if (authorsBuilder_ == null) {
          ensureAuthorsIsMutable();
          authors_.set(index, builderForValue.build());
          onChanged();
        } else {
          authorsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public Builder addAuthors(cyclonedx.v1_3.Bom13.OrganizationalContact value) {
        if (authorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAuthorsIsMutable();
          authors_.add(value);
          onChanged();
        } else {
          authorsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public Builder addAuthors(
          int index, cyclonedx.v1_3.Bom13.OrganizationalContact value) {
        if (authorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAuthorsIsMutable();
          authors_.add(index, value);
          onChanged();
        } else {
          authorsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public Builder addAuthors(
          cyclonedx.v1_3.Bom13.OrganizationalContact.Builder builderForValue) {
        if (authorsBuilder_ == null) {
          ensureAuthorsIsMutable();
          authors_.add(builderForValue.build());
          onChanged();
        } else {
          authorsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public Builder addAuthors(
          int index, cyclonedx.v1_3.Bom13.OrganizationalContact.Builder builderForValue) {
        if (authorsBuilder_ == null) {
          ensureAuthorsIsMutable();
          authors_.add(index, builderForValue.build());
          onChanged();
        } else {
          authorsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public Builder addAllAuthors(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.OrganizationalContact> values) {
        if (authorsBuilder_ == null) {
          ensureAuthorsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, authors_);
          onChanged();
        } else {
          authorsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public Builder clearAuthors() {
        if (authorsBuilder_ == null) {
          authors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          authorsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public Builder removeAuthors(int index) {
        if (authorsBuilder_ == null) {
          ensureAuthorsIsMutable();
          authors_.remove(index);
          onChanged();
        } else {
          authorsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalContact.Builder getAuthorsBuilder(
          int index) {
        return getAuthorsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder getAuthorsOrBuilder(
          int index) {
        if (authorsBuilder_ == null) {
          return authors_.get(index);  } else {
          return authorsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder> 
           getAuthorsOrBuilderList() {
        if (authorsBuilder_ != null) {
          return authorsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(authors_);
        }
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalContact.Builder addAuthorsBuilder() {
        return getAuthorsFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.OrganizationalContact.getDefaultInstance());
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalContact.Builder addAuthorsBuilder(
          int index) {
        return getAuthorsFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.OrganizationalContact.getDefaultInstance());
      }
      /**
       * <pre>
       * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact authors = 3;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.OrganizationalContact.Builder> 
           getAuthorsBuilderList() {
        return getAuthorsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.OrganizationalContact, cyclonedx.v1_3.Bom13.OrganizationalContact.Builder, cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder> 
          getAuthorsFieldBuilder() {
        if (authorsBuilder_ == null) {
          authorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.OrganizationalContact, cyclonedx.v1_3.Bom13.OrganizationalContact.Builder, cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder>(
                  authors_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          authors_ = null;
        }
        return authorsBuilder_;
      }

      private cyclonedx.v1_3.Bom13.Component component_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder> componentBuilder_;
      /**
       * <pre>
       * The component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
       * @return Whether the component field is set.
       */
      public boolean hasComponent() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
       * @return The component.
       */
      public cyclonedx.v1_3.Bom13.Component getComponent() {
        if (componentBuilder_ == null) {
          return component_ == null ? cyclonedx.v1_3.Bom13.Component.getDefaultInstance() : component_;
        } else {
          return componentBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
       */
      public Builder setComponent(cyclonedx.v1_3.Bom13.Component value) {
        if (componentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          component_ = value;
        } else {
          componentBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
       */
      public Builder setComponent(
          cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (componentBuilder_ == null) {
          component_ = builderForValue.build();
        } else {
          componentBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
       */
      public Builder mergeComponent(cyclonedx.v1_3.Bom13.Component value) {
        if (componentBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            component_ != null &&
            component_ != cyclonedx.v1_3.Bom13.Component.getDefaultInstance()) {
            getComponentBuilder().mergeFrom(value);
          } else {
            component_ = value;
          }
        } else {
          componentBuilder_.mergeFrom(value);
        }
        if (component_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
       */
      public Builder clearComponent() {
        bitField0_ = (bitField0_ & ~0x00000008);
        component_ = null;
        if (componentBuilder_ != null) {
          componentBuilder_.dispose();
          componentBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder getComponentBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getComponentFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.ComponentOrBuilder getComponentOrBuilder() {
        if (componentBuilder_ != null) {
          return componentBuilder_.getMessageOrBuilder();
        } else {
          return component_ == null ?
              cyclonedx.v1_3.Bom13.Component.getDefaultInstance() : component_;
        }
      }
      /**
       * <pre>
       * The component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Component component = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
          getComponentFieldBuilder() {
        if (componentBuilder_ == null) {
          componentBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder>(
                  getComponent(),
                  getParentForChildren(),
                  isClean());
          component_ = null;
        }
        return componentBuilder_;
      }

      private cyclonedx.v1_3.Bom13.OrganizationalEntity manufacture_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.OrganizationalEntity, cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder, cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder> manufactureBuilder_;
      /**
       * <pre>
       * The organization that manufactured the component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
       * @return Whether the manufacture field is set.
       */
      public boolean hasManufacture() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * The organization that manufactured the component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
       * @return The manufacture.
       */
      public cyclonedx.v1_3.Bom13.OrganizationalEntity getManufacture() {
        if (manufactureBuilder_ == null) {
          return manufacture_ == null ? cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : manufacture_;
        } else {
          return manufactureBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The organization that manufactured the component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
       */
      public Builder setManufacture(cyclonedx.v1_3.Bom13.OrganizationalEntity value) {
        if (manufactureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          manufacture_ = value;
        } else {
          manufactureBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The organization that manufactured the component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
       */
      public Builder setManufacture(
          cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder builderForValue) {
        if (manufactureBuilder_ == null) {
          manufacture_ = builderForValue.build();
        } else {
          manufactureBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The organization that manufactured the component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
       */
      public Builder mergeManufacture(cyclonedx.v1_3.Bom13.OrganizationalEntity value) {
        if (manufactureBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            manufacture_ != null &&
            manufacture_ != cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance()) {
            getManufactureBuilder().mergeFrom(value);
          } else {
            manufacture_ = value;
          }
        } else {
          manufactureBuilder_.mergeFrom(value);
        }
        if (manufacture_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The organization that manufactured the component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
       */
      public Builder clearManufacture() {
        bitField0_ = (bitField0_ & ~0x00000010);
        manufacture_ = null;
        if (manufactureBuilder_ != null) {
          manufactureBuilder_.dispose();
          manufactureBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The organization that manufactured the component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder getManufactureBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getManufactureFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The organization that manufactured the component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder getManufactureOrBuilder() {
        if (manufactureBuilder_ != null) {
          return manufactureBuilder_.getMessageOrBuilder();
        } else {
          return manufacture_ == null ?
              cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : manufacture_;
        }
      }
      /**
       * <pre>
       * The organization that manufactured the component that the BOM describes.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity manufacture = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.OrganizationalEntity, cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder, cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder> 
          getManufactureFieldBuilder() {
        if (manufactureBuilder_ == null) {
          manufactureBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.OrganizationalEntity, cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder, cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder>(
                  getManufacture(),
                  getParentForChildren(),
                  isClean());
          manufacture_ = null;
        }
        return manufactureBuilder_;
      }

      private cyclonedx.v1_3.Bom13.OrganizationalEntity supplier_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.OrganizationalEntity, cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder, cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder> supplierBuilder_;
      /**
       * <pre>
       * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
       * @return Whether the supplier field is set.
       */
      public boolean hasSupplier() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
       * @return The supplier.
       */
      public cyclonedx.v1_3.Bom13.OrganizationalEntity getSupplier() {
        if (supplierBuilder_ == null) {
          return supplier_ == null ? cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : supplier_;
        } else {
          return supplierBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
       */
      public Builder setSupplier(cyclonedx.v1_3.Bom13.OrganizationalEntity value) {
        if (supplierBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          supplier_ = value;
        } else {
          supplierBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
       */
      public Builder setSupplier(
          cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder builderForValue) {
        if (supplierBuilder_ == null) {
          supplier_ = builderForValue.build();
        } else {
          supplierBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
       */
      public Builder mergeSupplier(cyclonedx.v1_3.Bom13.OrganizationalEntity value) {
        if (supplierBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0) &&
            supplier_ != null &&
            supplier_ != cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance()) {
            getSupplierBuilder().mergeFrom(value);
          } else {
            supplier_ = value;
          }
        } else {
          supplierBuilder_.mergeFrom(value);
        }
        if (supplier_ != null) {
          bitField0_ |= 0x00000020;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
       */
      public Builder clearSupplier() {
        bitField0_ = (bitField0_ & ~0x00000020);
        supplier_ = null;
        if (supplierBuilder_ != null) {
          supplierBuilder_.dispose();
          supplierBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder getSupplierBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getSupplierFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder getSupplierOrBuilder() {
        if (supplierBuilder_ != null) {
          return supplierBuilder_.getMessageOrBuilder();
        } else {
          return supplier_ == null ?
              cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : supplier_;
        }
      }
      /**
       * <pre>
       * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity supplier = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.OrganizationalEntity, cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder, cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder> 
          getSupplierFieldBuilder() {
        if (supplierBuilder_ == null) {
          supplierBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.OrganizationalEntity, cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder, cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder>(
                  getSupplier(),
                  getParentForChildren(),
                  isClean());
          supplier_ = null;
        }
        return supplierBuilder_;
      }

      private cyclonedx.v1_3.Bom13.LicenseChoice licenses_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.LicenseChoice, cyclonedx.v1_3.Bom13.LicenseChoice.Builder, cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> licensesBuilder_;
      /**
       * <pre>
       * The license information for the BOM document
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
       * @return Whether the licenses field is set.
       */
      public boolean hasLicenses() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * The license information for the BOM document
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
       * @return The licenses.
       */
      public cyclonedx.v1_3.Bom13.LicenseChoice getLicenses() {
        if (licensesBuilder_ == null) {
          return licenses_ == null ? cyclonedx.v1_3.Bom13.LicenseChoice.getDefaultInstance() : licenses_;
        } else {
          return licensesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The license information for the BOM document
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
       */
      public Builder setLicenses(cyclonedx.v1_3.Bom13.LicenseChoice value) {
        if (licensesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          licenses_ = value;
        } else {
          licensesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The license information for the BOM document
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
       */
      public Builder setLicenses(
          cyclonedx.v1_3.Bom13.LicenseChoice.Builder builderForValue) {
        if (licensesBuilder_ == null) {
          licenses_ = builderForValue.build();
        } else {
          licensesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The license information for the BOM document
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
       */
      public Builder mergeLicenses(cyclonedx.v1_3.Bom13.LicenseChoice value) {
        if (licensesBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0) &&
            licenses_ != null &&
            licenses_ != cyclonedx.v1_3.Bom13.LicenseChoice.getDefaultInstance()) {
            getLicensesBuilder().mergeFrom(value);
          } else {
            licenses_ = value;
          }
        } else {
          licensesBuilder_.mergeFrom(value);
        }
        if (licenses_ != null) {
          bitField0_ |= 0x00000040;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The license information for the BOM document
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
       */
      public Builder clearLicenses() {
        bitField0_ = (bitField0_ & ~0x00000040);
        licenses_ = null;
        if (licensesBuilder_ != null) {
          licensesBuilder_.dispose();
          licensesBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The license information for the BOM document
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoice.Builder getLicensesBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getLicensesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The license information for the BOM document
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder getLicensesOrBuilder() {
        if (licensesBuilder_ != null) {
          return licensesBuilder_.getMessageOrBuilder();
        } else {
          return licenses_ == null ?
              cyclonedx.v1_3.Bom13.LicenseChoice.getDefaultInstance() : licenses_;
        }
      }
      /**
       * <pre>
       * The license information for the BOM document
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.LicenseChoice licenses = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.LicenseChoice, cyclonedx.v1_3.Bom13.LicenseChoice.Builder, cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> 
          getLicensesFieldBuilder() {
        if (licensesBuilder_ == null) {
          licensesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.LicenseChoice, cyclonedx.v1_3.Bom13.LicenseChoice.Builder, cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder>(
                  getLicenses(),
                  getParentForChildren(),
                  isClean());
          licenses_ = null;
        }
        return licensesBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Property> properties_ =
        java.util.Collections.emptyList();
      private void ensurePropertiesIsMutable() {
        if (!((bitField0_ & 0x00000080) != 0)) {
          properties_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Property>(properties_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Property, cyclonedx.v1_3.Bom13.Property.Builder, cyclonedx.v1_3.Bom13.PropertyOrBuilder> propertiesBuilder_;

      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Property> getPropertiesList() {
        if (propertiesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(properties_);
        } else {
          return propertiesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public int getPropertiesCount() {
        if (propertiesBuilder_ == null) {
          return properties_.size();
        } else {
          return propertiesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public cyclonedx.v1_3.Bom13.Property getProperties(int index) {
        if (propertiesBuilder_ == null) {
          return properties_.get(index);
        } else {
          return propertiesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public Builder setProperties(
          int index, cyclonedx.v1_3.Bom13.Property value) {
        if (propertiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertiesIsMutable();
          properties_.set(index, value);
          onChanged();
        } else {
          propertiesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public Builder setProperties(
          int index, cyclonedx.v1_3.Bom13.Property.Builder builderForValue) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          properties_.set(index, builderForValue.build());
          onChanged();
        } else {
          propertiesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public Builder addProperties(cyclonedx.v1_3.Bom13.Property value) {
        if (propertiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertiesIsMutable();
          properties_.add(value);
          onChanged();
        } else {
          propertiesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public Builder addProperties(
          int index, cyclonedx.v1_3.Bom13.Property value) {
        if (propertiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertiesIsMutable();
          properties_.add(index, value);
          onChanged();
        } else {
          propertiesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public Builder addProperties(
          cyclonedx.v1_3.Bom13.Property.Builder builderForValue) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          properties_.add(builderForValue.build());
          onChanged();
        } else {
          propertiesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public Builder addProperties(
          int index, cyclonedx.v1_3.Bom13.Property.Builder builderForValue) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          properties_.add(index, builderForValue.build());
          onChanged();
        } else {
          propertiesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public Builder addAllProperties(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Property> values) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, properties_);
          onChanged();
        } else {
          propertiesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public Builder clearProperties() {
        if (propertiesBuilder_ == null) {
          properties_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          propertiesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public Builder removeProperties(int index) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          properties_.remove(index);
          onChanged();
        } else {
          propertiesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public cyclonedx.v1_3.Bom13.Property.Builder getPropertiesBuilder(
          int index) {
        return getPropertiesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public cyclonedx.v1_3.Bom13.PropertyOrBuilder getPropertiesOrBuilder(
          int index) {
        if (propertiesBuilder_ == null) {
          return properties_.get(index);  } else {
          return propertiesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.PropertyOrBuilder> 
           getPropertiesOrBuilderList() {
        if (propertiesBuilder_ != null) {
          return propertiesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(properties_);
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public cyclonedx.v1_3.Bom13.Property.Builder addPropertiesBuilder() {
        return getPropertiesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Property.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public cyclonedx.v1_3.Bom13.Property.Builder addPropertiesBuilder(
          int index) {
        return getPropertiesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Property.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 8;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Property.Builder> 
           getPropertiesBuilderList() {
        return getPropertiesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Property, cyclonedx.v1_3.Bom13.Property.Builder, cyclonedx.v1_3.Bom13.PropertyOrBuilder> 
          getPropertiesFieldBuilder() {
        if (propertiesBuilder_ == null) {
          propertiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Property, cyclonedx.v1_3.Bom13.Property.Builder, cyclonedx.v1_3.Bom13.PropertyOrBuilder>(
                  properties_,
                  ((bitField0_ & 0x00000080) != 0),
                  getParentForChildren(),
                  isClean());
          properties_ = null;
        }
        return propertiesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Metadata)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Metadata)
    private static final cyclonedx.v1_3.Bom13.Metadata DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Metadata();
    }

    public static cyclonedx.v1_3.Bom13.Metadata getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Metadata>
        PARSER = new com.google.protobuf.AbstractParser<Metadata>() {
      @java.lang.Override
      public Metadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Metadata> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Metadata> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Metadata getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OrganizationalContactOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.OrganizationalContact)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The name of the contact
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <pre>
     * The name of the contact
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The name of the contact
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The email address of the contact.
     * </pre>
     *
     * <code>optional string email = 2;</code>
     * @return Whether the email field is set.
     */
    boolean hasEmail();
    /**
     * <pre>
     * The email address of the contact.
     * </pre>
     *
     * <code>optional string email = 2;</code>
     * @return The email.
     */
    java.lang.String getEmail();
    /**
     * <pre>
     * The email address of the contact.
     * </pre>
     *
     * <code>optional string email = 2;</code>
     * @return The bytes for email.
     */
    com.google.protobuf.ByteString
        getEmailBytes();

    /**
     * <pre>
     * The phone number of the contact.
     * </pre>
     *
     * <code>optional string phone = 3;</code>
     * @return Whether the phone field is set.
     */
    boolean hasPhone();
    /**
     * <pre>
     * The phone number of the contact.
     * </pre>
     *
     * <code>optional string phone = 3;</code>
     * @return The phone.
     */
    java.lang.String getPhone();
    /**
     * <pre>
     * The phone number of the contact.
     * </pre>
     *
     * <code>optional string phone = 3;</code>
     * @return The bytes for phone.
     */
    com.google.protobuf.ByteString
        getPhoneBytes();
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.OrganizationalContact}
   */
  public static final class OrganizationalContact extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.OrganizationalContact)
      OrganizationalContactOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        OrganizationalContact.class.getName());
    }
    // Use OrganizationalContact.newBuilder() to construct.
    private OrganizationalContact(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private OrganizationalContact() {
      name_ = "";
      email_ = "";
      phone_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_OrganizationalContact_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_OrganizationalContact_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.OrganizationalContact.class, cyclonedx.v1_3.Bom13.OrganizationalContact.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of the contact
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The name of the contact
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the contact
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EMAIL_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object email_ = "";
    /**
     * <pre>
     * The email address of the contact.
     * </pre>
     *
     * <code>optional string email = 2;</code>
     * @return Whether the email field is set.
     */
    @java.lang.Override
    public boolean hasEmail() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The email address of the contact.
     * </pre>
     *
     * <code>optional string email = 2;</code>
     * @return The email.
     */
    @java.lang.Override
    public java.lang.String getEmail() {
      java.lang.Object ref = email_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        email_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The email address of the contact.
     * </pre>
     *
     * <code>optional string email = 2;</code>
     * @return The bytes for email.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getEmailBytes() {
      java.lang.Object ref = email_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        email_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PHONE_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object phone_ = "";
    /**
     * <pre>
     * The phone number of the contact.
     * </pre>
     *
     * <code>optional string phone = 3;</code>
     * @return Whether the phone field is set.
     */
    @java.lang.Override
    public boolean hasPhone() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The phone number of the contact.
     * </pre>
     *
     * <code>optional string phone = 3;</code>
     * @return The phone.
     */
    @java.lang.Override
    public java.lang.String getPhone() {
      java.lang.Object ref = phone_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        phone_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The phone number of the contact.
     * </pre>
     *
     * <code>optional string phone = 3;</code>
     * @return The bytes for phone.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPhoneBytes() {
      java.lang.Object ref = phone_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        phone_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, email_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, phone_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, email_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, phone_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.OrganizationalContact)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.OrganizationalContact other = (cyclonedx.v1_3.Bom13.OrganizationalContact) obj;

      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (!getName()
            .equals(other.getName())) return false;
      }
      if (hasEmail() != other.hasEmail()) return false;
      if (hasEmail()) {
        if (!getEmail()
            .equals(other.getEmail())) return false;
      }
      if (hasPhone() != other.hasPhone()) return false;
      if (hasPhone()) {
        if (!getPhone()
            .equals(other.getPhone())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasEmail()) {
        hash = (37 * hash) + EMAIL_FIELD_NUMBER;
        hash = (53 * hash) + getEmail().hashCode();
      }
      if (hasPhone()) {
        hash = (37 * hash) + PHONE_FIELD_NUMBER;
        hash = (53 * hash) + getPhone().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.OrganizationalContact parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalContact parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalContact parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalContact parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalContact parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalContact parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalContact parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalContact parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.OrganizationalContact parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.OrganizationalContact parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalContact parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalContact parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.OrganizationalContact prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.OrganizationalContact}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.OrganizationalContact)
        cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_OrganizationalContact_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_OrganizationalContact_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.OrganizationalContact.class, cyclonedx.v1_3.Bom13.OrganizationalContact.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.OrganizationalContact.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        name_ = "";
        email_ = "";
        phone_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_OrganizationalContact_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.OrganizationalContact getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.OrganizationalContact.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.OrganizationalContact build() {
        cyclonedx.v1_3.Bom13.OrganizationalContact result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.OrganizationalContact buildPartial() {
        cyclonedx.v1_3.Bom13.OrganizationalContact result = new cyclonedx.v1_3.Bom13.OrganizationalContact(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.OrganizationalContact result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.email_ = email_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.phone_ = phone_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.OrganizationalContact) {
          return mergeFrom((cyclonedx.v1_3.Bom13.OrganizationalContact)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.OrganizationalContact other) {
        if (other == cyclonedx.v1_3.Bom13.OrganizationalContact.getDefaultInstance()) return this;
        if (other.hasName()) {
          name_ = other.name_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasEmail()) {
          email_ = other.email_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasPhone()) {
          phone_ = other.phone_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                email_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                phone_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The name of the contact
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return Whether the name field is set.
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The name of the contact
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the contact
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the contact
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the contact
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the contact
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object email_ = "";
      /**
       * <pre>
       * The email address of the contact.
       * </pre>
       *
       * <code>optional string email = 2;</code>
       * @return Whether the email field is set.
       */
      public boolean hasEmail() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The email address of the contact.
       * </pre>
       *
       * <code>optional string email = 2;</code>
       * @return The email.
       */
      public java.lang.String getEmail() {
        java.lang.Object ref = email_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          email_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The email address of the contact.
       * </pre>
       *
       * <code>optional string email = 2;</code>
       * @return The bytes for email.
       */
      public com.google.protobuf.ByteString
          getEmailBytes() {
        java.lang.Object ref = email_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          email_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The email address of the contact.
       * </pre>
       *
       * <code>optional string email = 2;</code>
       * @param value The email to set.
       * @return This builder for chaining.
       */
      public Builder setEmail(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        email_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The email address of the contact.
       * </pre>
       *
       * <code>optional string email = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearEmail() {
        email_ = getDefaultInstance().getEmail();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The email address of the contact.
       * </pre>
       *
       * <code>optional string email = 2;</code>
       * @param value The bytes for email to set.
       * @return This builder for chaining.
       */
      public Builder setEmailBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        email_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object phone_ = "";
      /**
       * <pre>
       * The phone number of the contact.
       * </pre>
       *
       * <code>optional string phone = 3;</code>
       * @return Whether the phone field is set.
       */
      public boolean hasPhone() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The phone number of the contact.
       * </pre>
       *
       * <code>optional string phone = 3;</code>
       * @return The phone.
       */
      public java.lang.String getPhone() {
        java.lang.Object ref = phone_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          phone_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The phone number of the contact.
       * </pre>
       *
       * <code>optional string phone = 3;</code>
       * @return The bytes for phone.
       */
      public com.google.protobuf.ByteString
          getPhoneBytes() {
        java.lang.Object ref = phone_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          phone_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The phone number of the contact.
       * </pre>
       *
       * <code>optional string phone = 3;</code>
       * @param value The phone to set.
       * @return This builder for chaining.
       */
      public Builder setPhone(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        phone_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The phone number of the contact.
       * </pre>
       *
       * <code>optional string phone = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearPhone() {
        phone_ = getDefaultInstance().getPhone();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The phone number of the contact.
       * </pre>
       *
       * <code>optional string phone = 3;</code>
       * @param value The bytes for phone to set.
       * @return This builder for chaining.
       */
      public Builder setPhoneBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        phone_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.OrganizationalContact)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.OrganizationalContact)
    private static final cyclonedx.v1_3.Bom13.OrganizationalContact DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.OrganizationalContact();
    }

    public static cyclonedx.v1_3.Bom13.OrganizationalContact getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OrganizationalContact>
        PARSER = new com.google.protobuf.AbstractParser<OrganizationalContact>() {
      @java.lang.Override
      public OrganizationalContact parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<OrganizationalContact> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OrganizationalContact> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.OrganizationalContact getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OrganizationalEntityOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.OrganizationalEntity)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The name of the organization
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <pre>
     * The name of the organization
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The name of the organization
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The URL of the organization. Multiple URLs are allowed.
     * </pre>
     *
     * <code>repeated string url = 2;</code>
     * @return A list containing the url.
     */
    java.util.List<java.lang.String>
        getUrlList();
    /**
     * <pre>
     * The URL of the organization. Multiple URLs are allowed.
     * </pre>
     *
     * <code>repeated string url = 2;</code>
     * @return The count of url.
     */
    int getUrlCount();
    /**
     * <pre>
     * The URL of the organization. Multiple URLs are allowed.
     * </pre>
     *
     * <code>repeated string url = 2;</code>
     * @param index The index of the element to return.
     * @return The url at the given index.
     */
    java.lang.String getUrl(int index);
    /**
     * <pre>
     * The URL of the organization. Multiple URLs are allowed.
     * </pre>
     *
     * <code>repeated string url = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the url at the given index.
     */
    com.google.protobuf.ByteString
        getUrlBytes(int index);

    /**
     * <pre>
     * A contact person at the organization. Multiple contacts are allowed.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.OrganizationalContact> 
        getContactList();
    /**
     * <pre>
     * A contact person at the organization. Multiple contacts are allowed.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
     */
    cyclonedx.v1_3.Bom13.OrganizationalContact getContact(int index);
    /**
     * <pre>
     * A contact person at the organization. Multiple contacts are allowed.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
     */
    int getContactCount();
    /**
     * <pre>
     * A contact person at the organization. Multiple contacts are allowed.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder> 
        getContactOrBuilderList();
    /**
     * <pre>
     * A contact person at the organization. Multiple contacts are allowed.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
     */
    cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder getContactOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.OrganizationalEntity}
   */
  public static final class OrganizationalEntity extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.OrganizationalEntity)
      OrganizationalEntityOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        OrganizationalEntity.class.getName());
    }
    // Use OrganizationalEntity.newBuilder() to construct.
    private OrganizationalEntity(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private OrganizationalEntity() {
      name_ = "";
      url_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      contact_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_OrganizationalEntity_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_OrganizationalEntity_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.OrganizationalEntity.class, cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of the organization
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The name of the organization
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the organization
     * </pre>
     *
     * <code>optional string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int URL_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList url_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * The URL of the organization. Multiple URLs are allowed.
     * </pre>
     *
     * <code>repeated string url = 2;</code>
     * @return A list containing the url.
     */
    public com.google.protobuf.ProtocolStringList
        getUrlList() {
      return url_;
    }
    /**
     * <pre>
     * The URL of the organization. Multiple URLs are allowed.
     * </pre>
     *
     * <code>repeated string url = 2;</code>
     * @return The count of url.
     */
    public int getUrlCount() {
      return url_.size();
    }
    /**
     * <pre>
     * The URL of the organization. Multiple URLs are allowed.
     * </pre>
     *
     * <code>repeated string url = 2;</code>
     * @param index The index of the element to return.
     * @return The url at the given index.
     */
    public java.lang.String getUrl(int index) {
      return url_.get(index);
    }
    /**
     * <pre>
     * The URL of the organization. Multiple URLs are allowed.
     * </pre>
     *
     * <code>repeated string url = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the url at the given index.
     */
    public com.google.protobuf.ByteString
        getUrlBytes(int index) {
      return url_.getByteString(index);
    }

    public static final int CONTACT_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.OrganizationalContact> contact_;
    /**
     * <pre>
     * A contact person at the organization. Multiple contacts are allowed.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.OrganizationalContact> getContactList() {
      return contact_;
    }
    /**
     * <pre>
     * A contact person at the organization. Multiple contacts are allowed.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder> 
        getContactOrBuilderList() {
      return contact_;
    }
    /**
     * <pre>
     * A contact person at the organization. Multiple contacts are allowed.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
     */
    @java.lang.Override
    public int getContactCount() {
      return contact_.size();
    }
    /**
     * <pre>
     * A contact person at the organization. Multiple contacts are allowed.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.OrganizationalContact getContact(int index) {
      return contact_.get(index);
    }
    /**
     * <pre>
     * A contact person at the organization. Multiple contacts are allowed.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder getContactOrBuilder(
        int index) {
      return contact_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, name_);
      }
      for (int i = 0; i < url_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, url_.getRaw(i));
      }
      for (int i = 0; i < contact_.size(); i++) {
        output.writeMessage(3, contact_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, name_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < url_.size(); i++) {
          dataSize += computeStringSizeNoTag(url_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getUrlList().size();
      }
      for (int i = 0; i < contact_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, contact_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.OrganizationalEntity)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.OrganizationalEntity other = (cyclonedx.v1_3.Bom13.OrganizationalEntity) obj;

      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (!getName()
            .equals(other.getName())) return false;
      }
      if (!getUrlList()
          .equals(other.getUrlList())) return false;
      if (!getContactList()
          .equals(other.getContactList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (getUrlCount() > 0) {
        hash = (37 * hash) + URL_FIELD_NUMBER;
        hash = (53 * hash) + getUrlList().hashCode();
      }
      if (getContactCount() > 0) {
        hash = (37 * hash) + CONTACT_FIELD_NUMBER;
        hash = (53 * hash) + getContactList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.OrganizationalEntity parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalEntity parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalEntity parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalEntity parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalEntity parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalEntity parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalEntity parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalEntity parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.OrganizationalEntity parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.OrganizationalEntity parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalEntity parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.OrganizationalEntity parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.OrganizationalEntity prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.OrganizationalEntity}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.OrganizationalEntity)
        cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_OrganizationalEntity_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_OrganizationalEntity_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.OrganizationalEntity.class, cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.OrganizationalEntity.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        name_ = "";
        url_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        if (contactBuilder_ == null) {
          contact_ = java.util.Collections.emptyList();
        } else {
          contact_ = null;
          contactBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_OrganizationalEntity_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.OrganizationalEntity getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.OrganizationalEntity build() {
        cyclonedx.v1_3.Bom13.OrganizationalEntity result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.OrganizationalEntity buildPartial() {
        cyclonedx.v1_3.Bom13.OrganizationalEntity result = new cyclonedx.v1_3.Bom13.OrganizationalEntity(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(cyclonedx.v1_3.Bom13.OrganizationalEntity result) {
        if (contactBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            contact_ = java.util.Collections.unmodifiableList(contact_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.contact_ = contact_;
        } else {
          result.contact_ = contactBuilder_.build();
        }
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.OrganizationalEntity result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          url_.makeImmutable();
          result.url_ = url_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.OrganizationalEntity) {
          return mergeFrom((cyclonedx.v1_3.Bom13.OrganizationalEntity)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.OrganizationalEntity other) {
        if (other == cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance()) return this;
        if (other.hasName()) {
          name_ = other.name_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (!other.url_.isEmpty()) {
          if (url_.isEmpty()) {
            url_ = other.url_;
            bitField0_ |= 0x00000002;
          } else {
            ensureUrlIsMutable();
            url_.addAll(other.url_);
          }
          onChanged();
        }
        if (contactBuilder_ == null) {
          if (!other.contact_.isEmpty()) {
            if (contact_.isEmpty()) {
              contact_ = other.contact_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureContactIsMutable();
              contact_.addAll(other.contact_);
            }
            onChanged();
          }
        } else {
          if (!other.contact_.isEmpty()) {
            if (contactBuilder_.isEmpty()) {
              contactBuilder_.dispose();
              contactBuilder_ = null;
              contact_ = other.contact_;
              bitField0_ = (bitField0_ & ~0x00000004);
              contactBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getContactFieldBuilder() : null;
            } else {
              contactBuilder_.addAllMessages(other.contact_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureUrlIsMutable();
                url_.add(s);
                break;
              } // case 18
              case 26: {
                cyclonedx.v1_3.Bom13.OrganizationalContact m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.OrganizationalContact.parser(),
                        extensionRegistry);
                if (contactBuilder_ == null) {
                  ensureContactIsMutable();
                  contact_.add(m);
                } else {
                  contactBuilder_.addMessage(m);
                }
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The name of the organization
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return Whether the name field is set.
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The name of the organization
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the organization
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the organization
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the organization
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the organization
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList url_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureUrlIsMutable() {
        if (!url_.isModifiable()) {
          url_ = new com.google.protobuf.LazyStringArrayList(url_);
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <pre>
       * The URL of the organization. Multiple URLs are allowed.
       * </pre>
       *
       * <code>repeated string url = 2;</code>
       * @return A list containing the url.
       */
      public com.google.protobuf.ProtocolStringList
          getUrlList() {
        url_.makeImmutable();
        return url_;
      }
      /**
       * <pre>
       * The URL of the organization. Multiple URLs are allowed.
       * </pre>
       *
       * <code>repeated string url = 2;</code>
       * @return The count of url.
       */
      public int getUrlCount() {
        return url_.size();
      }
      /**
       * <pre>
       * The URL of the organization. Multiple URLs are allowed.
       * </pre>
       *
       * <code>repeated string url = 2;</code>
       * @param index The index of the element to return.
       * @return The url at the given index.
       */
      public java.lang.String getUrl(int index) {
        return url_.get(index);
      }
      /**
       * <pre>
       * The URL of the organization. Multiple URLs are allowed.
       * </pre>
       *
       * <code>repeated string url = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the url at the given index.
       */
      public com.google.protobuf.ByteString
          getUrlBytes(int index) {
        return url_.getByteString(index);
      }
      /**
       * <pre>
       * The URL of the organization. Multiple URLs are allowed.
       * </pre>
       *
       * <code>repeated string url = 2;</code>
       * @param index The index to set the value at.
       * @param value The url to set.
       * @return This builder for chaining.
       */
      public Builder setUrl(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureUrlIsMutable();
        url_.set(index, value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The URL of the organization. Multiple URLs are allowed.
       * </pre>
       *
       * <code>repeated string url = 2;</code>
       * @param value The url to add.
       * @return This builder for chaining.
       */
      public Builder addUrl(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureUrlIsMutable();
        url_.add(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The URL of the organization. Multiple URLs are allowed.
       * </pre>
       *
       * <code>repeated string url = 2;</code>
       * @param values The url to add.
       * @return This builder for chaining.
       */
      public Builder addAllUrl(
          java.lang.Iterable<java.lang.String> values) {
        ensureUrlIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, url_);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The URL of the organization. Multiple URLs are allowed.
       * </pre>
       *
       * <code>repeated string url = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearUrl() {
        url_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The URL of the organization. Multiple URLs are allowed.
       * </pre>
       *
       * <code>repeated string url = 2;</code>
       * @param value The bytes of the url to add.
       * @return This builder for chaining.
       */
      public Builder addUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureUrlIsMutable();
        url_.add(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.OrganizationalContact> contact_ =
        java.util.Collections.emptyList();
      private void ensureContactIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          contact_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.OrganizationalContact>(contact_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.OrganizationalContact, cyclonedx.v1_3.Bom13.OrganizationalContact.Builder, cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder> contactBuilder_;

      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.OrganizationalContact> getContactList() {
        if (contactBuilder_ == null) {
          return java.util.Collections.unmodifiableList(contact_);
        } else {
          return contactBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public int getContactCount() {
        if (contactBuilder_ == null) {
          return contact_.size();
        } else {
          return contactBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalContact getContact(int index) {
        if (contactBuilder_ == null) {
          return contact_.get(index);
        } else {
          return contactBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public Builder setContact(
          int index, cyclonedx.v1_3.Bom13.OrganizationalContact value) {
        if (contactBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContactIsMutable();
          contact_.set(index, value);
          onChanged();
        } else {
          contactBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public Builder setContact(
          int index, cyclonedx.v1_3.Bom13.OrganizationalContact.Builder builderForValue) {
        if (contactBuilder_ == null) {
          ensureContactIsMutable();
          contact_.set(index, builderForValue.build());
          onChanged();
        } else {
          contactBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public Builder addContact(cyclonedx.v1_3.Bom13.OrganizationalContact value) {
        if (contactBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContactIsMutable();
          contact_.add(value);
          onChanged();
        } else {
          contactBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public Builder addContact(
          int index, cyclonedx.v1_3.Bom13.OrganizationalContact value) {
        if (contactBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureContactIsMutable();
          contact_.add(index, value);
          onChanged();
        } else {
          contactBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public Builder addContact(
          cyclonedx.v1_3.Bom13.OrganizationalContact.Builder builderForValue) {
        if (contactBuilder_ == null) {
          ensureContactIsMutable();
          contact_.add(builderForValue.build());
          onChanged();
        } else {
          contactBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public Builder addContact(
          int index, cyclonedx.v1_3.Bom13.OrganizationalContact.Builder builderForValue) {
        if (contactBuilder_ == null) {
          ensureContactIsMutable();
          contact_.add(index, builderForValue.build());
          onChanged();
        } else {
          contactBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public Builder addAllContact(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.OrganizationalContact> values) {
        if (contactBuilder_ == null) {
          ensureContactIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, contact_);
          onChanged();
        } else {
          contactBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public Builder clearContact() {
        if (contactBuilder_ == null) {
          contact_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          contactBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public Builder removeContact(int index) {
        if (contactBuilder_ == null) {
          ensureContactIsMutable();
          contact_.remove(index);
          onChanged();
        } else {
          contactBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalContact.Builder getContactBuilder(
          int index) {
        return getContactFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder getContactOrBuilder(
          int index) {
        if (contactBuilder_ == null) {
          return contact_.get(index);  } else {
          return contactBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder> 
           getContactOrBuilderList() {
        if (contactBuilder_ != null) {
          return contactBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(contact_);
        }
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalContact.Builder addContactBuilder() {
        return getContactFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.OrganizationalContact.getDefaultInstance());
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalContact.Builder addContactBuilder(
          int index) {
        return getContactFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.OrganizationalContact.getDefaultInstance());
      }
      /**
       * <pre>
       * A contact person at the organization. Multiple contacts are allowed.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.OrganizationalContact contact = 3;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.OrganizationalContact.Builder> 
           getContactBuilderList() {
        return getContactFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.OrganizationalContact, cyclonedx.v1_3.Bom13.OrganizationalContact.Builder, cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder> 
          getContactFieldBuilder() {
        if (contactBuilder_ == null) {
          contactBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.OrganizationalContact, cyclonedx.v1_3.Bom13.OrganizationalContact.Builder, cyclonedx.v1_3.Bom13.OrganizationalContactOrBuilder>(
                  contact_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          contact_ = null;
        }
        return contactBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.OrganizationalEntity)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.OrganizationalEntity)
    private static final cyclonedx.v1_3.Bom13.OrganizationalEntity DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.OrganizationalEntity();
    }

    public static cyclonedx.v1_3.Bom13.OrganizationalEntity getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OrganizationalEntity>
        PARSER = new com.google.protobuf.AbstractParser<OrganizationalEntity>() {
      @java.lang.Override
      public OrganizationalEntity parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<OrganizationalEntity> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OrganizationalEntity> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.OrganizationalEntity getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PatchOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Patch)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality
     * </pre>
     *
     * <code>.cyclonedx.v1_3.PatchClassification type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality
     * </pre>
     *
     * <code>.cyclonedx.v1_3.PatchClassification type = 1;</code>
     * @return The type.
     */
    cyclonedx.v1_3.Bom13.PatchClassification getType();

    /**
     * <pre>
     * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
     * @return Whether the diff field is set.
     */
    boolean hasDiff();
    /**
     * <pre>
     * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
     * @return The diff.
     */
    cyclonedx.v1_3.Bom13.Diff getDiff();
    /**
     * <pre>
     * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
     */
    cyclonedx.v1_3.Bom13.DiffOrBuilder getDiffOrBuilder();

    /**
     * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Issue> 
        getResolvesList();
    /**
     * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
     */
    cyclonedx.v1_3.Bom13.Issue getResolves(int index);
    /**
     * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
     */
    int getResolvesCount();
    /**
     * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.IssueOrBuilder> 
        getResolvesOrBuilderList();
    /**
     * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
     */
    cyclonedx.v1_3.Bom13.IssueOrBuilder getResolvesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.Patch}
   */
  public static final class Patch extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Patch)
      PatchOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Patch.class.getName());
    }
    // Use Patch.newBuilder() to construct.
    private Patch(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Patch() {
      type_ = 0;
      resolves_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Patch_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Patch_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Patch.class, cyclonedx.v1_3.Bom13.Patch.Builder.class);
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <pre>
     * Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality
     * </pre>
     *
     * <code>.cyclonedx.v1_3.PatchClassification type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality
     * </pre>
     *
     * <code>.cyclonedx.v1_3.PatchClassification type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public cyclonedx.v1_3.Bom13.PatchClassification getType() {
      cyclonedx.v1_3.Bom13.PatchClassification result = cyclonedx.v1_3.Bom13.PatchClassification.forNumber(type_);
      return result == null ? cyclonedx.v1_3.Bom13.PatchClassification.UNRECOGNIZED : result;
    }

    public static final int DIFF_FIELD_NUMBER = 2;
    private cyclonedx.v1_3.Bom13.Diff diff_;
    /**
     * <pre>
     * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
     * @return Whether the diff field is set.
     */
    @java.lang.Override
    public boolean hasDiff() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
     * @return The diff.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Diff getDiff() {
      return diff_ == null ? cyclonedx.v1_3.Bom13.Diff.getDefaultInstance() : diff_;
    }
    /**
     * <pre>
     * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.DiffOrBuilder getDiffOrBuilder() {
      return diff_ == null ? cyclonedx.v1_3.Bom13.Diff.getDefaultInstance() : diff_;
    }

    public static final int RESOLVES_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Issue> resolves_;
    /**
     * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Issue> getResolvesList() {
      return resolves_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.IssueOrBuilder> 
        getResolvesOrBuilderList() {
      return resolves_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
     */
    @java.lang.Override
    public int getResolvesCount() {
      return resolves_.size();
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Issue getResolves(int index) {
      return resolves_.get(index);
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.IssueOrBuilder getResolvesOrBuilder(
        int index) {
      return resolves_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != cyclonedx.v1_3.Bom13.PatchClassification.PATCH_CLASSIFICATION_NULL.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getDiff());
      }
      for (int i = 0; i < resolves_.size(); i++) {
        output.writeMessage(3, resolves_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != cyclonedx.v1_3.Bom13.PatchClassification.PATCH_CLASSIFICATION_NULL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getDiff());
      }
      for (int i = 0; i < resolves_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, resolves_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Patch)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Patch other = (cyclonedx.v1_3.Bom13.Patch) obj;

      if (type_ != other.type_) return false;
      if (hasDiff() != other.hasDiff()) return false;
      if (hasDiff()) {
        if (!getDiff()
            .equals(other.getDiff())) return false;
      }
      if (!getResolvesList()
          .equals(other.getResolvesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      if (hasDiff()) {
        hash = (37 * hash) + DIFF_FIELD_NUMBER;
        hash = (53 * hash) + getDiff().hashCode();
      }
      if (getResolvesCount() > 0) {
        hash = (37 * hash) + RESOLVES_FIELD_NUMBER;
        hash = (53 * hash) + getResolvesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Patch parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Patch parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Patch parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Patch parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Patch parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Patch parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Patch parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Patch parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Patch parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Patch parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Patch parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Patch parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Patch prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.Patch}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Patch)
        cyclonedx.v1_3.Bom13.PatchOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Patch_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Patch_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Patch.class, cyclonedx.v1_3.Bom13.Patch.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Patch.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getDiffFieldBuilder();
          getResolvesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        diff_ = null;
        if (diffBuilder_ != null) {
          diffBuilder_.dispose();
          diffBuilder_ = null;
        }
        if (resolvesBuilder_ == null) {
          resolves_ = java.util.Collections.emptyList();
        } else {
          resolves_ = null;
          resolvesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Patch_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Patch getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Patch.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Patch build() {
        cyclonedx.v1_3.Bom13.Patch result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Patch buildPartial() {
        cyclonedx.v1_3.Bom13.Patch result = new cyclonedx.v1_3.Bom13.Patch(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(cyclonedx.v1_3.Bom13.Patch result) {
        if (resolvesBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            resolves_ = java.util.Collections.unmodifiableList(resolves_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.resolves_ = resolves_;
        } else {
          result.resolves_ = resolvesBuilder_.build();
        }
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Patch result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.diff_ = diffBuilder_ == null
              ? diff_
              : diffBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Patch) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Patch)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Patch other) {
        if (other == cyclonedx.v1_3.Bom13.Patch.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.hasDiff()) {
          mergeDiff(other.getDiff());
        }
        if (resolvesBuilder_ == null) {
          if (!other.resolves_.isEmpty()) {
            if (resolves_.isEmpty()) {
              resolves_ = other.resolves_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureResolvesIsMutable();
              resolves_.addAll(other.resolves_);
            }
            onChanged();
          }
        } else {
          if (!other.resolves_.isEmpty()) {
            if (resolvesBuilder_.isEmpty()) {
              resolvesBuilder_.dispose();
              resolvesBuilder_ = null;
              resolves_ = other.resolves_;
              bitField0_ = (bitField0_ & ~0x00000004);
              resolvesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getResolvesFieldBuilder() : null;
            } else {
              resolvesBuilder_.addAllMessages(other.resolves_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getDiffFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                cyclonedx.v1_3.Bom13.Issue m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Issue.parser(),
                        extensionRegistry);
                if (resolvesBuilder_ == null) {
                  ensureResolvesIsMutable();
                  resolves_.add(m);
                } else {
                  resolvesBuilder_.addMessage(m);
                }
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <pre>
       * Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality
       * </pre>
       *
       * <code>.cyclonedx.v1_3.PatchClassification type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality
       * </pre>
       *
       * <code>.cyclonedx.v1_3.PatchClassification type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality
       * </pre>
       *
       * <code>.cyclonedx.v1_3.PatchClassification type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public cyclonedx.v1_3.Bom13.PatchClassification getType() {
        cyclonedx.v1_3.Bom13.PatchClassification result = cyclonedx.v1_3.Bom13.PatchClassification.forNumber(type_);
        return result == null ? cyclonedx.v1_3.Bom13.PatchClassification.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality
       * </pre>
       *
       * <code>.cyclonedx.v1_3.PatchClassification type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(cyclonedx.v1_3.Bom13.PatchClassification value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality
       * </pre>
       *
       * <code>.cyclonedx.v1_3.PatchClassification type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private cyclonedx.v1_3.Bom13.Diff diff_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.Diff, cyclonedx.v1_3.Bom13.Diff.Builder, cyclonedx.v1_3.Bom13.DiffOrBuilder> diffBuilder_;
      /**
       * <pre>
       * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
       * @return Whether the diff field is set.
       */
      public boolean hasDiff() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
       * @return The diff.
       */
      public cyclonedx.v1_3.Bom13.Diff getDiff() {
        if (diffBuilder_ == null) {
          return diff_ == null ? cyclonedx.v1_3.Bom13.Diff.getDefaultInstance() : diff_;
        } else {
          return diffBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
       */
      public Builder setDiff(cyclonedx.v1_3.Bom13.Diff value) {
        if (diffBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          diff_ = value;
        } else {
          diffBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
       */
      public Builder setDiff(
          cyclonedx.v1_3.Bom13.Diff.Builder builderForValue) {
        if (diffBuilder_ == null) {
          diff_ = builderForValue.build();
        } else {
          diffBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
       */
      public Builder mergeDiff(cyclonedx.v1_3.Bom13.Diff value) {
        if (diffBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            diff_ != null &&
            diff_ != cyclonedx.v1_3.Bom13.Diff.getDefaultInstance()) {
            getDiffBuilder().mergeFrom(value);
          } else {
            diff_ = value;
          }
        } else {
          diffBuilder_.mergeFrom(value);
        }
        if (diff_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
       */
      public Builder clearDiff() {
        bitField0_ = (bitField0_ & ~0x00000002);
        diff_ = null;
        if (diffBuilder_ != null) {
          diffBuilder_.dispose();
          diffBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.Diff.Builder getDiffBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getDiffFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.DiffOrBuilder getDiffOrBuilder() {
        if (diffBuilder_ != null) {
          return diffBuilder_.getMessageOrBuilder();
        } else {
          return diff_ == null ?
              cyclonedx.v1_3.Bom13.Diff.getDefaultInstance() : diff_;
        }
      }
      /**
       * <pre>
       * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.Diff diff = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.Diff, cyclonedx.v1_3.Bom13.Diff.Builder, cyclonedx.v1_3.Bom13.DiffOrBuilder> 
          getDiffFieldBuilder() {
        if (diffBuilder_ == null) {
          diffBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.Diff, cyclonedx.v1_3.Bom13.Diff.Builder, cyclonedx.v1_3.Bom13.DiffOrBuilder>(
                  getDiff(),
                  getParentForChildren(),
                  isClean());
          diff_ = null;
        }
        return diffBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Issue> resolves_ =
        java.util.Collections.emptyList();
      private void ensureResolvesIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          resolves_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Issue>(resolves_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Issue, cyclonedx.v1_3.Bom13.Issue.Builder, cyclonedx.v1_3.Bom13.IssueOrBuilder> resolvesBuilder_;

      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Issue> getResolvesList() {
        if (resolvesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(resolves_);
        } else {
          return resolvesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public int getResolvesCount() {
        if (resolvesBuilder_ == null) {
          return resolves_.size();
        } else {
          return resolvesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.Issue getResolves(int index) {
        if (resolvesBuilder_ == null) {
          return resolves_.get(index);
        } else {
          return resolvesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public Builder setResolves(
          int index, cyclonedx.v1_3.Bom13.Issue value) {
        if (resolvesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResolvesIsMutable();
          resolves_.set(index, value);
          onChanged();
        } else {
          resolvesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public Builder setResolves(
          int index, cyclonedx.v1_3.Bom13.Issue.Builder builderForValue) {
        if (resolvesBuilder_ == null) {
          ensureResolvesIsMutable();
          resolves_.set(index, builderForValue.build());
          onChanged();
        } else {
          resolvesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public Builder addResolves(cyclonedx.v1_3.Bom13.Issue value) {
        if (resolvesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResolvesIsMutable();
          resolves_.add(value);
          onChanged();
        } else {
          resolvesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public Builder addResolves(
          int index, cyclonedx.v1_3.Bom13.Issue value) {
        if (resolvesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResolvesIsMutable();
          resolves_.add(index, value);
          onChanged();
        } else {
          resolvesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public Builder addResolves(
          cyclonedx.v1_3.Bom13.Issue.Builder builderForValue) {
        if (resolvesBuilder_ == null) {
          ensureResolvesIsMutable();
          resolves_.add(builderForValue.build());
          onChanged();
        } else {
          resolvesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public Builder addResolves(
          int index, cyclonedx.v1_3.Bom13.Issue.Builder builderForValue) {
        if (resolvesBuilder_ == null) {
          ensureResolvesIsMutable();
          resolves_.add(index, builderForValue.build());
          onChanged();
        } else {
          resolvesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public Builder addAllResolves(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Issue> values) {
        if (resolvesBuilder_ == null) {
          ensureResolvesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, resolves_);
          onChanged();
        } else {
          resolvesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public Builder clearResolves() {
        if (resolvesBuilder_ == null) {
          resolves_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          resolvesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public Builder removeResolves(int index) {
        if (resolvesBuilder_ == null) {
          ensureResolvesIsMutable();
          resolves_.remove(index);
          onChanged();
        } else {
          resolvesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.Issue.Builder getResolvesBuilder(
          int index) {
        return getResolvesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.IssueOrBuilder getResolvesOrBuilder(
          int index) {
        if (resolvesBuilder_ == null) {
          return resolves_.get(index);  } else {
          return resolvesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.IssueOrBuilder> 
           getResolvesOrBuilderList() {
        if (resolvesBuilder_ != null) {
          return resolvesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(resolves_);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.Issue.Builder addResolvesBuilder() {
        return getResolvesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Issue.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.Issue.Builder addResolvesBuilder(
          int index) {
        return getResolvesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Issue.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Issue resolves = 3;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Issue.Builder> 
           getResolvesBuilderList() {
        return getResolvesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Issue, cyclonedx.v1_3.Bom13.Issue.Builder, cyclonedx.v1_3.Bom13.IssueOrBuilder> 
          getResolvesFieldBuilder() {
        if (resolvesBuilder_ == null) {
          resolvesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Issue, cyclonedx.v1_3.Bom13.Issue.Builder, cyclonedx.v1_3.Bom13.IssueOrBuilder>(
                  resolves_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          resolves_ = null;
        }
        return resolvesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Patch)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Patch)
    private static final cyclonedx.v1_3.Bom13.Patch DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Patch();
    }

    public static cyclonedx.v1_3.Bom13.Patch getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Patch>
        PARSER = new com.google.protobuf.AbstractParser<Patch>() {
      @java.lang.Override
      public Patch parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Patch> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Patch> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Patch getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PedigreeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Pedigree)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Component> 
        getAncestorsList();
    /**
     * <pre>
     * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
     */
    cyclonedx.v1_3.Bom13.Component getAncestors(int index);
    /**
     * <pre>
     * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
     */
    int getAncestorsCount();
    /**
     * <pre>
     * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
        getAncestorsOrBuilderList();
    /**
     * <pre>
     * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
     */
    cyclonedx.v1_3.Bom13.ComponentOrBuilder getAncestorsOrBuilder(
        int index);

    /**
     * <pre>
     * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Component> 
        getDescendantsList();
    /**
     * <pre>
     * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
     */
    cyclonedx.v1_3.Bom13.Component getDescendants(int index);
    /**
     * <pre>
     * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
     */
    int getDescendantsCount();
    /**
     * <pre>
     * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
        getDescendantsOrBuilderList();
    /**
     * <pre>
     * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
     */
    cyclonedx.v1_3.Bom13.ComponentOrBuilder getDescendantsOrBuilder(
        int index);

    /**
     * <pre>
     * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Component> 
        getVariantsList();
    /**
     * <pre>
     * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
     */
    cyclonedx.v1_3.Bom13.Component getVariants(int index);
    /**
     * <pre>
     * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
     */
    int getVariantsCount();
    /**
     * <pre>
     * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
        getVariantsOrBuilderList();
    /**
     * <pre>
     * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
     */
    cyclonedx.v1_3.Bom13.ComponentOrBuilder getVariantsOrBuilder(
        int index);

    /**
     * <pre>
     * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Commit> 
        getCommitsList();
    /**
     * <pre>
     * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
     */
    cyclonedx.v1_3.Bom13.Commit getCommits(int index);
    /**
     * <pre>
     * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
     */
    int getCommitsCount();
    /**
     * <pre>
     * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.CommitOrBuilder> 
        getCommitsOrBuilderList();
    /**
     * <pre>
     * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
     */
    cyclonedx.v1_3.Bom13.CommitOrBuilder getCommitsOrBuilder(
        int index);

    /**
     * <pre>
     * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Patch> 
        getPatchesList();
    /**
     * <pre>
     * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
     */
    cyclonedx.v1_3.Bom13.Patch getPatches(int index);
    /**
     * <pre>
     * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
     */
    int getPatchesCount();
    /**
     * <pre>
     * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.PatchOrBuilder> 
        getPatchesOrBuilderList();
    /**
     * <pre>
     * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
     */
    cyclonedx.v1_3.Bom13.PatchOrBuilder getPatchesOrBuilder(
        int index);

    /**
     * <pre>
     * Notes, observations, and other non-structured commentary describing the components pedigree.
     * </pre>
     *
     * <code>optional string notes = 6;</code>
     * @return Whether the notes field is set.
     */
    boolean hasNotes();
    /**
     * <pre>
     * Notes, observations, and other non-structured commentary describing the components pedigree.
     * </pre>
     *
     * <code>optional string notes = 6;</code>
     * @return The notes.
     */
    java.lang.String getNotes();
    /**
     * <pre>
     * Notes, observations, and other non-structured commentary describing the components pedigree.
     * </pre>
     *
     * <code>optional string notes = 6;</code>
     * @return The bytes for notes.
     */
    com.google.protobuf.ByteString
        getNotesBytes();
  }
  /**
   * <pre>
   * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc. Pedigree supports viewing this complex chain from the beginning, the end, or anywhere in the middle. It also provides a way to document variants where the exact relation may not be known.
   * </pre>
   *
   * Protobuf type {@code cyclonedx.v1_3.Pedigree}
   */
  public static final class Pedigree extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Pedigree)
      PedigreeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Pedigree.class.getName());
    }
    // Use Pedigree.newBuilder() to construct.
    private Pedigree(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Pedigree() {
      ancestors_ = java.util.Collections.emptyList();
      descendants_ = java.util.Collections.emptyList();
      variants_ = java.util.Collections.emptyList();
      commits_ = java.util.Collections.emptyList();
      patches_ = java.util.Collections.emptyList();
      notes_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Pedigree_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Pedigree_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Pedigree.class, cyclonedx.v1_3.Bom13.Pedigree.Builder.class);
    }

    private int bitField0_;
    public static final int ANCESTORS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Component> ancestors_;
    /**
     * <pre>
     * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Component> getAncestorsList() {
      return ancestors_;
    }
    /**
     * <pre>
     * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
        getAncestorsOrBuilderList() {
      return ancestors_;
    }
    /**
     * <pre>
     * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
     */
    @java.lang.Override
    public int getAncestorsCount() {
      return ancestors_.size();
    }
    /**
     * <pre>
     * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Component getAncestors(int index) {
      return ancestors_.get(index);
    }
    /**
     * <pre>
     * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ComponentOrBuilder getAncestorsOrBuilder(
        int index) {
      return ancestors_.get(index);
    }

    public static final int DESCENDANTS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Component> descendants_;
    /**
     * <pre>
     * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Component> getDescendantsList() {
      return descendants_;
    }
    /**
     * <pre>
     * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
        getDescendantsOrBuilderList() {
      return descendants_;
    }
    /**
     * <pre>
     * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
     */
    @java.lang.Override
    public int getDescendantsCount() {
      return descendants_.size();
    }
    /**
     * <pre>
     * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Component getDescendants(int index) {
      return descendants_.get(index);
    }
    /**
     * <pre>
     * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ComponentOrBuilder getDescendantsOrBuilder(
        int index) {
      return descendants_.get(index);
    }

    public static final int VARIANTS_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Component> variants_;
    /**
     * <pre>
     * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Component> getVariantsList() {
      return variants_;
    }
    /**
     * <pre>
     * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
        getVariantsOrBuilderList() {
      return variants_;
    }
    /**
     * <pre>
     * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
     */
    @java.lang.Override
    public int getVariantsCount() {
      return variants_.size();
    }
    /**
     * <pre>
     * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Component getVariants(int index) {
      return variants_.get(index);
    }
    /**
     * <pre>
     * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ComponentOrBuilder getVariantsOrBuilder(
        int index) {
      return variants_.get(index);
    }

    public static final int COMMITS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Commit> commits_;
    /**
     * <pre>
     * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Commit> getCommitsList() {
      return commits_;
    }
    /**
     * <pre>
     * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.CommitOrBuilder> 
        getCommitsOrBuilderList() {
      return commits_;
    }
    /**
     * <pre>
     * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
     */
    @java.lang.Override
    public int getCommitsCount() {
      return commits_.size();
    }
    /**
     * <pre>
     * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Commit getCommits(int index) {
      return commits_.get(index);
    }
    /**
     * <pre>
     * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.CommitOrBuilder getCommitsOrBuilder(
        int index) {
      return commits_.get(index);
    }

    public static final int PATCHES_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Patch> patches_;
    /**
     * <pre>
     * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Patch> getPatchesList() {
      return patches_;
    }
    /**
     * <pre>
     * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.PatchOrBuilder> 
        getPatchesOrBuilderList() {
      return patches_;
    }
    /**
     * <pre>
     * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
     */
    @java.lang.Override
    public int getPatchesCount() {
      return patches_.size();
    }
    /**
     * <pre>
     * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Patch getPatches(int index) {
      return patches_.get(index);
    }
    /**
     * <pre>
     * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.PatchOrBuilder getPatchesOrBuilder(
        int index) {
      return patches_.get(index);
    }

    public static final int NOTES_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private volatile java.lang.Object notes_ = "";
    /**
     * <pre>
     * Notes, observations, and other non-structured commentary describing the components pedigree.
     * </pre>
     *
     * <code>optional string notes = 6;</code>
     * @return Whether the notes field is set.
     */
    @java.lang.Override
    public boolean hasNotes() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Notes, observations, and other non-structured commentary describing the components pedigree.
     * </pre>
     *
     * <code>optional string notes = 6;</code>
     * @return The notes.
     */
    @java.lang.Override
    public java.lang.String getNotes() {
      java.lang.Object ref = notes_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        notes_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Notes, observations, and other non-structured commentary describing the components pedigree.
     * </pre>
     *
     * <code>optional string notes = 6;</code>
     * @return The bytes for notes.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNotesBytes() {
      java.lang.Object ref = notes_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        notes_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < ancestors_.size(); i++) {
        output.writeMessage(1, ancestors_.get(i));
      }
      for (int i = 0; i < descendants_.size(); i++) {
        output.writeMessage(2, descendants_.get(i));
      }
      for (int i = 0; i < variants_.size(); i++) {
        output.writeMessage(3, variants_.get(i));
      }
      for (int i = 0; i < commits_.size(); i++) {
        output.writeMessage(4, commits_.get(i));
      }
      for (int i = 0; i < patches_.size(); i++) {
        output.writeMessage(5, patches_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 6, notes_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < ancestors_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, ancestors_.get(i));
      }
      for (int i = 0; i < descendants_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, descendants_.get(i));
      }
      for (int i = 0; i < variants_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, variants_.get(i));
      }
      for (int i = 0; i < commits_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, commits_.get(i));
      }
      for (int i = 0; i < patches_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, patches_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(6, notes_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Pedigree)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Pedigree other = (cyclonedx.v1_3.Bom13.Pedigree) obj;

      if (!getAncestorsList()
          .equals(other.getAncestorsList())) return false;
      if (!getDescendantsList()
          .equals(other.getDescendantsList())) return false;
      if (!getVariantsList()
          .equals(other.getVariantsList())) return false;
      if (!getCommitsList()
          .equals(other.getCommitsList())) return false;
      if (!getPatchesList()
          .equals(other.getPatchesList())) return false;
      if (hasNotes() != other.hasNotes()) return false;
      if (hasNotes()) {
        if (!getNotes()
            .equals(other.getNotes())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getAncestorsCount() > 0) {
        hash = (37 * hash) + ANCESTORS_FIELD_NUMBER;
        hash = (53 * hash) + getAncestorsList().hashCode();
      }
      if (getDescendantsCount() > 0) {
        hash = (37 * hash) + DESCENDANTS_FIELD_NUMBER;
        hash = (53 * hash) + getDescendantsList().hashCode();
      }
      if (getVariantsCount() > 0) {
        hash = (37 * hash) + VARIANTS_FIELD_NUMBER;
        hash = (53 * hash) + getVariantsList().hashCode();
      }
      if (getCommitsCount() > 0) {
        hash = (37 * hash) + COMMITS_FIELD_NUMBER;
        hash = (53 * hash) + getCommitsList().hashCode();
      }
      if (getPatchesCount() > 0) {
        hash = (37 * hash) + PATCHES_FIELD_NUMBER;
        hash = (53 * hash) + getPatchesList().hashCode();
      }
      if (hasNotes()) {
        hash = (37 * hash) + NOTES_FIELD_NUMBER;
        hash = (53 * hash) + getNotes().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Pedigree parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Pedigree parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Pedigree parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Pedigree parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Pedigree parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Pedigree parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Pedigree parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Pedigree parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Pedigree parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Pedigree parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Pedigree parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Pedigree parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Pedigree prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc. Pedigree supports viewing this complex chain from the beginning, the end, or anywhere in the middle. It also provides a way to document variants where the exact relation may not be known.
     * </pre>
     *
     * Protobuf type {@code cyclonedx.v1_3.Pedigree}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Pedigree)
        cyclonedx.v1_3.Bom13.PedigreeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Pedigree_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Pedigree_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Pedigree.class, cyclonedx.v1_3.Bom13.Pedigree.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Pedigree.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (ancestorsBuilder_ == null) {
          ancestors_ = java.util.Collections.emptyList();
        } else {
          ancestors_ = null;
          ancestorsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (descendantsBuilder_ == null) {
          descendants_ = java.util.Collections.emptyList();
        } else {
          descendants_ = null;
          descendantsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (variantsBuilder_ == null) {
          variants_ = java.util.Collections.emptyList();
        } else {
          variants_ = null;
          variantsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (commitsBuilder_ == null) {
          commits_ = java.util.Collections.emptyList();
        } else {
          commits_ = null;
          commitsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (patchesBuilder_ == null) {
          patches_ = java.util.Collections.emptyList();
        } else {
          patches_ = null;
          patchesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        notes_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Pedigree_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Pedigree getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Pedigree.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Pedigree build() {
        cyclonedx.v1_3.Bom13.Pedigree result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Pedigree buildPartial() {
        cyclonedx.v1_3.Bom13.Pedigree result = new cyclonedx.v1_3.Bom13.Pedigree(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(cyclonedx.v1_3.Bom13.Pedigree result) {
        if (ancestorsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            ancestors_ = java.util.Collections.unmodifiableList(ancestors_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.ancestors_ = ancestors_;
        } else {
          result.ancestors_ = ancestorsBuilder_.build();
        }
        if (descendantsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            descendants_ = java.util.Collections.unmodifiableList(descendants_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.descendants_ = descendants_;
        } else {
          result.descendants_ = descendantsBuilder_.build();
        }
        if (variantsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            variants_ = java.util.Collections.unmodifiableList(variants_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.variants_ = variants_;
        } else {
          result.variants_ = variantsBuilder_.build();
        }
        if (commitsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            commits_ = java.util.Collections.unmodifiableList(commits_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.commits_ = commits_;
        } else {
          result.commits_ = commitsBuilder_.build();
        }
        if (patchesBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            patches_ = java.util.Collections.unmodifiableList(patches_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.patches_ = patches_;
        } else {
          result.patches_ = patchesBuilder_.build();
        }
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Pedigree result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.notes_ = notes_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Pedigree) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Pedigree)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Pedigree other) {
        if (other == cyclonedx.v1_3.Bom13.Pedigree.getDefaultInstance()) return this;
        if (ancestorsBuilder_ == null) {
          if (!other.ancestors_.isEmpty()) {
            if (ancestors_.isEmpty()) {
              ancestors_ = other.ancestors_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureAncestorsIsMutable();
              ancestors_.addAll(other.ancestors_);
            }
            onChanged();
          }
        } else {
          if (!other.ancestors_.isEmpty()) {
            if (ancestorsBuilder_.isEmpty()) {
              ancestorsBuilder_.dispose();
              ancestorsBuilder_ = null;
              ancestors_ = other.ancestors_;
              bitField0_ = (bitField0_ & ~0x00000001);
              ancestorsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAncestorsFieldBuilder() : null;
            } else {
              ancestorsBuilder_.addAllMessages(other.ancestors_);
            }
          }
        }
        if (descendantsBuilder_ == null) {
          if (!other.descendants_.isEmpty()) {
            if (descendants_.isEmpty()) {
              descendants_ = other.descendants_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureDescendantsIsMutable();
              descendants_.addAll(other.descendants_);
            }
            onChanged();
          }
        } else {
          if (!other.descendants_.isEmpty()) {
            if (descendantsBuilder_.isEmpty()) {
              descendantsBuilder_.dispose();
              descendantsBuilder_ = null;
              descendants_ = other.descendants_;
              bitField0_ = (bitField0_ & ~0x00000002);
              descendantsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDescendantsFieldBuilder() : null;
            } else {
              descendantsBuilder_.addAllMessages(other.descendants_);
            }
          }
        }
        if (variantsBuilder_ == null) {
          if (!other.variants_.isEmpty()) {
            if (variants_.isEmpty()) {
              variants_ = other.variants_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureVariantsIsMutable();
              variants_.addAll(other.variants_);
            }
            onChanged();
          }
        } else {
          if (!other.variants_.isEmpty()) {
            if (variantsBuilder_.isEmpty()) {
              variantsBuilder_.dispose();
              variantsBuilder_ = null;
              variants_ = other.variants_;
              bitField0_ = (bitField0_ & ~0x00000004);
              variantsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getVariantsFieldBuilder() : null;
            } else {
              variantsBuilder_.addAllMessages(other.variants_);
            }
          }
        }
        if (commitsBuilder_ == null) {
          if (!other.commits_.isEmpty()) {
            if (commits_.isEmpty()) {
              commits_ = other.commits_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureCommitsIsMutable();
              commits_.addAll(other.commits_);
            }
            onChanged();
          }
        } else {
          if (!other.commits_.isEmpty()) {
            if (commitsBuilder_.isEmpty()) {
              commitsBuilder_.dispose();
              commitsBuilder_ = null;
              commits_ = other.commits_;
              bitField0_ = (bitField0_ & ~0x00000008);
              commitsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCommitsFieldBuilder() : null;
            } else {
              commitsBuilder_.addAllMessages(other.commits_);
            }
          }
        }
        if (patchesBuilder_ == null) {
          if (!other.patches_.isEmpty()) {
            if (patches_.isEmpty()) {
              patches_ = other.patches_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensurePatchesIsMutable();
              patches_.addAll(other.patches_);
            }
            onChanged();
          }
        } else {
          if (!other.patches_.isEmpty()) {
            if (patchesBuilder_.isEmpty()) {
              patchesBuilder_.dispose();
              patchesBuilder_ = null;
              patches_ = other.patches_;
              bitField0_ = (bitField0_ & ~0x00000010);
              patchesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPatchesFieldBuilder() : null;
            } else {
              patchesBuilder_.addAllMessages(other.patches_);
            }
          }
        }
        if (other.hasNotes()) {
          notes_ = other.notes_;
          bitField0_ |= 0x00000020;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                cyclonedx.v1_3.Bom13.Component m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Component.parser(),
                        extensionRegistry);
                if (ancestorsBuilder_ == null) {
                  ensureAncestorsIsMutable();
                  ancestors_.add(m);
                } else {
                  ancestorsBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                cyclonedx.v1_3.Bom13.Component m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Component.parser(),
                        extensionRegistry);
                if (descendantsBuilder_ == null) {
                  ensureDescendantsIsMutable();
                  descendants_.add(m);
                } else {
                  descendantsBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 26: {
                cyclonedx.v1_3.Bom13.Component m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Component.parser(),
                        extensionRegistry);
                if (variantsBuilder_ == null) {
                  ensureVariantsIsMutable();
                  variants_.add(m);
                } else {
                  variantsBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                cyclonedx.v1_3.Bom13.Commit m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Commit.parser(),
                        extensionRegistry);
                if (commitsBuilder_ == null) {
                  ensureCommitsIsMutable();
                  commits_.add(m);
                } else {
                  commitsBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 42: {
                cyclonedx.v1_3.Bom13.Patch m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Patch.parser(),
                        extensionRegistry);
                if (patchesBuilder_ == null) {
                  ensurePatchesIsMutable();
                  patches_.add(m);
                } else {
                  patchesBuilder_.addMessage(m);
                }
                break;
              } // case 42
              case 50: {
                notes_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<cyclonedx.v1_3.Bom13.Component> ancestors_ =
        java.util.Collections.emptyList();
      private void ensureAncestorsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          ancestors_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Component>(ancestors_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder> ancestorsBuilder_;

      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Component> getAncestorsList() {
        if (ancestorsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(ancestors_);
        } else {
          return ancestorsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public int getAncestorsCount() {
        if (ancestorsBuilder_ == null) {
          return ancestors_.size();
        } else {
          return ancestorsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public cyclonedx.v1_3.Bom13.Component getAncestors(int index) {
        if (ancestorsBuilder_ == null) {
          return ancestors_.get(index);
        } else {
          return ancestorsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public Builder setAncestors(
          int index, cyclonedx.v1_3.Bom13.Component value) {
        if (ancestorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAncestorsIsMutable();
          ancestors_.set(index, value);
          onChanged();
        } else {
          ancestorsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public Builder setAncestors(
          int index, cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (ancestorsBuilder_ == null) {
          ensureAncestorsIsMutable();
          ancestors_.set(index, builderForValue.build());
          onChanged();
        } else {
          ancestorsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public Builder addAncestors(cyclonedx.v1_3.Bom13.Component value) {
        if (ancestorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAncestorsIsMutable();
          ancestors_.add(value);
          onChanged();
        } else {
          ancestorsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public Builder addAncestors(
          int index, cyclonedx.v1_3.Bom13.Component value) {
        if (ancestorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAncestorsIsMutable();
          ancestors_.add(index, value);
          onChanged();
        } else {
          ancestorsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public Builder addAncestors(
          cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (ancestorsBuilder_ == null) {
          ensureAncestorsIsMutable();
          ancestors_.add(builderForValue.build());
          onChanged();
        } else {
          ancestorsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public Builder addAncestors(
          int index, cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (ancestorsBuilder_ == null) {
          ensureAncestorsIsMutable();
          ancestors_.add(index, builderForValue.build());
          onChanged();
        } else {
          ancestorsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public Builder addAllAncestors(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Component> values) {
        if (ancestorsBuilder_ == null) {
          ensureAncestorsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, ancestors_);
          onChanged();
        } else {
          ancestorsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public Builder clearAncestors() {
        if (ancestorsBuilder_ == null) {
          ancestors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          ancestorsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public Builder removeAncestors(int index) {
        if (ancestorsBuilder_ == null) {
          ensureAncestorsIsMutable();
          ancestors_.remove(index);
          onChanged();
        } else {
          ancestorsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder getAncestorsBuilder(
          int index) {
        return getAncestorsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public cyclonedx.v1_3.Bom13.ComponentOrBuilder getAncestorsOrBuilder(
          int index) {
        if (ancestorsBuilder_ == null) {
          return ancestors_.get(index);  } else {
          return ancestorsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
           getAncestorsOrBuilderList() {
        if (ancestorsBuilder_ != null) {
          return ancestorsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(ancestors_);
        }
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder addAncestorsBuilder() {
        return getAncestorsFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Component.getDefaultInstance());
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder addAncestorsBuilder(
          int index) {
        return getAncestorsFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Component.getDefaultInstance());
      }
      /**
       * <pre>
       * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component ancestors = 1;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Component.Builder> 
           getAncestorsBuilderList() {
        return getAncestorsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
          getAncestorsFieldBuilder() {
        if (ancestorsBuilder_ == null) {
          ancestorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder>(
                  ancestors_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          ancestors_ = null;
        }
        return ancestorsBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Component> descendants_ =
        java.util.Collections.emptyList();
      private void ensureDescendantsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          descendants_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Component>(descendants_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder> descendantsBuilder_;

      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Component> getDescendantsList() {
        if (descendantsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(descendants_);
        } else {
          return descendantsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public int getDescendantsCount() {
        if (descendantsBuilder_ == null) {
          return descendants_.size();
        } else {
          return descendantsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.Component getDescendants(int index) {
        if (descendantsBuilder_ == null) {
          return descendants_.get(index);
        } else {
          return descendantsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public Builder setDescendants(
          int index, cyclonedx.v1_3.Bom13.Component value) {
        if (descendantsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDescendantsIsMutable();
          descendants_.set(index, value);
          onChanged();
        } else {
          descendantsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public Builder setDescendants(
          int index, cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (descendantsBuilder_ == null) {
          ensureDescendantsIsMutable();
          descendants_.set(index, builderForValue.build());
          onChanged();
        } else {
          descendantsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public Builder addDescendants(cyclonedx.v1_3.Bom13.Component value) {
        if (descendantsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDescendantsIsMutable();
          descendants_.add(value);
          onChanged();
        } else {
          descendantsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public Builder addDescendants(
          int index, cyclonedx.v1_3.Bom13.Component value) {
        if (descendantsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDescendantsIsMutable();
          descendants_.add(index, value);
          onChanged();
        } else {
          descendantsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public Builder addDescendants(
          cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (descendantsBuilder_ == null) {
          ensureDescendantsIsMutable();
          descendants_.add(builderForValue.build());
          onChanged();
        } else {
          descendantsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public Builder addDescendants(
          int index, cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (descendantsBuilder_ == null) {
          ensureDescendantsIsMutable();
          descendants_.add(index, builderForValue.build());
          onChanged();
        } else {
          descendantsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public Builder addAllDescendants(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Component> values) {
        if (descendantsBuilder_ == null) {
          ensureDescendantsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, descendants_);
          onChanged();
        } else {
          descendantsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public Builder clearDescendants() {
        if (descendantsBuilder_ == null) {
          descendants_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          descendantsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public Builder removeDescendants(int index) {
        if (descendantsBuilder_ == null) {
          ensureDescendantsIsMutable();
          descendants_.remove(index);
          onChanged();
        } else {
          descendantsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder getDescendantsBuilder(
          int index) {
        return getDescendantsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.ComponentOrBuilder getDescendantsOrBuilder(
          int index) {
        if (descendantsBuilder_ == null) {
          return descendants_.get(index);  } else {
          return descendantsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
           getDescendantsOrBuilderList() {
        if (descendantsBuilder_ != null) {
          return descendantsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(descendants_);
        }
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder addDescendantsBuilder() {
        return getDescendantsFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Component.getDefaultInstance());
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder addDescendantsBuilder(
          int index) {
        return getDescendantsFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Component.getDefaultInstance());
      }
      /**
       * <pre>
       * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component descendants = 2;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Component.Builder> 
           getDescendantsBuilderList() {
        return getDescendantsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
          getDescendantsFieldBuilder() {
        if (descendantsBuilder_ == null) {
          descendantsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder>(
                  descendants_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          descendants_ = null;
        }
        return descendantsBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Component> variants_ =
        java.util.Collections.emptyList();
      private void ensureVariantsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          variants_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Component>(variants_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder> variantsBuilder_;

      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Component> getVariantsList() {
        if (variantsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(variants_);
        } else {
          return variantsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public int getVariantsCount() {
        if (variantsBuilder_ == null) {
          return variants_.size();
        } else {
          return variantsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.Component getVariants(int index) {
        if (variantsBuilder_ == null) {
          return variants_.get(index);
        } else {
          return variantsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public Builder setVariants(
          int index, cyclonedx.v1_3.Bom13.Component value) {
        if (variantsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVariantsIsMutable();
          variants_.set(index, value);
          onChanged();
        } else {
          variantsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public Builder setVariants(
          int index, cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (variantsBuilder_ == null) {
          ensureVariantsIsMutable();
          variants_.set(index, builderForValue.build());
          onChanged();
        } else {
          variantsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public Builder addVariants(cyclonedx.v1_3.Bom13.Component value) {
        if (variantsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVariantsIsMutable();
          variants_.add(value);
          onChanged();
        } else {
          variantsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public Builder addVariants(
          int index, cyclonedx.v1_3.Bom13.Component value) {
        if (variantsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVariantsIsMutable();
          variants_.add(index, value);
          onChanged();
        } else {
          variantsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public Builder addVariants(
          cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (variantsBuilder_ == null) {
          ensureVariantsIsMutable();
          variants_.add(builderForValue.build());
          onChanged();
        } else {
          variantsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public Builder addVariants(
          int index, cyclonedx.v1_3.Bom13.Component.Builder builderForValue) {
        if (variantsBuilder_ == null) {
          ensureVariantsIsMutable();
          variants_.add(index, builderForValue.build());
          onChanged();
        } else {
          variantsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public Builder addAllVariants(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Component> values) {
        if (variantsBuilder_ == null) {
          ensureVariantsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, variants_);
          onChanged();
        } else {
          variantsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public Builder clearVariants() {
        if (variantsBuilder_ == null) {
          variants_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          variantsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public Builder removeVariants(int index) {
        if (variantsBuilder_ == null) {
          ensureVariantsIsMutable();
          variants_.remove(index);
          onChanged();
        } else {
          variantsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder getVariantsBuilder(
          int index) {
        return getVariantsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.ComponentOrBuilder getVariantsOrBuilder(
          int index) {
        if (variantsBuilder_ == null) {
          return variants_.get(index);  } else {
          return variantsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
           getVariantsOrBuilderList() {
        if (variantsBuilder_ != null) {
          return variantsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(variants_);
        }
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder addVariantsBuilder() {
        return getVariantsFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Component.getDefaultInstance());
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public cyclonedx.v1_3.Bom13.Component.Builder addVariantsBuilder(
          int index) {
        return getVariantsFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Component.getDefaultInstance());
      }
      /**
       * <pre>
       * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Component variants = 3;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Component.Builder> 
           getVariantsBuilderList() {
        return getVariantsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder> 
          getVariantsFieldBuilder() {
        if (variantsBuilder_ == null) {
          variantsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Component, cyclonedx.v1_3.Bom13.Component.Builder, cyclonedx.v1_3.Bom13.ComponentOrBuilder>(
                  variants_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          variants_ = null;
        }
        return variantsBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Commit> commits_ =
        java.util.Collections.emptyList();
      private void ensureCommitsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          commits_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Commit>(commits_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Commit, cyclonedx.v1_3.Bom13.Commit.Builder, cyclonedx.v1_3.Bom13.CommitOrBuilder> commitsBuilder_;

      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Commit> getCommitsList() {
        if (commitsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(commits_);
        } else {
          return commitsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public int getCommitsCount() {
        if (commitsBuilder_ == null) {
          return commits_.size();
        } else {
          return commitsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.Commit getCommits(int index) {
        if (commitsBuilder_ == null) {
          return commits_.get(index);
        } else {
          return commitsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public Builder setCommits(
          int index, cyclonedx.v1_3.Bom13.Commit value) {
        if (commitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommitsIsMutable();
          commits_.set(index, value);
          onChanged();
        } else {
          commitsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public Builder setCommits(
          int index, cyclonedx.v1_3.Bom13.Commit.Builder builderForValue) {
        if (commitsBuilder_ == null) {
          ensureCommitsIsMutable();
          commits_.set(index, builderForValue.build());
          onChanged();
        } else {
          commitsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public Builder addCommits(cyclonedx.v1_3.Bom13.Commit value) {
        if (commitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommitsIsMutable();
          commits_.add(value);
          onChanged();
        } else {
          commitsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public Builder addCommits(
          int index, cyclonedx.v1_3.Bom13.Commit value) {
        if (commitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommitsIsMutable();
          commits_.add(index, value);
          onChanged();
        } else {
          commitsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public Builder addCommits(
          cyclonedx.v1_3.Bom13.Commit.Builder builderForValue) {
        if (commitsBuilder_ == null) {
          ensureCommitsIsMutable();
          commits_.add(builderForValue.build());
          onChanged();
        } else {
          commitsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public Builder addCommits(
          int index, cyclonedx.v1_3.Bom13.Commit.Builder builderForValue) {
        if (commitsBuilder_ == null) {
          ensureCommitsIsMutable();
          commits_.add(index, builderForValue.build());
          onChanged();
        } else {
          commitsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public Builder addAllCommits(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Commit> values) {
        if (commitsBuilder_ == null) {
          ensureCommitsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, commits_);
          onChanged();
        } else {
          commitsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public Builder clearCommits() {
        if (commitsBuilder_ == null) {
          commits_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          commitsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public Builder removeCommits(int index) {
        if (commitsBuilder_ == null) {
          ensureCommitsIsMutable();
          commits_.remove(index);
          onChanged();
        } else {
          commitsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.Commit.Builder getCommitsBuilder(
          int index) {
        return getCommitsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.CommitOrBuilder getCommitsOrBuilder(
          int index) {
        if (commitsBuilder_ == null) {
          return commits_.get(index);  } else {
          return commitsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.CommitOrBuilder> 
           getCommitsOrBuilderList() {
        if (commitsBuilder_ != null) {
          return commitsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(commits_);
        }
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.Commit.Builder addCommitsBuilder() {
        return getCommitsFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Commit.getDefaultInstance());
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.Commit.Builder addCommitsBuilder(
          int index) {
        return getCommitsFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Commit.getDefaultInstance());
      }
      /**
       * <pre>
       * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Commit commits = 4;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Commit.Builder> 
           getCommitsBuilderList() {
        return getCommitsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Commit, cyclonedx.v1_3.Bom13.Commit.Builder, cyclonedx.v1_3.Bom13.CommitOrBuilder> 
          getCommitsFieldBuilder() {
        if (commitsBuilder_ == null) {
          commitsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Commit, cyclonedx.v1_3.Bom13.Commit.Builder, cyclonedx.v1_3.Bom13.CommitOrBuilder>(
                  commits_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          commits_ = null;
        }
        return commitsBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Patch> patches_ =
        java.util.Collections.emptyList();
      private void ensurePatchesIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          patches_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Patch>(patches_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Patch, cyclonedx.v1_3.Bom13.Patch.Builder, cyclonedx.v1_3.Bom13.PatchOrBuilder> patchesBuilder_;

      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Patch> getPatchesList() {
        if (patchesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(patches_);
        } else {
          return patchesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public int getPatchesCount() {
        if (patchesBuilder_ == null) {
          return patches_.size();
        } else {
          return patchesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public cyclonedx.v1_3.Bom13.Patch getPatches(int index) {
        if (patchesBuilder_ == null) {
          return patches_.get(index);
        } else {
          return patchesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public Builder setPatches(
          int index, cyclonedx.v1_3.Bom13.Patch value) {
        if (patchesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePatchesIsMutable();
          patches_.set(index, value);
          onChanged();
        } else {
          patchesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public Builder setPatches(
          int index, cyclonedx.v1_3.Bom13.Patch.Builder builderForValue) {
        if (patchesBuilder_ == null) {
          ensurePatchesIsMutable();
          patches_.set(index, builderForValue.build());
          onChanged();
        } else {
          patchesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public Builder addPatches(cyclonedx.v1_3.Bom13.Patch value) {
        if (patchesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePatchesIsMutable();
          patches_.add(value);
          onChanged();
        } else {
          patchesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public Builder addPatches(
          int index, cyclonedx.v1_3.Bom13.Patch value) {
        if (patchesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePatchesIsMutable();
          patches_.add(index, value);
          onChanged();
        } else {
          patchesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public Builder addPatches(
          cyclonedx.v1_3.Bom13.Patch.Builder builderForValue) {
        if (patchesBuilder_ == null) {
          ensurePatchesIsMutable();
          patches_.add(builderForValue.build());
          onChanged();
        } else {
          patchesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public Builder addPatches(
          int index, cyclonedx.v1_3.Bom13.Patch.Builder builderForValue) {
        if (patchesBuilder_ == null) {
          ensurePatchesIsMutable();
          patches_.add(index, builderForValue.build());
          onChanged();
        } else {
          patchesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public Builder addAllPatches(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Patch> values) {
        if (patchesBuilder_ == null) {
          ensurePatchesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, patches_);
          onChanged();
        } else {
          patchesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public Builder clearPatches() {
        if (patchesBuilder_ == null) {
          patches_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          patchesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public Builder removePatches(int index) {
        if (patchesBuilder_ == null) {
          ensurePatchesIsMutable();
          patches_.remove(index);
          onChanged();
        } else {
          patchesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public cyclonedx.v1_3.Bom13.Patch.Builder getPatchesBuilder(
          int index) {
        return getPatchesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public cyclonedx.v1_3.Bom13.PatchOrBuilder getPatchesOrBuilder(
          int index) {
        if (patchesBuilder_ == null) {
          return patches_.get(index);  } else {
          return patchesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.PatchOrBuilder> 
           getPatchesOrBuilderList() {
        if (patchesBuilder_ != null) {
          return patchesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(patches_);
        }
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public cyclonedx.v1_3.Bom13.Patch.Builder addPatchesBuilder() {
        return getPatchesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Patch.getDefaultInstance());
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public cyclonedx.v1_3.Bom13.Patch.Builder addPatchesBuilder(
          int index) {
        return getPatchesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Patch.getDefaultInstance());
      }
      /**
       * <pre>
       * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Patch patches = 5;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Patch.Builder> 
           getPatchesBuilderList() {
        return getPatchesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Patch, cyclonedx.v1_3.Bom13.Patch.Builder, cyclonedx.v1_3.Bom13.PatchOrBuilder> 
          getPatchesFieldBuilder() {
        if (patchesBuilder_ == null) {
          patchesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Patch, cyclonedx.v1_3.Bom13.Patch.Builder, cyclonedx.v1_3.Bom13.PatchOrBuilder>(
                  patches_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          patches_ = null;
        }
        return patchesBuilder_;
      }

      private java.lang.Object notes_ = "";
      /**
       * <pre>
       * Notes, observations, and other non-structured commentary describing the components pedigree.
       * </pre>
       *
       * <code>optional string notes = 6;</code>
       * @return Whether the notes field is set.
       */
      public boolean hasNotes() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Notes, observations, and other non-structured commentary describing the components pedigree.
       * </pre>
       *
       * <code>optional string notes = 6;</code>
       * @return The notes.
       */
      public java.lang.String getNotes() {
        java.lang.Object ref = notes_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          notes_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Notes, observations, and other non-structured commentary describing the components pedigree.
       * </pre>
       *
       * <code>optional string notes = 6;</code>
       * @return The bytes for notes.
       */
      public com.google.protobuf.ByteString
          getNotesBytes() {
        java.lang.Object ref = notes_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          notes_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Notes, observations, and other non-structured commentary describing the components pedigree.
       * </pre>
       *
       * <code>optional string notes = 6;</code>
       * @param value The notes to set.
       * @return This builder for chaining.
       */
      public Builder setNotes(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        notes_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Notes, observations, and other non-structured commentary describing the components pedigree.
       * </pre>
       *
       * <code>optional string notes = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearNotes() {
        notes_ = getDefaultInstance().getNotes();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Notes, observations, and other non-structured commentary describing the components pedigree.
       * </pre>
       *
       * <code>optional string notes = 6;</code>
       * @param value The bytes for notes to set.
       * @return This builder for chaining.
       */
      public Builder setNotesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        notes_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Pedigree)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Pedigree)
    private static final cyclonedx.v1_3.Bom13.Pedigree DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Pedigree();
    }

    public static cyclonedx.v1_3.Bom13.Pedigree getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Pedigree>
        PARSER = new com.google.protobuf.AbstractParser<Pedigree>() {
      @java.lang.Override
      public Pedigree parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Pedigree> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Pedigree> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Pedigree getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ServiceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Service)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     * </pre>
     *
     * <code>optional string bom_ref = 1;</code>
     * @return Whether the bomRef field is set.
     */
    boolean hasBomRef();
    /**
     * <pre>
     * An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     * </pre>
     *
     * <code>optional string bom_ref = 1;</code>
     * @return The bomRef.
     */
    java.lang.String getBomRef();
    /**
     * <pre>
     * An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     * </pre>
     *
     * <code>optional string bom_ref = 1;</code>
     * @return The bytes for bomRef.
     */
    com.google.protobuf.ByteString
        getBomRefBytes();

    /**
     * <pre>
     * The organization that provides the service.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
     * @return Whether the provider field is set.
     */
    boolean hasProvider();
    /**
     * <pre>
     * The organization that provides the service.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
     * @return The provider.
     */
    cyclonedx.v1_3.Bom13.OrganizationalEntity getProvider();
    /**
     * <pre>
     * The organization that provides the service.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
     */
    cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder getProviderOrBuilder();

    /**
     * <pre>
     * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
     * </pre>
     *
     * <code>optional string group = 3;</code>
     * @return Whether the group field is set.
     */
    boolean hasGroup();
    /**
     * <pre>
     * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
     * </pre>
     *
     * <code>optional string group = 3;</code>
     * @return The group.
     */
    java.lang.String getGroup();
    /**
     * <pre>
     * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
     * </pre>
     *
     * <code>optional string group = 3;</code>
     * @return The bytes for group.
     */
    com.google.protobuf.ByteString
        getGroupBytes();

    /**
     * <pre>
     * The name of the service. This will often be a shortened, single name of the service.
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The name of the service. This will often be a shortened, single name of the service.
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The service version.
     * </pre>
     *
     * <code>optional string version = 5;</code>
     * @return Whether the version field is set.
     */
    boolean hasVersion();
    /**
     * <pre>
     * The service version.
     * </pre>
     *
     * <code>optional string version = 5;</code>
     * @return The version.
     */
    java.lang.String getVersion();
    /**
     * <pre>
     * The service version.
     * </pre>
     *
     * <code>optional string version = 5;</code>
     * @return The bytes for version.
     */
    com.google.protobuf.ByteString
        getVersionBytes();

    /**
     * <pre>
     * Specifies a description for the service.
     * </pre>
     *
     * <code>optional string description = 6;</code>
     * @return Whether the description field is set.
     */
    boolean hasDescription();
    /**
     * <pre>
     * Specifies a description for the service.
     * </pre>
     *
     * <code>optional string description = 6;</code>
     * @return The description.
     */
    java.lang.String getDescription();
    /**
     * <pre>
     * Specifies a description for the service.
     * </pre>
     *
     * <code>optional string description = 6;</code>
     * @return The bytes for description.
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();

    /**
     * <code>repeated string endpoints = 7;</code>
     * @return A list containing the endpoints.
     */
    java.util.List<java.lang.String>
        getEndpointsList();
    /**
     * <code>repeated string endpoints = 7;</code>
     * @return The count of endpoints.
     */
    int getEndpointsCount();
    /**
     * <code>repeated string endpoints = 7;</code>
     * @param index The index of the element to return.
     * @return The endpoints at the given index.
     */
    java.lang.String getEndpoints(int index);
    /**
     * <code>repeated string endpoints = 7;</code>
     * @param index The index of the value to return.
     * @return The bytes of the endpoints at the given index.
     */
    com.google.protobuf.ByteString
        getEndpointsBytes(int index);

    /**
     * <pre>
     * A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
     * </pre>
     *
     * <code>optional bool authenticated = 8;</code>
     * @return Whether the authenticated field is set.
     */
    boolean hasAuthenticated();
    /**
     * <pre>
     * A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
     * </pre>
     *
     * <code>optional bool authenticated = 8;</code>
     * @return The authenticated.
     */
    boolean getAuthenticated();

    /**
     * <pre>
     * A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
     * </pre>
     *
     * <code>optional bool x_trust_boundary = 9;</code>
     * @return Whether the xTrustBoundary field is set.
     */
    boolean hasXTrustBoundary();
    /**
     * <pre>
     * A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
     * </pre>
     *
     * <code>optional bool x_trust_boundary = 9;</code>
     * @return The xTrustBoundary.
     */
    boolean getXTrustBoundary();

    /**
     * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.DataClassification> 
        getDataList();
    /**
     * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
     */
    cyclonedx.v1_3.Bom13.DataClassification getData(int index);
    /**
     * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
     */
    int getDataCount();
    /**
     * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.DataClassificationOrBuilder> 
        getDataOrBuilderList();
    /**
     * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
     */
    cyclonedx.v1_3.Bom13.DataClassificationOrBuilder getDataOrBuilder(
        int index);

    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> 
        getLicensesList();
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
     */
    cyclonedx.v1_3.Bom13.LicenseChoice getLicenses(int index);
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
     */
    int getLicensesCount();
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> 
        getLicensesOrBuilderList();
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
     */
    cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder getLicensesOrBuilder(
        int index);

    /**
     * <pre>
     * Provides the ability to document external references related to the service.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> 
        getExternalReferencesList();
    /**
     * <pre>
     * Provides the ability to document external references related to the service.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
     */
    cyclonedx.v1_3.Bom13.ExternalReference getExternalReferences(int index);
    /**
     * <pre>
     * Provides the ability to document external references related to the service.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
     */
    int getExternalReferencesCount();
    /**
     * <pre>
     * Provides the ability to document external references related to the service.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> 
        getExternalReferencesOrBuilderList();
    /**
     * <pre>
     * Provides the ability to document external references related to the service.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
     */
    cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder getExternalReferencesOrBuilder(
        int index);

    /**
     * <pre>
     * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Service> 
        getServicesList();
    /**
     * <pre>
     * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
     */
    cyclonedx.v1_3.Bom13.Service getServices(int index);
    /**
     * <pre>
     * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
     */
    int getServicesCount();
    /**
     * <pre>
     * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.ServiceOrBuilder> 
        getServicesOrBuilderList();
    /**
     * <pre>
     * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
     */
    cyclonedx.v1_3.Bom13.ServiceOrBuilder getServicesOrBuilder(
        int index);

    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Property> 
        getPropertiesList();
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
     */
    cyclonedx.v1_3.Bom13.Property getProperties(int index);
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
     */
    int getPropertiesCount();
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.PropertyOrBuilder> 
        getPropertiesOrBuilderList();
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
     */
    cyclonedx.v1_3.Bom13.PropertyOrBuilder getPropertiesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.Service}
   */
  public static final class Service extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Service)
      ServiceOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Service.class.getName());
    }
    // Use Service.newBuilder() to construct.
    private Service(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Service() {
      bomRef_ = "";
      group_ = "";
      name_ = "";
      version_ = "";
      description_ = "";
      endpoints_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      data_ = java.util.Collections.emptyList();
      licenses_ = java.util.Collections.emptyList();
      externalReferences_ = java.util.Collections.emptyList();
      services_ = java.util.Collections.emptyList();
      properties_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Service_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Service_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Service.class, cyclonedx.v1_3.Bom13.Service.Builder.class);
    }

    private int bitField0_;
    public static final int BOM_REF_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object bomRef_ = "";
    /**
     * <pre>
     * An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     * </pre>
     *
     * <code>optional string bom_ref = 1;</code>
     * @return Whether the bomRef field is set.
     */
    @java.lang.Override
    public boolean hasBomRef() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     * </pre>
     *
     * <code>optional string bom_ref = 1;</code>
     * @return The bomRef.
     */
    @java.lang.Override
    public java.lang.String getBomRef() {
      java.lang.Object ref = bomRef_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        bomRef_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     * </pre>
     *
     * <code>optional string bom_ref = 1;</code>
     * @return The bytes for bomRef.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getBomRefBytes() {
      java.lang.Object ref = bomRef_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        bomRef_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PROVIDER_FIELD_NUMBER = 2;
    private cyclonedx.v1_3.Bom13.OrganizationalEntity provider_;
    /**
     * <pre>
     * The organization that provides the service.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
     * @return Whether the provider field is set.
     */
    @java.lang.Override
    public boolean hasProvider() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The organization that provides the service.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
     * @return The provider.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.OrganizationalEntity getProvider() {
      return provider_ == null ? cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : provider_;
    }
    /**
     * <pre>
     * The organization that provides the service.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder getProviderOrBuilder() {
      return provider_ == null ? cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : provider_;
    }

    public static final int GROUP_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object group_ = "";
    /**
     * <pre>
     * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
     * </pre>
     *
     * <code>optional string group = 3;</code>
     * @return Whether the group field is set.
     */
    @java.lang.Override
    public boolean hasGroup() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
     * </pre>
     *
     * <code>optional string group = 3;</code>
     * @return The group.
     */
    @java.lang.Override
    public java.lang.String getGroup() {
      java.lang.Object ref = group_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        group_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
     * </pre>
     *
     * <code>optional string group = 3;</code>
     * @return The bytes for group.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getGroupBytes() {
      java.lang.Object ref = group_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        group_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of the service. This will often be a shortened, single name of the service.
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the service. This will often be a shortened, single name of the service.
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VERSION_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private volatile java.lang.Object version_ = "";
    /**
     * <pre>
     * The service version.
     * </pre>
     *
     * <code>optional string version = 5;</code>
     * @return Whether the version field is set.
     */
    @java.lang.Override
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The service version.
     * </pre>
     *
     * <code>optional string version = 5;</code>
     * @return The version.
     */
    @java.lang.Override
    public java.lang.String getVersion() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        version_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The service version.
     * </pre>
     *
     * <code>optional string version = 5;</code>
     * @return The bytes for version.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVersionBytes() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        version_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private volatile java.lang.Object description_ = "";
    /**
     * <pre>
     * Specifies a description for the service.
     * </pre>
     *
     * <code>optional string description = 6;</code>
     * @return Whether the description field is set.
     */
    @java.lang.Override
    public boolean hasDescription() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Specifies a description for the service.
     * </pre>
     *
     * <code>optional string description = 6;</code>
     * @return The description.
     */
    @java.lang.Override
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        description_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Specifies a description for the service.
     * </pre>
     *
     * <code>optional string description = 6;</code>
     * @return The bytes for description.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ENDPOINTS_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList endpoints_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <code>repeated string endpoints = 7;</code>
     * @return A list containing the endpoints.
     */
    public com.google.protobuf.ProtocolStringList
        getEndpointsList() {
      return endpoints_;
    }
    /**
     * <code>repeated string endpoints = 7;</code>
     * @return The count of endpoints.
     */
    public int getEndpointsCount() {
      return endpoints_.size();
    }
    /**
     * <code>repeated string endpoints = 7;</code>
     * @param index The index of the element to return.
     * @return The endpoints at the given index.
     */
    public java.lang.String getEndpoints(int index) {
      return endpoints_.get(index);
    }
    /**
     * <code>repeated string endpoints = 7;</code>
     * @param index The index of the value to return.
     * @return The bytes of the endpoints at the given index.
     */
    public com.google.protobuf.ByteString
        getEndpointsBytes(int index) {
      return endpoints_.getByteString(index);
    }

    public static final int AUTHENTICATED_FIELD_NUMBER = 8;
    private boolean authenticated_ = false;
    /**
     * <pre>
     * A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
     * </pre>
     *
     * <code>optional bool authenticated = 8;</code>
     * @return Whether the authenticated field is set.
     */
    @java.lang.Override
    public boolean hasAuthenticated() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
     * </pre>
     *
     * <code>optional bool authenticated = 8;</code>
     * @return The authenticated.
     */
    @java.lang.Override
    public boolean getAuthenticated() {
      return authenticated_;
    }

    public static final int X_TRUST_BOUNDARY_FIELD_NUMBER = 9;
    private boolean xTrustBoundary_ = false;
    /**
     * <pre>
     * A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
     * </pre>
     *
     * <code>optional bool x_trust_boundary = 9;</code>
     * @return Whether the xTrustBoundary field is set.
     */
    @java.lang.Override
    public boolean hasXTrustBoundary() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
     * </pre>
     *
     * <code>optional bool x_trust_boundary = 9;</code>
     * @return The xTrustBoundary.
     */
    @java.lang.Override
    public boolean getXTrustBoundary() {
      return xTrustBoundary_;
    }

    public static final int DATA_FIELD_NUMBER = 10;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.DataClassification> data_;
    /**
     * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.DataClassification> getDataList() {
      return data_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.DataClassificationOrBuilder> 
        getDataOrBuilderList() {
      return data_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
     */
    @java.lang.Override
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.DataClassification getData(int index) {
      return data_.get(index);
    }
    /**
     * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.DataClassificationOrBuilder getDataOrBuilder(
        int index) {
      return data_.get(index);
    }

    public static final int LICENSES_FIELD_NUMBER = 11;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> licenses_;
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> getLicensesList() {
      return licenses_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> 
        getLicensesOrBuilderList() {
      return licenses_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
     */
    @java.lang.Override
    public int getLicensesCount() {
      return licenses_.size();
    }
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.LicenseChoice getLicenses(int index) {
      return licenses_.get(index);
    }
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder getLicensesOrBuilder(
        int index) {
      return licenses_.get(index);
    }

    public static final int EXTERNAL_REFERENCES_FIELD_NUMBER = 12;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> externalReferences_;
    /**
     * <pre>
     * Provides the ability to document external references related to the service.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> getExternalReferencesList() {
      return externalReferences_;
    }
    /**
     * <pre>
     * Provides the ability to document external references related to the service.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> 
        getExternalReferencesOrBuilderList() {
      return externalReferences_;
    }
    /**
     * <pre>
     * Provides the ability to document external references related to the service.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
     */
    @java.lang.Override
    public int getExternalReferencesCount() {
      return externalReferences_.size();
    }
    /**
     * <pre>
     * Provides the ability to document external references related to the service.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ExternalReference getExternalReferences(int index) {
      return externalReferences_.get(index);
    }
    /**
     * <pre>
     * Provides the ability to document external references related to the service.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder getExternalReferencesOrBuilder(
        int index) {
      return externalReferences_.get(index);
    }

    public static final int SERVICES_FIELD_NUMBER = 13;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Service> services_;
    /**
     * <pre>
     * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Service> getServicesList() {
      return services_;
    }
    /**
     * <pre>
     * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.ServiceOrBuilder> 
        getServicesOrBuilderList() {
      return services_;
    }
    /**
     * <pre>
     * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
     */
    @java.lang.Override
    public int getServicesCount() {
      return services_.size();
    }
    /**
     * <pre>
     * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Service getServices(int index) {
      return services_.get(index);
    }
    /**
     * <pre>
     * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.ServiceOrBuilder getServicesOrBuilder(
        int index) {
      return services_.get(index);
    }

    public static final int PROPERTIES_FIELD_NUMBER = 14;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Property> properties_;
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Property> getPropertiesList() {
      return properties_;
    }
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.PropertyOrBuilder> 
        getPropertiesOrBuilderList() {
      return properties_;
    }
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
     */
    @java.lang.Override
    public int getPropertiesCount() {
      return properties_.size();
    }
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Property getProperties(int index) {
      return properties_.get(index);
    }
    /**
     * <pre>
     * Specifies optional, custom, properties
     * </pre>
     *
     * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.PropertyOrBuilder getPropertiesOrBuilder(
        int index) {
      return properties_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, bomRef_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getProvider());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, group_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 4, name_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 5, version_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 6, description_);
      }
      for (int i = 0; i < endpoints_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 7, endpoints_.getRaw(i));
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeBool(8, authenticated_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeBool(9, xTrustBoundary_);
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeMessage(10, data_.get(i));
      }
      for (int i = 0; i < licenses_.size(); i++) {
        output.writeMessage(11, licenses_.get(i));
      }
      for (int i = 0; i < externalReferences_.size(); i++) {
        output.writeMessage(12, externalReferences_.get(i));
      }
      for (int i = 0; i < services_.size(); i++) {
        output.writeMessage(13, services_.get(i));
      }
      for (int i = 0; i < properties_.size(); i++) {
        output.writeMessage(14, properties_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, bomRef_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getProvider());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, group_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(4, name_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(5, version_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(6, description_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endpoints_.size(); i++) {
          dataSize += computeStringSizeNoTag(endpoints_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getEndpointsList().size();
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, authenticated_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, xTrustBoundary_);
      }
      for (int i = 0; i < data_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, data_.get(i));
      }
      for (int i = 0; i < licenses_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, licenses_.get(i));
      }
      for (int i = 0; i < externalReferences_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, externalReferences_.get(i));
      }
      for (int i = 0; i < services_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, services_.get(i));
      }
      for (int i = 0; i < properties_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, properties_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Service)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Service other = (cyclonedx.v1_3.Bom13.Service) obj;

      if (hasBomRef() != other.hasBomRef()) return false;
      if (hasBomRef()) {
        if (!getBomRef()
            .equals(other.getBomRef())) return false;
      }
      if (hasProvider() != other.hasProvider()) return false;
      if (hasProvider()) {
        if (!getProvider()
            .equals(other.getProvider())) return false;
      }
      if (hasGroup() != other.hasGroup()) return false;
      if (hasGroup()) {
        if (!getGroup()
            .equals(other.getGroup())) return false;
      }
      if (!getName()
          .equals(other.getName())) return false;
      if (hasVersion() != other.hasVersion()) return false;
      if (hasVersion()) {
        if (!getVersion()
            .equals(other.getVersion())) return false;
      }
      if (hasDescription() != other.hasDescription()) return false;
      if (hasDescription()) {
        if (!getDescription()
            .equals(other.getDescription())) return false;
      }
      if (!getEndpointsList()
          .equals(other.getEndpointsList())) return false;
      if (hasAuthenticated() != other.hasAuthenticated()) return false;
      if (hasAuthenticated()) {
        if (getAuthenticated()
            != other.getAuthenticated()) return false;
      }
      if (hasXTrustBoundary() != other.hasXTrustBoundary()) return false;
      if (hasXTrustBoundary()) {
        if (getXTrustBoundary()
            != other.getXTrustBoundary()) return false;
      }
      if (!getDataList()
          .equals(other.getDataList())) return false;
      if (!getLicensesList()
          .equals(other.getLicensesList())) return false;
      if (!getExternalReferencesList()
          .equals(other.getExternalReferencesList())) return false;
      if (!getServicesList()
          .equals(other.getServicesList())) return false;
      if (!getPropertiesList()
          .equals(other.getPropertiesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBomRef()) {
        hash = (37 * hash) + BOM_REF_FIELD_NUMBER;
        hash = (53 * hash) + getBomRef().hashCode();
      }
      if (hasProvider()) {
        hash = (37 * hash) + PROVIDER_FIELD_NUMBER;
        hash = (53 * hash) + getProvider().hashCode();
      }
      if (hasGroup()) {
        hash = (37 * hash) + GROUP_FIELD_NUMBER;
        hash = (53 * hash) + getGroup().hashCode();
      }
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (hasVersion()) {
        hash = (37 * hash) + VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getVersion().hashCode();
      }
      if (hasDescription()) {
        hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
        hash = (53 * hash) + getDescription().hashCode();
      }
      if (getEndpointsCount() > 0) {
        hash = (37 * hash) + ENDPOINTS_FIELD_NUMBER;
        hash = (53 * hash) + getEndpointsList().hashCode();
      }
      if (hasAuthenticated()) {
        hash = (37 * hash) + AUTHENTICATED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAuthenticated());
      }
      if (hasXTrustBoundary()) {
        hash = (37 * hash) + X_TRUST_BOUNDARY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getXTrustBoundary());
      }
      if (getDataCount() > 0) {
        hash = (37 * hash) + DATA_FIELD_NUMBER;
        hash = (53 * hash) + getDataList().hashCode();
      }
      if (getLicensesCount() > 0) {
        hash = (37 * hash) + LICENSES_FIELD_NUMBER;
        hash = (53 * hash) + getLicensesList().hashCode();
      }
      if (getExternalReferencesCount() > 0) {
        hash = (37 * hash) + EXTERNAL_REFERENCES_FIELD_NUMBER;
        hash = (53 * hash) + getExternalReferencesList().hashCode();
      }
      if (getServicesCount() > 0) {
        hash = (37 * hash) + SERVICES_FIELD_NUMBER;
        hash = (53 * hash) + getServicesList().hashCode();
      }
      if (getPropertiesCount() > 0) {
        hash = (37 * hash) + PROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + getPropertiesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Service parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Service parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Service parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Service parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Service parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Service parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Service parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Service parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Service parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Service parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Service parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Service parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Service prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.Service}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Service)
        cyclonedx.v1_3.Bom13.ServiceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Service_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Service_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Service.class, cyclonedx.v1_3.Bom13.Service.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Service.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getProviderFieldBuilder();
          getDataFieldBuilder();
          getLicensesFieldBuilder();
          getExternalReferencesFieldBuilder();
          getServicesFieldBuilder();
          getPropertiesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        bomRef_ = "";
        provider_ = null;
        if (providerBuilder_ != null) {
          providerBuilder_.dispose();
          providerBuilder_ = null;
        }
        group_ = "";
        name_ = "";
        version_ = "";
        description_ = "";
        endpoints_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        authenticated_ = false;
        xTrustBoundary_ = false;
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
        } else {
          data_ = null;
          dataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (licensesBuilder_ == null) {
          licenses_ = java.util.Collections.emptyList();
        } else {
          licenses_ = null;
          licensesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (externalReferencesBuilder_ == null) {
          externalReferences_ = java.util.Collections.emptyList();
        } else {
          externalReferences_ = null;
          externalReferencesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (servicesBuilder_ == null) {
          services_ = java.util.Collections.emptyList();
        } else {
          services_ = null;
          servicesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (propertiesBuilder_ == null) {
          properties_ = java.util.Collections.emptyList();
        } else {
          properties_ = null;
          propertiesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Service_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Service getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Service.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Service build() {
        cyclonedx.v1_3.Bom13.Service result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Service buildPartial() {
        cyclonedx.v1_3.Bom13.Service result = new cyclonedx.v1_3.Bom13.Service(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(cyclonedx.v1_3.Bom13.Service result) {
        if (dataBuilder_ == null) {
          if (((bitField0_ & 0x00000200) != 0)) {
            data_ = java.util.Collections.unmodifiableList(data_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.data_ = data_;
        } else {
          result.data_ = dataBuilder_.build();
        }
        if (licensesBuilder_ == null) {
          if (((bitField0_ & 0x00000400) != 0)) {
            licenses_ = java.util.Collections.unmodifiableList(licenses_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.licenses_ = licenses_;
        } else {
          result.licenses_ = licensesBuilder_.build();
        }
        if (externalReferencesBuilder_ == null) {
          if (((bitField0_ & 0x00000800) != 0)) {
            externalReferences_ = java.util.Collections.unmodifiableList(externalReferences_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.externalReferences_ = externalReferences_;
        } else {
          result.externalReferences_ = externalReferencesBuilder_.build();
        }
        if (servicesBuilder_ == null) {
          if (((bitField0_ & 0x00001000) != 0)) {
            services_ = java.util.Collections.unmodifiableList(services_);
            bitField0_ = (bitField0_ & ~0x00001000);
          }
          result.services_ = services_;
        } else {
          result.services_ = servicesBuilder_.build();
        }
        if (propertiesBuilder_ == null) {
          if (((bitField0_ & 0x00002000) != 0)) {
            properties_ = java.util.Collections.unmodifiableList(properties_);
            bitField0_ = (bitField0_ & ~0x00002000);
          }
          result.properties_ = properties_;
        } else {
          result.properties_ = propertiesBuilder_.build();
        }
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Service result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.bomRef_ = bomRef_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.provider_ = providerBuilder_ == null
              ? provider_
              : providerBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.group_ = group_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.name_ = name_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.version_ = version_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.description_ = description_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          endpoints_.makeImmutable();
          result.endpoints_ = endpoints_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.authenticated_ = authenticated_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.xTrustBoundary_ = xTrustBoundary_;
          to_bitField0_ |= 0x00000040;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Service) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Service)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Service other) {
        if (other == cyclonedx.v1_3.Bom13.Service.getDefaultInstance()) return this;
        if (other.hasBomRef()) {
          bomRef_ = other.bomRef_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasProvider()) {
          mergeProvider(other.getProvider());
        }
        if (other.hasGroup()) {
          group_ = other.group_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        if (other.hasVersion()) {
          version_ = other.version_;
          bitField0_ |= 0x00000010;
          onChanged();
        }
        if (other.hasDescription()) {
          description_ = other.description_;
          bitField0_ |= 0x00000020;
          onChanged();
        }
        if (!other.endpoints_.isEmpty()) {
          if (endpoints_.isEmpty()) {
            endpoints_ = other.endpoints_;
            bitField0_ |= 0x00000040;
          } else {
            ensureEndpointsIsMutable();
            endpoints_.addAll(other.endpoints_);
          }
          onChanged();
        }
        if (other.hasAuthenticated()) {
          setAuthenticated(other.getAuthenticated());
        }
        if (other.hasXTrustBoundary()) {
          setXTrustBoundary(other.getXTrustBoundary());
        }
        if (dataBuilder_ == null) {
          if (!other.data_.isEmpty()) {
            if (data_.isEmpty()) {
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureDataIsMutable();
              data_.addAll(other.data_);
            }
            onChanged();
          }
        } else {
          if (!other.data_.isEmpty()) {
            if (dataBuilder_.isEmpty()) {
              dataBuilder_.dispose();
              dataBuilder_ = null;
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000200);
              dataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDataFieldBuilder() : null;
            } else {
              dataBuilder_.addAllMessages(other.data_);
            }
          }
        }
        if (licensesBuilder_ == null) {
          if (!other.licenses_.isEmpty()) {
            if (licenses_.isEmpty()) {
              licenses_ = other.licenses_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureLicensesIsMutable();
              licenses_.addAll(other.licenses_);
            }
            onChanged();
          }
        } else {
          if (!other.licenses_.isEmpty()) {
            if (licensesBuilder_.isEmpty()) {
              licensesBuilder_.dispose();
              licensesBuilder_ = null;
              licenses_ = other.licenses_;
              bitField0_ = (bitField0_ & ~0x00000400);
              licensesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLicensesFieldBuilder() : null;
            } else {
              licensesBuilder_.addAllMessages(other.licenses_);
            }
          }
        }
        if (externalReferencesBuilder_ == null) {
          if (!other.externalReferences_.isEmpty()) {
            if (externalReferences_.isEmpty()) {
              externalReferences_ = other.externalReferences_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureExternalReferencesIsMutable();
              externalReferences_.addAll(other.externalReferences_);
            }
            onChanged();
          }
        } else {
          if (!other.externalReferences_.isEmpty()) {
            if (externalReferencesBuilder_.isEmpty()) {
              externalReferencesBuilder_.dispose();
              externalReferencesBuilder_ = null;
              externalReferences_ = other.externalReferences_;
              bitField0_ = (bitField0_ & ~0x00000800);
              externalReferencesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getExternalReferencesFieldBuilder() : null;
            } else {
              externalReferencesBuilder_.addAllMessages(other.externalReferences_);
            }
          }
        }
        if (servicesBuilder_ == null) {
          if (!other.services_.isEmpty()) {
            if (services_.isEmpty()) {
              services_ = other.services_;
              bitField0_ = (bitField0_ & ~0x00001000);
            } else {
              ensureServicesIsMutable();
              services_.addAll(other.services_);
            }
            onChanged();
          }
        } else {
          if (!other.services_.isEmpty()) {
            if (servicesBuilder_.isEmpty()) {
              servicesBuilder_.dispose();
              servicesBuilder_ = null;
              services_ = other.services_;
              bitField0_ = (bitField0_ & ~0x00001000);
              servicesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getServicesFieldBuilder() : null;
            } else {
              servicesBuilder_.addAllMessages(other.services_);
            }
          }
        }
        if (propertiesBuilder_ == null) {
          if (!other.properties_.isEmpty()) {
            if (properties_.isEmpty()) {
              properties_ = other.properties_;
              bitField0_ = (bitField0_ & ~0x00002000);
            } else {
              ensurePropertiesIsMutable();
              properties_.addAll(other.properties_);
            }
            onChanged();
          }
        } else {
          if (!other.properties_.isEmpty()) {
            if (propertiesBuilder_.isEmpty()) {
              propertiesBuilder_.dispose();
              propertiesBuilder_ = null;
              properties_ = other.properties_;
              bitField0_ = (bitField0_ & ~0x00002000);
              propertiesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPropertiesFieldBuilder() : null;
            } else {
              propertiesBuilder_.addAllMessages(other.properties_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                bomRef_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getProviderFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                group_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                version_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 50: {
                description_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 58: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureEndpointsIsMutable();
                endpoints_.add(s);
                break;
              } // case 58
              case 64: {
                authenticated_ = input.readBool();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 72: {
                xTrustBoundary_ = input.readBool();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              case 82: {
                cyclonedx.v1_3.Bom13.DataClassification m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.DataClassification.parser(),
                        extensionRegistry);
                if (dataBuilder_ == null) {
                  ensureDataIsMutable();
                  data_.add(m);
                } else {
                  dataBuilder_.addMessage(m);
                }
                break;
              } // case 82
              case 90: {
                cyclonedx.v1_3.Bom13.LicenseChoice m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.LicenseChoice.parser(),
                        extensionRegistry);
                if (licensesBuilder_ == null) {
                  ensureLicensesIsMutable();
                  licenses_.add(m);
                } else {
                  licensesBuilder_.addMessage(m);
                }
                break;
              } // case 90
              case 98: {
                cyclonedx.v1_3.Bom13.ExternalReference m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.ExternalReference.parser(),
                        extensionRegistry);
                if (externalReferencesBuilder_ == null) {
                  ensureExternalReferencesIsMutable();
                  externalReferences_.add(m);
                } else {
                  externalReferencesBuilder_.addMessage(m);
                }
                break;
              } // case 98
              case 106: {
                cyclonedx.v1_3.Bom13.Service m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Service.parser(),
                        extensionRegistry);
                if (servicesBuilder_ == null) {
                  ensureServicesIsMutable();
                  services_.add(m);
                } else {
                  servicesBuilder_.addMessage(m);
                }
                break;
              } // case 106
              case 114: {
                cyclonedx.v1_3.Bom13.Property m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Property.parser(),
                        extensionRegistry);
                if (propertiesBuilder_ == null) {
                  ensurePropertiesIsMutable();
                  properties_.add(m);
                } else {
                  propertiesBuilder_.addMessage(m);
                }
                break;
              } // case 114
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object bomRef_ = "";
      /**
       * <pre>
       * An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
       * </pre>
       *
       * <code>optional string bom_ref = 1;</code>
       * @return Whether the bomRef field is set.
       */
      public boolean hasBomRef() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
       * </pre>
       *
       * <code>optional string bom_ref = 1;</code>
       * @return The bomRef.
       */
      public java.lang.String getBomRef() {
        java.lang.Object ref = bomRef_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          bomRef_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
       * </pre>
       *
       * <code>optional string bom_ref = 1;</code>
       * @return The bytes for bomRef.
       */
      public com.google.protobuf.ByteString
          getBomRefBytes() {
        java.lang.Object ref = bomRef_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          bomRef_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
       * </pre>
       *
       * <code>optional string bom_ref = 1;</code>
       * @param value The bomRef to set.
       * @return This builder for chaining.
       */
      public Builder setBomRef(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        bomRef_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
       * </pre>
       *
       * <code>optional string bom_ref = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearBomRef() {
        bomRef_ = getDefaultInstance().getBomRef();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
       * </pre>
       *
       * <code>optional string bom_ref = 1;</code>
       * @param value The bytes for bomRef to set.
       * @return This builder for chaining.
       */
      public Builder setBomRefBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        bomRef_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private cyclonedx.v1_3.Bom13.OrganizationalEntity provider_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.OrganizationalEntity, cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder, cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder> providerBuilder_;
      /**
       * <pre>
       * The organization that provides the service.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
       * @return Whether the provider field is set.
       */
      public boolean hasProvider() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The organization that provides the service.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
       * @return The provider.
       */
      public cyclonedx.v1_3.Bom13.OrganizationalEntity getProvider() {
        if (providerBuilder_ == null) {
          return provider_ == null ? cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : provider_;
        } else {
          return providerBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The organization that provides the service.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
       */
      public Builder setProvider(cyclonedx.v1_3.Bom13.OrganizationalEntity value) {
        if (providerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          provider_ = value;
        } else {
          providerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The organization that provides the service.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
       */
      public Builder setProvider(
          cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder builderForValue) {
        if (providerBuilder_ == null) {
          provider_ = builderForValue.build();
        } else {
          providerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The organization that provides the service.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
       */
      public Builder mergeProvider(cyclonedx.v1_3.Bom13.OrganizationalEntity value) {
        if (providerBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            provider_ != null &&
            provider_ != cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance()) {
            getProviderBuilder().mergeFrom(value);
          } else {
            provider_ = value;
          }
        } else {
          providerBuilder_.mergeFrom(value);
        }
        if (provider_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The organization that provides the service.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
       */
      public Builder clearProvider() {
        bitField0_ = (bitField0_ & ~0x00000002);
        provider_ = null;
        if (providerBuilder_ != null) {
          providerBuilder_.dispose();
          providerBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The organization that provides the service.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder getProviderBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getProviderFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The organization that provides the service.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder getProviderOrBuilder() {
        if (providerBuilder_ != null) {
          return providerBuilder_.getMessageOrBuilder();
        } else {
          return provider_ == null ?
              cyclonedx.v1_3.Bom13.OrganizationalEntity.getDefaultInstance() : provider_;
        }
      }
      /**
       * <pre>
       * The organization that provides the service.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.OrganizationalEntity provider = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.OrganizationalEntity, cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder, cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder> 
          getProviderFieldBuilder() {
        if (providerBuilder_ == null) {
          providerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.OrganizationalEntity, cyclonedx.v1_3.Bom13.OrganizationalEntity.Builder, cyclonedx.v1_3.Bom13.OrganizationalEntityOrBuilder>(
                  getProvider(),
                  getParentForChildren(),
                  isClean());
          provider_ = null;
        }
        return providerBuilder_;
      }

      private java.lang.Object group_ = "";
      /**
       * <pre>
       * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
       * </pre>
       *
       * <code>optional string group = 3;</code>
       * @return Whether the group field is set.
       */
      public boolean hasGroup() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
       * </pre>
       *
       * <code>optional string group = 3;</code>
       * @return The group.
       */
      public java.lang.String getGroup() {
        java.lang.Object ref = group_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          group_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
       * </pre>
       *
       * <code>optional string group = 3;</code>
       * @return The bytes for group.
       */
      public com.google.protobuf.ByteString
          getGroupBytes() {
        java.lang.Object ref = group_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          group_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
       * </pre>
       *
       * <code>optional string group = 3;</code>
       * @param value The group to set.
       * @return This builder for chaining.
       */
      public Builder setGroup(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        group_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
       * </pre>
       *
       * <code>optional string group = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearGroup() {
        group_ = getDefaultInstance().getGroup();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
       * </pre>
       *
       * <code>optional string group = 3;</code>
       * @param value The bytes for group to set.
       * @return This builder for chaining.
       */
      public Builder setGroupBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        group_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The name of the service. This will often be a shortened, single name of the service.
       * </pre>
       *
       * <code>string name = 4;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the service. This will often be a shortened, single name of the service.
       * </pre>
       *
       * <code>string name = 4;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the service. This will often be a shortened, single name of the service.
       * </pre>
       *
       * <code>string name = 4;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the service. This will often be a shortened, single name of the service.
       * </pre>
       *
       * <code>string name = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the service. This will often be a shortened, single name of the service.
       * </pre>
       *
       * <code>string name = 4;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private java.lang.Object version_ = "";
      /**
       * <pre>
       * The service version.
       * </pre>
       *
       * <code>optional string version = 5;</code>
       * @return Whether the version field is set.
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * The service version.
       * </pre>
       *
       * <code>optional string version = 5;</code>
       * @return The version.
       */
      public java.lang.String getVersion() {
        java.lang.Object ref = version_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          version_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The service version.
       * </pre>
       *
       * <code>optional string version = 5;</code>
       * @return The bytes for version.
       */
      public com.google.protobuf.ByteString
          getVersionBytes() {
        java.lang.Object ref = version_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          version_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The service version.
       * </pre>
       *
       * <code>optional string version = 5;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        version_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The service version.
       * </pre>
       *
       * <code>optional string version = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        version_ = getDefaultInstance().getVersion();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The service version.
       * </pre>
       *
       * <code>optional string version = 5;</code>
       * @param value The bytes for version to set.
       * @return This builder for chaining.
       */
      public Builder setVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        version_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }

      private java.lang.Object description_ = "";
      /**
       * <pre>
       * Specifies a description for the service.
       * </pre>
       *
       * <code>optional string description = 6;</code>
       * @return Whether the description field is set.
       */
      public boolean hasDescription() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Specifies a description for the service.
       * </pre>
       *
       * <code>optional string description = 6;</code>
       * @return The description.
       */
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          description_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies a description for the service.
       * </pre>
       *
       * <code>optional string description = 6;</code>
       * @return The bytes for description.
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies a description for the service.
       * </pre>
       *
       * <code>optional string description = 6;</code>
       * @param value The description to set.
       * @return This builder for chaining.
       */
      public Builder setDescription(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        description_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies a description for the service.
       * </pre>
       *
       * <code>optional string description = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearDescription() {
        description_ = getDefaultInstance().getDescription();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies a description for the service.
       * </pre>
       *
       * <code>optional string description = 6;</code>
       * @param value The bytes for description to set.
       * @return This builder for chaining.
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        description_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList endpoints_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureEndpointsIsMutable() {
        if (!endpoints_.isModifiable()) {
          endpoints_ = new com.google.protobuf.LazyStringArrayList(endpoints_);
        }
        bitField0_ |= 0x00000040;
      }
      /**
       * <code>repeated string endpoints = 7;</code>
       * @return A list containing the endpoints.
       */
      public com.google.protobuf.ProtocolStringList
          getEndpointsList() {
        endpoints_.makeImmutable();
        return endpoints_;
      }
      /**
       * <code>repeated string endpoints = 7;</code>
       * @return The count of endpoints.
       */
      public int getEndpointsCount() {
        return endpoints_.size();
      }
      /**
       * <code>repeated string endpoints = 7;</code>
       * @param index The index of the element to return.
       * @return The endpoints at the given index.
       */
      public java.lang.String getEndpoints(int index) {
        return endpoints_.get(index);
      }
      /**
       * <code>repeated string endpoints = 7;</code>
       * @param index The index of the value to return.
       * @return The bytes of the endpoints at the given index.
       */
      public com.google.protobuf.ByteString
          getEndpointsBytes(int index) {
        return endpoints_.getByteString(index);
      }
      /**
       * <code>repeated string endpoints = 7;</code>
       * @param index The index to set the value at.
       * @param value The endpoints to set.
       * @return This builder for chaining.
       */
      public Builder setEndpoints(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureEndpointsIsMutable();
        endpoints_.set(index, value);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string endpoints = 7;</code>
       * @param value The endpoints to add.
       * @return This builder for chaining.
       */
      public Builder addEndpoints(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureEndpointsIsMutable();
        endpoints_.add(value);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string endpoints = 7;</code>
       * @param values The endpoints to add.
       * @return This builder for chaining.
       */
      public Builder addAllEndpoints(
          java.lang.Iterable<java.lang.String> values) {
        ensureEndpointsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, endpoints_);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string endpoints = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearEndpoints() {
        endpoints_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);;
        onChanged();
        return this;
      }
      /**
       * <code>repeated string endpoints = 7;</code>
       * @param value The bytes of the endpoints to add.
       * @return This builder for chaining.
       */
      public Builder addEndpointsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureEndpointsIsMutable();
        endpoints_.add(value);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }

      private boolean authenticated_ ;
      /**
       * <pre>
       * A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
       * </pre>
       *
       * <code>optional bool authenticated = 8;</code>
       * @return Whether the authenticated field is set.
       */
      @java.lang.Override
      public boolean hasAuthenticated() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
       * </pre>
       *
       * <code>optional bool authenticated = 8;</code>
       * @return The authenticated.
       */
      @java.lang.Override
      public boolean getAuthenticated() {
        return authenticated_;
      }
      /**
       * <pre>
       * A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
       * </pre>
       *
       * <code>optional bool authenticated = 8;</code>
       * @param value The authenticated to set.
       * @return This builder for chaining.
       */
      public Builder setAuthenticated(boolean value) {

        authenticated_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
       * </pre>
       *
       * <code>optional bool authenticated = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearAuthenticated() {
        bitField0_ = (bitField0_ & ~0x00000080);
        authenticated_ = false;
        onChanged();
        return this;
      }

      private boolean xTrustBoundary_ ;
      /**
       * <pre>
       * A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
       * </pre>
       *
       * <code>optional bool x_trust_boundary = 9;</code>
       * @return Whether the xTrustBoundary field is set.
       */
      @java.lang.Override
      public boolean hasXTrustBoundary() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
       * </pre>
       *
       * <code>optional bool x_trust_boundary = 9;</code>
       * @return The xTrustBoundary.
       */
      @java.lang.Override
      public boolean getXTrustBoundary() {
        return xTrustBoundary_;
      }
      /**
       * <pre>
       * A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
       * </pre>
       *
       * <code>optional bool x_trust_boundary = 9;</code>
       * @param value The xTrustBoundary to set.
       * @return This builder for chaining.
       */
      public Builder setXTrustBoundary(boolean value) {

        xTrustBoundary_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
       * </pre>
       *
       * <code>optional bool x_trust_boundary = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearXTrustBoundary() {
        bitField0_ = (bitField0_ & ~0x00000100);
        xTrustBoundary_ = false;
        onChanged();
        return this;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.DataClassification> data_ =
        java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000200) != 0)) {
          data_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.DataClassification>(data_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.DataClassification, cyclonedx.v1_3.Bom13.DataClassification.Builder, cyclonedx.v1_3.Bom13.DataClassificationOrBuilder> dataBuilder_;

      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.DataClassification> getDataList() {
        if (dataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(data_);
        } else {
          return dataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public int getDataCount() {
        if (dataBuilder_ == null) {
          return data_.size();
        } else {
          return dataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public cyclonedx.v1_3.Bom13.DataClassification getData(int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);
        } else {
          return dataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public Builder setData(
          int index, cyclonedx.v1_3.Bom13.DataClassification value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.set(index, value);
          onChanged();
        } else {
          dataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public Builder setData(
          int index, cyclonedx.v1_3.Bom13.DataClassification.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public Builder addData(cyclonedx.v1_3.Bom13.DataClassification value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(value);
          onChanged();
        } else {
          dataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public Builder addData(
          int index, cyclonedx.v1_3.Bom13.DataClassification value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(index, value);
          onChanged();
        } else {
          dataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public Builder addData(
          cyclonedx.v1_3.Bom13.DataClassification.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public Builder addData(
          int index, cyclonedx.v1_3.Bom13.DataClassification.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.DataClassification> values) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, data_);
          onChanged();
        } else {
          dataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public Builder clearData() {
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          dataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public Builder removeData(int index) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.remove(index);
          onChanged();
        } else {
          dataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public cyclonedx.v1_3.Bom13.DataClassification.Builder getDataBuilder(
          int index) {
        return getDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public cyclonedx.v1_3.Bom13.DataClassificationOrBuilder getDataOrBuilder(
          int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);  } else {
          return dataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.DataClassificationOrBuilder> 
           getDataOrBuilderList() {
        if (dataBuilder_ != null) {
          return dataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(data_);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public cyclonedx.v1_3.Bom13.DataClassification.Builder addDataBuilder() {
        return getDataFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.DataClassification.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public cyclonedx.v1_3.Bom13.DataClassification.Builder addDataBuilder(
          int index) {
        return getDataFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.DataClassification.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.DataClassification data = 10;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.DataClassification.Builder> 
           getDataBuilderList() {
        return getDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.DataClassification, cyclonedx.v1_3.Bom13.DataClassification.Builder, cyclonedx.v1_3.Bom13.DataClassificationOrBuilder> 
          getDataFieldBuilder() {
        if (dataBuilder_ == null) {
          dataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.DataClassification, cyclonedx.v1_3.Bom13.DataClassification.Builder, cyclonedx.v1_3.Bom13.DataClassificationOrBuilder>(
                  data_,
                  ((bitField0_ & 0x00000200) != 0),
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        return dataBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> licenses_ =
        java.util.Collections.emptyList();
      private void ensureLicensesIsMutable() {
        if (!((bitField0_ & 0x00000400) != 0)) {
          licenses_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.LicenseChoice>(licenses_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.LicenseChoice, cyclonedx.v1_3.Bom13.LicenseChoice.Builder, cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> licensesBuilder_;

      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> getLicensesList() {
        if (licensesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(licenses_);
        } else {
          return licensesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public int getLicensesCount() {
        if (licensesBuilder_ == null) {
          return licenses_.size();
        } else {
          return licensesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoice getLicenses(int index) {
        if (licensesBuilder_ == null) {
          return licenses_.get(index);
        } else {
          return licensesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public Builder setLicenses(
          int index, cyclonedx.v1_3.Bom13.LicenseChoice value) {
        if (licensesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLicensesIsMutable();
          licenses_.set(index, value);
          onChanged();
        } else {
          licensesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public Builder setLicenses(
          int index, cyclonedx.v1_3.Bom13.LicenseChoice.Builder builderForValue) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          licenses_.set(index, builderForValue.build());
          onChanged();
        } else {
          licensesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public Builder addLicenses(cyclonedx.v1_3.Bom13.LicenseChoice value) {
        if (licensesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLicensesIsMutable();
          licenses_.add(value);
          onChanged();
        } else {
          licensesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public Builder addLicenses(
          int index, cyclonedx.v1_3.Bom13.LicenseChoice value) {
        if (licensesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLicensesIsMutable();
          licenses_.add(index, value);
          onChanged();
        } else {
          licensesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public Builder addLicenses(
          cyclonedx.v1_3.Bom13.LicenseChoice.Builder builderForValue) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          licenses_.add(builderForValue.build());
          onChanged();
        } else {
          licensesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public Builder addLicenses(
          int index, cyclonedx.v1_3.Bom13.LicenseChoice.Builder builderForValue) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          licenses_.add(index, builderForValue.build());
          onChanged();
        } else {
          licensesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public Builder addAllLicenses(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.LicenseChoice> values) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, licenses_);
          onChanged();
        } else {
          licensesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public Builder clearLicenses() {
        if (licensesBuilder_ == null) {
          licenses_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          licensesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public Builder removeLicenses(int index) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          licenses_.remove(index);
          onChanged();
        } else {
          licensesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoice.Builder getLicensesBuilder(
          int index) {
        return getLicensesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder getLicensesOrBuilder(
          int index) {
        if (licensesBuilder_ == null) {
          return licenses_.get(index);  } else {
          return licensesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> 
           getLicensesOrBuilderList() {
        if (licensesBuilder_ != null) {
          return licensesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(licenses_);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoice.Builder addLicensesBuilder() {
        return getLicensesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.LicenseChoice.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoice.Builder addLicensesBuilder(
          int index) {
        return getLicensesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.LicenseChoice.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 11;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice.Builder> 
           getLicensesBuilderList() {
        return getLicensesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.LicenseChoice, cyclonedx.v1_3.Bom13.LicenseChoice.Builder, cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> 
          getLicensesFieldBuilder() {
        if (licensesBuilder_ == null) {
          licensesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.LicenseChoice, cyclonedx.v1_3.Bom13.LicenseChoice.Builder, cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder>(
                  licenses_,
                  ((bitField0_ & 0x00000400) != 0),
                  getParentForChildren(),
                  isClean());
          licenses_ = null;
        }
        return licensesBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> externalReferences_ =
        java.util.Collections.emptyList();
      private void ensureExternalReferencesIsMutable() {
        if (!((bitField0_ & 0x00000800) != 0)) {
          externalReferences_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.ExternalReference>(externalReferences_);
          bitField0_ |= 0x00000800;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.ExternalReference, cyclonedx.v1_3.Bom13.ExternalReference.Builder, cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> externalReferencesBuilder_;

      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.ExternalReference> getExternalReferencesList() {
        if (externalReferencesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(externalReferences_);
        } else {
          return externalReferencesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public int getExternalReferencesCount() {
        if (externalReferencesBuilder_ == null) {
          return externalReferences_.size();
        } else {
          return externalReferencesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReference getExternalReferences(int index) {
        if (externalReferencesBuilder_ == null) {
          return externalReferences_.get(index);
        } else {
          return externalReferencesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public Builder setExternalReferences(
          int index, cyclonedx.v1_3.Bom13.ExternalReference value) {
        if (externalReferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExternalReferencesIsMutable();
          externalReferences_.set(index, value);
          onChanged();
        } else {
          externalReferencesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public Builder setExternalReferences(
          int index, cyclonedx.v1_3.Bom13.ExternalReference.Builder builderForValue) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          externalReferences_.set(index, builderForValue.build());
          onChanged();
        } else {
          externalReferencesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public Builder addExternalReferences(cyclonedx.v1_3.Bom13.ExternalReference value) {
        if (externalReferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExternalReferencesIsMutable();
          externalReferences_.add(value);
          onChanged();
        } else {
          externalReferencesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public Builder addExternalReferences(
          int index, cyclonedx.v1_3.Bom13.ExternalReference value) {
        if (externalReferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExternalReferencesIsMutable();
          externalReferences_.add(index, value);
          onChanged();
        } else {
          externalReferencesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public Builder addExternalReferences(
          cyclonedx.v1_3.Bom13.ExternalReference.Builder builderForValue) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          externalReferences_.add(builderForValue.build());
          onChanged();
        } else {
          externalReferencesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public Builder addExternalReferences(
          int index, cyclonedx.v1_3.Bom13.ExternalReference.Builder builderForValue) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          externalReferences_.add(index, builderForValue.build());
          onChanged();
        } else {
          externalReferencesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public Builder addAllExternalReferences(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.ExternalReference> values) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, externalReferences_);
          onChanged();
        } else {
          externalReferencesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public Builder clearExternalReferences() {
        if (externalReferencesBuilder_ == null) {
          externalReferences_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
        } else {
          externalReferencesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public Builder removeExternalReferences(int index) {
        if (externalReferencesBuilder_ == null) {
          ensureExternalReferencesIsMutable();
          externalReferences_.remove(index);
          onChanged();
        } else {
          externalReferencesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReference.Builder getExternalReferencesBuilder(
          int index) {
        return getExternalReferencesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder getExternalReferencesOrBuilder(
          int index) {
        if (externalReferencesBuilder_ == null) {
          return externalReferences_.get(index);  } else {
          return externalReferencesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> 
           getExternalReferencesOrBuilderList() {
        if (externalReferencesBuilder_ != null) {
          return externalReferencesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(externalReferences_);
        }
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReference.Builder addExternalReferencesBuilder() {
        return getExternalReferencesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.ExternalReference.getDefaultInstance());
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public cyclonedx.v1_3.Bom13.ExternalReference.Builder addExternalReferencesBuilder(
          int index) {
        return getExternalReferencesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.ExternalReference.getDefaultInstance());
      }
      /**
       * <pre>
       * Provides the ability to document external references related to the service.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.ExternalReference external_references = 12;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.ExternalReference.Builder> 
           getExternalReferencesBuilderList() {
        return getExternalReferencesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.ExternalReference, cyclonedx.v1_3.Bom13.ExternalReference.Builder, cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder> 
          getExternalReferencesFieldBuilder() {
        if (externalReferencesBuilder_ == null) {
          externalReferencesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.ExternalReference, cyclonedx.v1_3.Bom13.ExternalReference.Builder, cyclonedx.v1_3.Bom13.ExternalReferenceOrBuilder>(
                  externalReferences_,
                  ((bitField0_ & 0x00000800) != 0),
                  getParentForChildren(),
                  isClean());
          externalReferences_ = null;
        }
        return externalReferencesBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Service> services_ =
        java.util.Collections.emptyList();
      private void ensureServicesIsMutable() {
        if (!((bitField0_ & 0x00001000) != 0)) {
          services_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Service>(services_);
          bitField0_ |= 0x00001000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Service, cyclonedx.v1_3.Bom13.Service.Builder, cyclonedx.v1_3.Bom13.ServiceOrBuilder> servicesBuilder_;

      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Service> getServicesList() {
        if (servicesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(services_);
        } else {
          return servicesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public int getServicesCount() {
        if (servicesBuilder_ == null) {
          return services_.size();
        } else {
          return servicesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public cyclonedx.v1_3.Bom13.Service getServices(int index) {
        if (servicesBuilder_ == null) {
          return services_.get(index);
        } else {
          return servicesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public Builder setServices(
          int index, cyclonedx.v1_3.Bom13.Service value) {
        if (servicesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServicesIsMutable();
          services_.set(index, value);
          onChanged();
        } else {
          servicesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public Builder setServices(
          int index, cyclonedx.v1_3.Bom13.Service.Builder builderForValue) {
        if (servicesBuilder_ == null) {
          ensureServicesIsMutable();
          services_.set(index, builderForValue.build());
          onChanged();
        } else {
          servicesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public Builder addServices(cyclonedx.v1_3.Bom13.Service value) {
        if (servicesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServicesIsMutable();
          services_.add(value);
          onChanged();
        } else {
          servicesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public Builder addServices(
          int index, cyclonedx.v1_3.Bom13.Service value) {
        if (servicesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServicesIsMutable();
          services_.add(index, value);
          onChanged();
        } else {
          servicesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public Builder addServices(
          cyclonedx.v1_3.Bom13.Service.Builder builderForValue) {
        if (servicesBuilder_ == null) {
          ensureServicesIsMutable();
          services_.add(builderForValue.build());
          onChanged();
        } else {
          servicesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public Builder addServices(
          int index, cyclonedx.v1_3.Bom13.Service.Builder builderForValue) {
        if (servicesBuilder_ == null) {
          ensureServicesIsMutable();
          services_.add(index, builderForValue.build());
          onChanged();
        } else {
          servicesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public Builder addAllServices(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Service> values) {
        if (servicesBuilder_ == null) {
          ensureServicesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, services_);
          onChanged();
        } else {
          servicesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public Builder clearServices() {
        if (servicesBuilder_ == null) {
          services_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
          onChanged();
        } else {
          servicesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public Builder removeServices(int index) {
        if (servicesBuilder_ == null) {
          ensureServicesIsMutable();
          services_.remove(index);
          onChanged();
        } else {
          servicesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public cyclonedx.v1_3.Bom13.Service.Builder getServicesBuilder(
          int index) {
        return getServicesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public cyclonedx.v1_3.Bom13.ServiceOrBuilder getServicesOrBuilder(
          int index) {
        if (servicesBuilder_ == null) {
          return services_.get(index);  } else {
          return servicesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.ServiceOrBuilder> 
           getServicesOrBuilderList() {
        if (servicesBuilder_ != null) {
          return servicesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(services_);
        }
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public cyclonedx.v1_3.Bom13.Service.Builder addServicesBuilder() {
        return getServicesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Service.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public cyclonedx.v1_3.Bom13.Service.Builder addServicesBuilder(
          int index) {
        return getServicesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Service.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -&gt; subsystem -&gt; parts assembly in physical supply chains.
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Service services = 13;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Service.Builder> 
           getServicesBuilderList() {
        return getServicesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Service, cyclonedx.v1_3.Bom13.Service.Builder, cyclonedx.v1_3.Bom13.ServiceOrBuilder> 
          getServicesFieldBuilder() {
        if (servicesBuilder_ == null) {
          servicesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Service, cyclonedx.v1_3.Bom13.Service.Builder, cyclonedx.v1_3.Bom13.ServiceOrBuilder>(
                  services_,
                  ((bitField0_ & 0x00001000) != 0),
                  getParentForChildren(),
                  isClean());
          services_ = null;
        }
        return servicesBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Property> properties_ =
        java.util.Collections.emptyList();
      private void ensurePropertiesIsMutable() {
        if (!((bitField0_ & 0x00002000) != 0)) {
          properties_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Property>(properties_);
          bitField0_ |= 0x00002000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Property, cyclonedx.v1_3.Bom13.Property.Builder, cyclonedx.v1_3.Bom13.PropertyOrBuilder> propertiesBuilder_;

      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Property> getPropertiesList() {
        if (propertiesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(properties_);
        } else {
          return propertiesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public int getPropertiesCount() {
        if (propertiesBuilder_ == null) {
          return properties_.size();
        } else {
          return propertiesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public cyclonedx.v1_3.Bom13.Property getProperties(int index) {
        if (propertiesBuilder_ == null) {
          return properties_.get(index);
        } else {
          return propertiesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public Builder setProperties(
          int index, cyclonedx.v1_3.Bom13.Property value) {
        if (propertiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertiesIsMutable();
          properties_.set(index, value);
          onChanged();
        } else {
          propertiesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public Builder setProperties(
          int index, cyclonedx.v1_3.Bom13.Property.Builder builderForValue) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          properties_.set(index, builderForValue.build());
          onChanged();
        } else {
          propertiesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public Builder addProperties(cyclonedx.v1_3.Bom13.Property value) {
        if (propertiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertiesIsMutable();
          properties_.add(value);
          onChanged();
        } else {
          propertiesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public Builder addProperties(
          int index, cyclonedx.v1_3.Bom13.Property value) {
        if (propertiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePropertiesIsMutable();
          properties_.add(index, value);
          onChanged();
        } else {
          propertiesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public Builder addProperties(
          cyclonedx.v1_3.Bom13.Property.Builder builderForValue) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          properties_.add(builderForValue.build());
          onChanged();
        } else {
          propertiesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public Builder addProperties(
          int index, cyclonedx.v1_3.Bom13.Property.Builder builderForValue) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          properties_.add(index, builderForValue.build());
          onChanged();
        } else {
          propertiesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public Builder addAllProperties(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Property> values) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, properties_);
          onChanged();
        } else {
          propertiesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public Builder clearProperties() {
        if (propertiesBuilder_ == null) {
          properties_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
          onChanged();
        } else {
          propertiesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public Builder removeProperties(int index) {
        if (propertiesBuilder_ == null) {
          ensurePropertiesIsMutable();
          properties_.remove(index);
          onChanged();
        } else {
          propertiesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public cyclonedx.v1_3.Bom13.Property.Builder getPropertiesBuilder(
          int index) {
        return getPropertiesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public cyclonedx.v1_3.Bom13.PropertyOrBuilder getPropertiesOrBuilder(
          int index) {
        if (propertiesBuilder_ == null) {
          return properties_.get(index);  } else {
          return propertiesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.PropertyOrBuilder> 
           getPropertiesOrBuilderList() {
        if (propertiesBuilder_ != null) {
          return propertiesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(properties_);
        }
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public cyclonedx.v1_3.Bom13.Property.Builder addPropertiesBuilder() {
        return getPropertiesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Property.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public cyclonedx.v1_3.Bom13.Property.Builder addPropertiesBuilder(
          int index) {
        return getPropertiesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Property.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies optional, custom, properties
       * </pre>
       *
       * <code>repeated .cyclonedx.v1_3.Property properties = 14;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Property.Builder> 
           getPropertiesBuilderList() {
        return getPropertiesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Property, cyclonedx.v1_3.Bom13.Property.Builder, cyclonedx.v1_3.Bom13.PropertyOrBuilder> 
          getPropertiesFieldBuilder() {
        if (propertiesBuilder_ == null) {
          propertiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Property, cyclonedx.v1_3.Bom13.Property.Builder, cyclonedx.v1_3.Bom13.PropertyOrBuilder>(
                  properties_,
                  ((bitField0_ & 0x00002000) != 0),
                  getParentForChildren(),
                  isClean());
          properties_ = null;
        }
        return propertiesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Service)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Service)
    private static final cyclonedx.v1_3.Bom13.Service DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Service();
    }

    public static cyclonedx.v1_3.Bom13.Service getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Service>
        PARSER = new com.google.protobuf.AbstractParser<Service>() {
      @java.lang.Override
      public Service parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Service> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Service> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Service getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SwidOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Swid)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Maps to the tagId of a SoftwareIdentity.
     * </pre>
     *
     * <code>string tag_id = 1;</code>
     * @return The tagId.
     */
    java.lang.String getTagId();
    /**
     * <pre>
     * Maps to the tagId of a SoftwareIdentity.
     * </pre>
     *
     * <code>string tag_id = 1;</code>
     * @return The bytes for tagId.
     */
    com.google.protobuf.ByteString
        getTagIdBytes();

    /**
     * <pre>
     * Maps to the name of a SoftwareIdentity.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Maps to the name of a SoftwareIdentity.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Maps to the version of a SoftwareIdentity.
     * </pre>
     *
     * <code>optional string version = 3;</code>
     * @return Whether the version field is set.
     */
    boolean hasVersion();
    /**
     * <pre>
     * Maps to the version of a SoftwareIdentity.
     * </pre>
     *
     * <code>optional string version = 3;</code>
     * @return The version.
     */
    java.lang.String getVersion();
    /**
     * <pre>
     * Maps to the version of a SoftwareIdentity.
     * </pre>
     *
     * <code>optional string version = 3;</code>
     * @return The bytes for version.
     */
    com.google.protobuf.ByteString
        getVersionBytes();

    /**
     * <pre>
     * Maps to the tagVersion of a SoftwareIdentity.
     * </pre>
     *
     * <code>optional int32 tag_version = 4;</code>
     * @return Whether the tagVersion field is set.
     */
    boolean hasTagVersion();
    /**
     * <pre>
     * Maps to the tagVersion of a SoftwareIdentity.
     * </pre>
     *
     * <code>optional int32 tag_version = 4;</code>
     * @return The tagVersion.
     */
    int getTagVersion();

    /**
     * <pre>
     * Maps to the patch of a SoftwareIdentity.
     * </pre>
     *
     * <code>optional bool patch = 5;</code>
     * @return Whether the patch field is set.
     */
    boolean hasPatch();
    /**
     * <pre>
     * Maps to the patch of a SoftwareIdentity.
     * </pre>
     *
     * <code>optional bool patch = 5;</code>
     * @return The patch.
     */
    boolean getPatch();

    /**
     * <pre>
     * Specifies the full content of the SWID tag.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
     * @return Whether the text field is set.
     */
    boolean hasText();
    /**
     * <pre>
     * Specifies the full content of the SWID tag.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
     * @return The text.
     */
    cyclonedx.v1_3.Bom13.AttachedText getText();
    /**
     * <pre>
     * Specifies the full content of the SWID tag.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
     */
    cyclonedx.v1_3.Bom13.AttachedTextOrBuilder getTextOrBuilder();

    /**
     * <pre>
     * The URL to the SWID file.
     * </pre>
     *
     * <code>optional string url = 7;</code>
     * @return Whether the url field is set.
     */
    boolean hasUrl();
    /**
     * <pre>
     * The URL to the SWID file.
     * </pre>
     *
     * <code>optional string url = 7;</code>
     * @return The url.
     */
    java.lang.String getUrl();
    /**
     * <pre>
     * The URL to the SWID file.
     * </pre>
     *
     * <code>optional string url = 7;</code>
     * @return The bytes for url.
     */
    com.google.protobuf.ByteString
        getUrlBytes();
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.Swid}
   */
  public static final class Swid extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Swid)
      SwidOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Swid.class.getName());
    }
    // Use Swid.newBuilder() to construct.
    private Swid(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Swid() {
      tagId_ = "";
      name_ = "";
      version_ = "";
      url_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Swid_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Swid_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Swid.class, cyclonedx.v1_3.Bom13.Swid.Builder.class);
    }

    private int bitField0_;
    public static final int TAG_ID_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object tagId_ = "";
    /**
     * <pre>
     * Maps to the tagId of a SoftwareIdentity.
     * </pre>
     *
     * <code>string tag_id = 1;</code>
     * @return The tagId.
     */
    @java.lang.Override
    public java.lang.String getTagId() {
      java.lang.Object ref = tagId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tagId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Maps to the tagId of a SoftwareIdentity.
     * </pre>
     *
     * <code>string tag_id = 1;</code>
     * @return The bytes for tagId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTagIdBytes() {
      java.lang.Object ref = tagId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tagId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * Maps to the name of a SoftwareIdentity.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Maps to the name of a SoftwareIdentity.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VERSION_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object version_ = "";
    /**
     * <pre>
     * Maps to the version of a SoftwareIdentity.
     * </pre>
     *
     * <code>optional string version = 3;</code>
     * @return Whether the version field is set.
     */
    @java.lang.Override
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Maps to the version of a SoftwareIdentity.
     * </pre>
     *
     * <code>optional string version = 3;</code>
     * @return The version.
     */
    @java.lang.Override
    public java.lang.String getVersion() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        version_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Maps to the version of a SoftwareIdentity.
     * </pre>
     *
     * <code>optional string version = 3;</code>
     * @return The bytes for version.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVersionBytes() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        version_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TAG_VERSION_FIELD_NUMBER = 4;
    private int tagVersion_ = 0;
    /**
     * <pre>
     * Maps to the tagVersion of a SoftwareIdentity.
     * </pre>
     *
     * <code>optional int32 tag_version = 4;</code>
     * @return Whether the tagVersion field is set.
     */
    @java.lang.Override
    public boolean hasTagVersion() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Maps to the tagVersion of a SoftwareIdentity.
     * </pre>
     *
     * <code>optional int32 tag_version = 4;</code>
     * @return The tagVersion.
     */
    @java.lang.Override
    public int getTagVersion() {
      return tagVersion_;
    }

    public static final int PATCH_FIELD_NUMBER = 5;
    private boolean patch_ = false;
    /**
     * <pre>
     * Maps to the patch of a SoftwareIdentity.
     * </pre>
     *
     * <code>optional bool patch = 5;</code>
     * @return Whether the patch field is set.
     */
    @java.lang.Override
    public boolean hasPatch() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Maps to the patch of a SoftwareIdentity.
     * </pre>
     *
     * <code>optional bool patch = 5;</code>
     * @return The patch.
     */
    @java.lang.Override
    public boolean getPatch() {
      return patch_;
    }

    public static final int TEXT_FIELD_NUMBER = 6;
    private cyclonedx.v1_3.Bom13.AttachedText text_;
    /**
     * <pre>
     * Specifies the full content of the SWID tag.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
     * @return Whether the text field is set.
     */
    @java.lang.Override
    public boolean hasText() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Specifies the full content of the SWID tag.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
     * @return The text.
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.AttachedText getText() {
      return text_ == null ? cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance() : text_;
    }
    /**
     * <pre>
     * Specifies the full content of the SWID tag.
     * </pre>
     *
     * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.AttachedTextOrBuilder getTextOrBuilder() {
      return text_ == null ? cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance() : text_;
    }

    public static final int URL_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private volatile java.lang.Object url_ = "";
    /**
     * <pre>
     * The URL to the SWID file.
     * </pre>
     *
     * <code>optional string url = 7;</code>
     * @return Whether the url field is set.
     */
    @java.lang.Override
    public boolean hasUrl() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The URL to the SWID file.
     * </pre>
     *
     * <code>optional string url = 7;</code>
     * @return The url.
     */
    @java.lang.Override
    public java.lang.String getUrl() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        url_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The URL to the SWID file.
     * </pre>
     *
     * <code>optional string url = 7;</code>
     * @return The bytes for url.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUrlBytes() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        url_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(tagId_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, tagId_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, name_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, version_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(4, tagVersion_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(5, patch_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(6, getText());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 7, url_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(tagId_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, tagId_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, name_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, version_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, tagVersion_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, patch_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getText());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(7, url_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Swid)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Swid other = (cyclonedx.v1_3.Bom13.Swid) obj;

      if (!getTagId()
          .equals(other.getTagId())) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (hasVersion() != other.hasVersion()) return false;
      if (hasVersion()) {
        if (!getVersion()
            .equals(other.getVersion())) return false;
      }
      if (hasTagVersion() != other.hasTagVersion()) return false;
      if (hasTagVersion()) {
        if (getTagVersion()
            != other.getTagVersion()) return false;
      }
      if (hasPatch() != other.hasPatch()) return false;
      if (hasPatch()) {
        if (getPatch()
            != other.getPatch()) return false;
      }
      if (hasText() != other.hasText()) return false;
      if (hasText()) {
        if (!getText()
            .equals(other.getText())) return false;
      }
      if (hasUrl() != other.hasUrl()) return false;
      if (hasUrl()) {
        if (!getUrl()
            .equals(other.getUrl())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TAG_ID_FIELD_NUMBER;
      hash = (53 * hash) + getTagId().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (hasVersion()) {
        hash = (37 * hash) + VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getVersion().hashCode();
      }
      if (hasTagVersion()) {
        hash = (37 * hash) + TAG_VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getTagVersion();
      }
      if (hasPatch()) {
        hash = (37 * hash) + PATCH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getPatch());
      }
      if (hasText()) {
        hash = (37 * hash) + TEXT_FIELD_NUMBER;
        hash = (53 * hash) + getText().hashCode();
      }
      if (hasUrl()) {
        hash = (37 * hash) + URL_FIELD_NUMBER;
        hash = (53 * hash) + getUrl().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Swid parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Swid parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Swid parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Swid parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Swid parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Swid parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Swid parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Swid parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Swid parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Swid parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Swid parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Swid parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Swid prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.Swid}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Swid)
        cyclonedx.v1_3.Bom13.SwidOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Swid_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Swid_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Swid.class, cyclonedx.v1_3.Bom13.Swid.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Swid.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTextFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        tagId_ = "";
        name_ = "";
        version_ = "";
        tagVersion_ = 0;
        patch_ = false;
        text_ = null;
        if (textBuilder_ != null) {
          textBuilder_.dispose();
          textBuilder_ = null;
        }
        url_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Swid_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Swid getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Swid.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Swid build() {
        cyclonedx.v1_3.Bom13.Swid result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Swid buildPartial() {
        cyclonedx.v1_3.Bom13.Swid result = new cyclonedx.v1_3.Bom13.Swid(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Swid result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.tagId_ = tagId_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.name_ = name_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.version_ = version_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.tagVersion_ = tagVersion_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.patch_ = patch_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.text_ = textBuilder_ == null
              ? text_
              : textBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.url_ = url_;
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Swid) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Swid)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Swid other) {
        if (other == cyclonedx.v1_3.Bom13.Swid.getDefaultInstance()) return this;
        if (!other.getTagId().isEmpty()) {
          tagId_ = other.tagId_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasVersion()) {
          version_ = other.version_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.hasTagVersion()) {
          setTagVersion(other.getTagVersion());
        }
        if (other.hasPatch()) {
          setPatch(other.getPatch());
        }
        if (other.hasText()) {
          mergeText(other.getText());
        }
        if (other.hasUrl()) {
          url_ = other.url_;
          bitField0_ |= 0x00000040;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                tagId_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                version_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                tagVersion_ = input.readInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                patch_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 50: {
                input.readMessage(
                    getTextFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 58: {
                url_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object tagId_ = "";
      /**
       * <pre>
       * Maps to the tagId of a SoftwareIdentity.
       * </pre>
       *
       * <code>string tag_id = 1;</code>
       * @return The tagId.
       */
      public java.lang.String getTagId() {
        java.lang.Object ref = tagId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tagId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Maps to the tagId of a SoftwareIdentity.
       * </pre>
       *
       * <code>string tag_id = 1;</code>
       * @return The bytes for tagId.
       */
      public com.google.protobuf.ByteString
          getTagIdBytes() {
        java.lang.Object ref = tagId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tagId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Maps to the tagId of a SoftwareIdentity.
       * </pre>
       *
       * <code>string tag_id = 1;</code>
       * @param value The tagId to set.
       * @return This builder for chaining.
       */
      public Builder setTagId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        tagId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maps to the tagId of a SoftwareIdentity.
       * </pre>
       *
       * <code>string tag_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTagId() {
        tagId_ = getDefaultInstance().getTagId();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maps to the tagId of a SoftwareIdentity.
       * </pre>
       *
       * <code>string tag_id = 1;</code>
       * @param value The bytes for tagId to set.
       * @return This builder for chaining.
       */
      public Builder setTagIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        tagId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Maps to the name of a SoftwareIdentity.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Maps to the name of a SoftwareIdentity.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Maps to the name of a SoftwareIdentity.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maps to the name of a SoftwareIdentity.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maps to the name of a SoftwareIdentity.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object version_ = "";
      /**
       * <pre>
       * Maps to the version of a SoftwareIdentity.
       * </pre>
       *
       * <code>optional string version = 3;</code>
       * @return Whether the version field is set.
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Maps to the version of a SoftwareIdentity.
       * </pre>
       *
       * <code>optional string version = 3;</code>
       * @return The version.
       */
      public java.lang.String getVersion() {
        java.lang.Object ref = version_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          version_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Maps to the version of a SoftwareIdentity.
       * </pre>
       *
       * <code>optional string version = 3;</code>
       * @return The bytes for version.
       */
      public com.google.protobuf.ByteString
          getVersionBytes() {
        java.lang.Object ref = version_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          version_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Maps to the version of a SoftwareIdentity.
       * </pre>
       *
       * <code>optional string version = 3;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        version_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maps to the version of a SoftwareIdentity.
       * </pre>
       *
       * <code>optional string version = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        version_ = getDefaultInstance().getVersion();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maps to the version of a SoftwareIdentity.
       * </pre>
       *
       * <code>optional string version = 3;</code>
       * @param value The bytes for version to set.
       * @return This builder for chaining.
       */
      public Builder setVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        version_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private int tagVersion_ ;
      /**
       * <pre>
       * Maps to the tagVersion of a SoftwareIdentity.
       * </pre>
       *
       * <code>optional int32 tag_version = 4;</code>
       * @return Whether the tagVersion field is set.
       */
      @java.lang.Override
      public boolean hasTagVersion() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Maps to the tagVersion of a SoftwareIdentity.
       * </pre>
       *
       * <code>optional int32 tag_version = 4;</code>
       * @return The tagVersion.
       */
      @java.lang.Override
      public int getTagVersion() {
        return tagVersion_;
      }
      /**
       * <pre>
       * Maps to the tagVersion of a SoftwareIdentity.
       * </pre>
       *
       * <code>optional int32 tag_version = 4;</code>
       * @param value The tagVersion to set.
       * @return This builder for chaining.
       */
      public Builder setTagVersion(int value) {

        tagVersion_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maps to the tagVersion of a SoftwareIdentity.
       * </pre>
       *
       * <code>optional int32 tag_version = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearTagVersion() {
        bitField0_ = (bitField0_ & ~0x00000008);
        tagVersion_ = 0;
        onChanged();
        return this;
      }

      private boolean patch_ ;
      /**
       * <pre>
       * Maps to the patch of a SoftwareIdentity.
       * </pre>
       *
       * <code>optional bool patch = 5;</code>
       * @return Whether the patch field is set.
       */
      @java.lang.Override
      public boolean hasPatch() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Maps to the patch of a SoftwareIdentity.
       * </pre>
       *
       * <code>optional bool patch = 5;</code>
       * @return The patch.
       */
      @java.lang.Override
      public boolean getPatch() {
        return patch_;
      }
      /**
       * <pre>
       * Maps to the patch of a SoftwareIdentity.
       * </pre>
       *
       * <code>optional bool patch = 5;</code>
       * @param value The patch to set.
       * @return This builder for chaining.
       */
      public Builder setPatch(boolean value) {

        patch_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maps to the patch of a SoftwareIdentity.
       * </pre>
       *
       * <code>optional bool patch = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearPatch() {
        bitField0_ = (bitField0_ & ~0x00000010);
        patch_ = false;
        onChanged();
        return this;
      }

      private cyclonedx.v1_3.Bom13.AttachedText text_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.AttachedText, cyclonedx.v1_3.Bom13.AttachedText.Builder, cyclonedx.v1_3.Bom13.AttachedTextOrBuilder> textBuilder_;
      /**
       * <pre>
       * Specifies the full content of the SWID tag.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
       * @return Whether the text field is set.
       */
      public boolean hasText() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Specifies the full content of the SWID tag.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
       * @return The text.
       */
      public cyclonedx.v1_3.Bom13.AttachedText getText() {
        if (textBuilder_ == null) {
          return text_ == null ? cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance() : text_;
        } else {
          return textBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the full content of the SWID tag.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
       */
      public Builder setText(cyclonedx.v1_3.Bom13.AttachedText value) {
        if (textBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          text_ = value;
        } else {
          textBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the full content of the SWID tag.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
       */
      public Builder setText(
          cyclonedx.v1_3.Bom13.AttachedText.Builder builderForValue) {
        if (textBuilder_ == null) {
          text_ = builderForValue.build();
        } else {
          textBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the full content of the SWID tag.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
       */
      public Builder mergeText(cyclonedx.v1_3.Bom13.AttachedText value) {
        if (textBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0) &&
            text_ != null &&
            text_ != cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance()) {
            getTextBuilder().mergeFrom(value);
          } else {
            text_ = value;
          }
        } else {
          textBuilder_.mergeFrom(value);
        }
        if (text_ != null) {
          bitField0_ |= 0x00000020;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the full content of the SWID tag.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
       */
      public Builder clearText() {
        bitField0_ = (bitField0_ & ~0x00000020);
        text_ = null;
        if (textBuilder_ != null) {
          textBuilder_.dispose();
          textBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the full content of the SWID tag.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
       */
      public cyclonedx.v1_3.Bom13.AttachedText.Builder getTextBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getTextFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the full content of the SWID tag.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
       */
      public cyclonedx.v1_3.Bom13.AttachedTextOrBuilder getTextOrBuilder() {
        if (textBuilder_ != null) {
          return textBuilder_.getMessageOrBuilder();
        } else {
          return text_ == null ?
              cyclonedx.v1_3.Bom13.AttachedText.getDefaultInstance() : text_;
        }
      }
      /**
       * <pre>
       * Specifies the full content of the SWID tag.
       * </pre>
       *
       * <code>optional .cyclonedx.v1_3.AttachedText text = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.v1_3.Bom13.AttachedText, cyclonedx.v1_3.Bom13.AttachedText.Builder, cyclonedx.v1_3.Bom13.AttachedTextOrBuilder> 
          getTextFieldBuilder() {
        if (textBuilder_ == null) {
          textBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.v1_3.Bom13.AttachedText, cyclonedx.v1_3.Bom13.AttachedText.Builder, cyclonedx.v1_3.Bom13.AttachedTextOrBuilder>(
                  getText(),
                  getParentForChildren(),
                  isClean());
          text_ = null;
        }
        return textBuilder_;
      }

      private java.lang.Object url_ = "";
      /**
       * <pre>
       * The URL to the SWID file.
       * </pre>
       *
       * <code>optional string url = 7;</code>
       * @return Whether the url field is set.
       */
      public boolean hasUrl() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * The URL to the SWID file.
       * </pre>
       *
       * <code>optional string url = 7;</code>
       * @return The url.
       */
      public java.lang.String getUrl() {
        java.lang.Object ref = url_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          url_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The URL to the SWID file.
       * </pre>
       *
       * <code>optional string url = 7;</code>
       * @return The bytes for url.
       */
      public com.google.protobuf.ByteString
          getUrlBytes() {
        java.lang.Object ref = url_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          url_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The URL to the SWID file.
       * </pre>
       *
       * <code>optional string url = 7;</code>
       * @param value The url to set.
       * @return This builder for chaining.
       */
      public Builder setUrl(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        url_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The URL to the SWID file.
       * </pre>
       *
       * <code>optional string url = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearUrl() {
        url_ = getDefaultInstance().getUrl();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The URL to the SWID file.
       * </pre>
       *
       * <code>optional string url = 7;</code>
       * @param value The bytes for url to set.
       * @return This builder for chaining.
       */
      public Builder setUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        url_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Swid)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Swid)
    private static final cyclonedx.v1_3.Bom13.Swid DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Swid();
    }

    public static cyclonedx.v1_3.Bom13.Swid getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Swid>
        PARSER = new com.google.protobuf.AbstractParser<Swid>() {
      @java.lang.Override
      public Swid parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Swid> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Swid> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Swid getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ToolOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Tool)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The vendor of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     * @return Whether the vendor field is set.
     */
    boolean hasVendor();
    /**
     * <pre>
     * The vendor of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     * @return The vendor.
     */
    java.lang.String getVendor();
    /**
     * <pre>
     * The vendor of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     * @return The bytes for vendor.
     */
    com.google.protobuf.ByteString
        getVendorBytes();

    /**
     * <pre>
     * The name of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return Whether the name field is set.
     */
    boolean hasName();
    /**
     * <pre>
     * The name of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The name of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The version of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string version = 3;</code>
     * @return Whether the version field is set.
     */
    boolean hasVersion();
    /**
     * <pre>
     * The version of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string version = 3;</code>
     * @return The version.
     */
    java.lang.String getVersion();
    /**
     * <pre>
     * The version of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string version = 3;</code>
     * @return The bytes for version.
     */
    com.google.protobuf.ByteString
        getVersionBytes();

    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.Hash> 
        getHashesList();
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    cyclonedx.v1_3.Bom13.Hash getHashes(int index);
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    int getHashesCount();
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.HashOrBuilder> 
        getHashesOrBuilderList();
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    cyclonedx.v1_3.Bom13.HashOrBuilder getHashesOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Specifies a tool (manual or automated).
   * </pre>
   *
   * Protobuf type {@code cyclonedx.v1_3.Tool}
   */
  public static final class Tool extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Tool)
      ToolOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Tool.class.getName());
    }
    // Use Tool.newBuilder() to construct.
    private Tool(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Tool() {
      vendor_ = "";
      name_ = "";
      version_ = "";
      hashes_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Tool_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Tool_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Tool.class, cyclonedx.v1_3.Bom13.Tool.Builder.class);
    }

    private int bitField0_;
    public static final int VENDOR_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object vendor_ = "";
    /**
     * <pre>
     * The vendor of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     * @return Whether the vendor field is set.
     */
    @java.lang.Override
    public boolean hasVendor() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The vendor of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     * @return The vendor.
     */
    @java.lang.Override
    public java.lang.String getVendor() {
      java.lang.Object ref = vendor_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        vendor_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The vendor of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     * @return The bytes for vendor.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVendorBytes() {
      java.lang.Object ref = vendor_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vendor_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return Whether the name field is set.
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The name of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VERSION_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object version_ = "";
    /**
     * <pre>
     * The version of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string version = 3;</code>
     * @return Whether the version field is set.
     */
    @java.lang.Override
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The version of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string version = 3;</code>
     * @return The version.
     */
    @java.lang.Override
    public java.lang.String getVersion() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        version_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The version of the tool used to create the BOM.
     * </pre>
     *
     * <code>optional string version = 3;</code>
     * @return The bytes for version.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVersionBytes() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        version_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HASHES_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.Hash> hashes_;
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.Hash> getHashesList() {
      return hashes_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.HashOrBuilder> 
        getHashesOrBuilderList() {
      return hashes_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    @java.lang.Override
    public int getHashesCount() {
      return hashes_.size();
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Hash getHashes(int index) {
      return hashes_.get(index);
    }
    /**
     * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.HashOrBuilder getHashesOrBuilder(
        int index) {
      return hashes_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, vendor_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, name_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, version_);
      }
      for (int i = 0; i < hashes_.size(); i++) {
        output.writeMessage(4, hashes_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, vendor_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, name_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, version_);
      }
      for (int i = 0; i < hashes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, hashes_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Tool)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Tool other = (cyclonedx.v1_3.Bom13.Tool) obj;

      if (hasVendor() != other.hasVendor()) return false;
      if (hasVendor()) {
        if (!getVendor()
            .equals(other.getVendor())) return false;
      }
      if (hasName() != other.hasName()) return false;
      if (hasName()) {
        if (!getName()
            .equals(other.getName())) return false;
      }
      if (hasVersion() != other.hasVersion()) return false;
      if (hasVersion()) {
        if (!getVersion()
            .equals(other.getVersion())) return false;
      }
      if (!getHashesList()
          .equals(other.getHashesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasVendor()) {
        hash = (37 * hash) + VENDOR_FIELD_NUMBER;
        hash = (53 * hash) + getVendor().hashCode();
      }
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasVersion()) {
        hash = (37 * hash) + VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getVersion().hashCode();
      }
      if (getHashesCount() > 0) {
        hash = (37 * hash) + HASHES_FIELD_NUMBER;
        hash = (53 * hash) + getHashesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Tool parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Tool parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Tool parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Tool parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Tool parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Tool parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Tool parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Tool parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Tool parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Tool parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Tool parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Tool parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Tool prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies a tool (manual or automated).
     * </pre>
     *
     * Protobuf type {@code cyclonedx.v1_3.Tool}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Tool)
        cyclonedx.v1_3.Bom13.ToolOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Tool_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Tool_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Tool.class, cyclonedx.v1_3.Bom13.Tool.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Tool.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        vendor_ = "";
        name_ = "";
        version_ = "";
        if (hashesBuilder_ == null) {
          hashes_ = java.util.Collections.emptyList();
        } else {
          hashes_ = null;
          hashesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Tool_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Tool getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Tool.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Tool build() {
        cyclonedx.v1_3.Bom13.Tool result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Tool buildPartial() {
        cyclonedx.v1_3.Bom13.Tool result = new cyclonedx.v1_3.Bom13.Tool(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(cyclonedx.v1_3.Bom13.Tool result) {
        if (hashesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            hashes_ = java.util.Collections.unmodifiableList(hashes_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.hashes_ = hashes_;
        } else {
          result.hashes_ = hashesBuilder_.build();
        }
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Tool result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.vendor_ = vendor_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.name_ = name_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.version_ = version_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Tool) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Tool)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Tool other) {
        if (other == cyclonedx.v1_3.Bom13.Tool.getDefaultInstance()) return this;
        if (other.hasVendor()) {
          vendor_ = other.vendor_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasName()) {
          name_ = other.name_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasVersion()) {
          version_ = other.version_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (hashesBuilder_ == null) {
          if (!other.hashes_.isEmpty()) {
            if (hashes_.isEmpty()) {
              hashes_ = other.hashes_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureHashesIsMutable();
              hashes_.addAll(other.hashes_);
            }
            onChanged();
          }
        } else {
          if (!other.hashes_.isEmpty()) {
            if (hashesBuilder_.isEmpty()) {
              hashesBuilder_.dispose();
              hashesBuilder_ = null;
              hashes_ = other.hashes_;
              bitField0_ = (bitField0_ & ~0x00000008);
              hashesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHashesFieldBuilder() : null;
            } else {
              hashesBuilder_.addAllMessages(other.hashes_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                vendor_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                version_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                cyclonedx.v1_3.Bom13.Hash m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.Hash.parser(),
                        extensionRegistry);
                if (hashesBuilder_ == null) {
                  ensureHashesIsMutable();
                  hashes_.add(m);
                } else {
                  hashesBuilder_.addMessage(m);
                }
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object vendor_ = "";
      /**
       * <pre>
       * The vendor of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string vendor = 1;</code>
       * @return Whether the vendor field is set.
       */
      public boolean hasVendor() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The vendor of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string vendor = 1;</code>
       * @return The vendor.
       */
      public java.lang.String getVendor() {
        java.lang.Object ref = vendor_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          vendor_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The vendor of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string vendor = 1;</code>
       * @return The bytes for vendor.
       */
      public com.google.protobuf.ByteString
          getVendorBytes() {
        java.lang.Object ref = vendor_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vendor_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The vendor of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string vendor = 1;</code>
       * @param value The vendor to set.
       * @return This builder for chaining.
       */
      public Builder setVendor(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        vendor_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The vendor of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string vendor = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVendor() {
        vendor_ = getDefaultInstance().getVendor();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The vendor of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string vendor = 1;</code>
       * @param value The bytes for vendor to set.
       * @return This builder for chaining.
       */
      public Builder setVendorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        vendor_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The name of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return Whether the name field is set.
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The name of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object version_ = "";
      /**
       * <pre>
       * The version of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string version = 3;</code>
       * @return Whether the version field is set.
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The version of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string version = 3;</code>
       * @return The version.
       */
      public java.lang.String getVersion() {
        java.lang.Object ref = version_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          version_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The version of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string version = 3;</code>
       * @return The bytes for version.
       */
      public com.google.protobuf.ByteString
          getVersionBytes() {
        java.lang.Object ref = version_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          version_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The version of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string version = 3;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        version_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The version of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string version = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        version_ = getDefaultInstance().getVersion();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The version of the tool used to create the BOM.
       * </pre>
       *
       * <code>optional string version = 3;</code>
       * @param value The bytes for version to set.
       * @return This builder for chaining.
       */
      public Builder setVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        version_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.Hash> hashes_ =
        java.util.Collections.emptyList();
      private void ensureHashesIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          hashes_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.Hash>(hashes_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Hash, cyclonedx.v1_3.Bom13.Hash.Builder, cyclonedx.v1_3.Bom13.HashOrBuilder> hashesBuilder_;

      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Hash> getHashesList() {
        if (hashesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(hashes_);
        } else {
          return hashesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public int getHashesCount() {
        if (hashesBuilder_ == null) {
          return hashes_.size();
        } else {
          return hashesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.Hash getHashes(int index) {
        if (hashesBuilder_ == null) {
          return hashes_.get(index);
        } else {
          return hashesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder setHashes(
          int index, cyclonedx.v1_3.Bom13.Hash value) {
        if (hashesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHashesIsMutable();
          hashes_.set(index, value);
          onChanged();
        } else {
          hashesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder setHashes(
          int index, cyclonedx.v1_3.Bom13.Hash.Builder builderForValue) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          hashes_.set(index, builderForValue.build());
          onChanged();
        } else {
          hashesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder addHashes(cyclonedx.v1_3.Bom13.Hash value) {
        if (hashesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHashesIsMutable();
          hashes_.add(value);
          onChanged();
        } else {
          hashesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder addHashes(
          int index, cyclonedx.v1_3.Bom13.Hash value) {
        if (hashesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHashesIsMutable();
          hashes_.add(index, value);
          onChanged();
        } else {
          hashesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder addHashes(
          cyclonedx.v1_3.Bom13.Hash.Builder builderForValue) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          hashes_.add(builderForValue.build());
          onChanged();
        } else {
          hashesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder addHashes(
          int index, cyclonedx.v1_3.Bom13.Hash.Builder builderForValue) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          hashes_.add(index, builderForValue.build());
          onChanged();
        } else {
          hashesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder addAllHashes(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.Hash> values) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, hashes_);
          onChanged();
        } else {
          hashesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder clearHashes() {
        if (hashesBuilder_ == null) {
          hashes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          hashesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public Builder removeHashes(int index) {
        if (hashesBuilder_ == null) {
          ensureHashesIsMutable();
          hashes_.remove(index);
          onChanged();
        } else {
          hashesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.Hash.Builder getHashesBuilder(
          int index) {
        return getHashesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.HashOrBuilder getHashesOrBuilder(
          int index) {
        if (hashesBuilder_ == null) {
          return hashes_.get(index);  } else {
          return hashesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.HashOrBuilder> 
           getHashesOrBuilderList() {
        if (hashesBuilder_ != null) {
          return hashesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(hashes_);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.Hash.Builder addHashesBuilder() {
        return getHashesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.Hash.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public cyclonedx.v1_3.Bom13.Hash.Builder addHashesBuilder(
          int index) {
        return getHashesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.Hash.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.Hash hashes = 4;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.Hash.Builder> 
           getHashesBuilderList() {
        return getHashesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.Hash, cyclonedx.v1_3.Bom13.Hash.Builder, cyclonedx.v1_3.Bom13.HashOrBuilder> 
          getHashesFieldBuilder() {
        if (hashesBuilder_ == null) {
          hashesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.Hash, cyclonedx.v1_3.Bom13.Hash.Builder, cyclonedx.v1_3.Bom13.HashOrBuilder>(
                  hashes_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          hashes_ = null;
        }
        return hashesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Tool)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Tool)
    private static final cyclonedx.v1_3.Bom13.Tool DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Tool();
    }

    public static cyclonedx.v1_3.Bom13.Tool getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Tool>
        PARSER = new com.google.protobuf.AbstractParser<Tool>() {
      @java.lang.Override
      public Tool parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Tool> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Tool> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Tool getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PropertyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Property)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string name = 1;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional string value = 2;</code>
     * @return Whether the value field is set.
     */
    boolean hasValue();
    /**
     * <code>optional string value = 2;</code>
     * @return The value.
     */
    java.lang.String getValue();
    /**
     * <code>optional string value = 2;</code>
     * @return The bytes for value.
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * <pre>
   * Specifies a property
   * </pre>
   *
   * Protobuf type {@code cyclonedx.v1_3.Property}
   */
  public static final class Property extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Property)
      PropertyOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Property.class.getName());
    }
    // Use Property.newBuilder() to construct.
    private Property(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Property() {
      name_ = "";
      value_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Property_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Property_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Property.class, cyclonedx.v1_3.Bom13.Property.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <code>string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object value_ = "";
    /**
     * <code>optional string value = 2;</code>
     * @return Whether the value field is set.
     */
    @java.lang.Override
    public boolean hasValue() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional string value = 2;</code>
     * @return The value.
     */
    @java.lang.Override
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        value_ = s;
        return s;
      }
    }
    /**
     * <code>optional string value = 2;</code>
     * @return The bytes for value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Property)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Property other = (cyclonedx.v1_3.Bom13.Property) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (hasValue() != other.hasValue()) return false;
      if (hasValue()) {
        if (!getValue()
            .equals(other.getValue())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (hasValue()) {
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Property parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Property parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Property parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Property parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Property parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Property parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Property parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Property parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Property parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Property parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Property parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Property parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Property prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies a property
     * </pre>
     *
     * Protobuf type {@code cyclonedx.v1_3.Property}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Property)
        cyclonedx.v1_3.Bom13.PropertyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Property_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Property_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Property.class, cyclonedx.v1_3.Bom13.Property.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Property.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        name_ = "";
        value_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Property_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Property getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Property.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Property build() {
        cyclonedx.v1_3.Bom13.Property result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Property buildPartial() {
        cyclonedx.v1_3.Bom13.Property result = new cyclonedx.v1_3.Bom13.Property(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Property result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.name_ = name_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.value_ = value_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Property) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Property)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Property other) {
        if (other == cyclonedx.v1_3.Bom13.Property.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasValue()) {
          value_ = other.value_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                value_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object value_ = "";
      /**
       * <code>optional string value = 2;</code>
       * @return Whether the value field is set.
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional string value = 2;</code>
       * @return The value.
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string value = 2;</code>
       * @return The bytes for value.
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string value = 2;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        value_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional string value = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        value_ = getDefaultInstance().getValue();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>optional string value = 2;</code>
       * @param value The bytes for value to set.
       * @return This builder for chaining.
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        value_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Property)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Property)
    private static final cyclonedx.v1_3.Bom13.Property DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Property();
    }

    public static cyclonedx.v1_3.Bom13.Property getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Property>
        PARSER = new com.google.protobuf.AbstractParser<Property>() {
      @java.lang.Override
      public Property parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Property> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Property> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Property getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CompositionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Composition)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Indicates the aggregate completeness
     * </pre>
     *
     * <code>.cyclonedx.v1_3.Aggregate aggregate = 1;</code>
     * @return The enum numeric value on the wire for aggregate.
     */
    int getAggregateValue();
    /**
     * <pre>
     * Indicates the aggregate completeness
     * </pre>
     *
     * <code>.cyclonedx.v1_3.Aggregate aggregate = 1;</code>
     * @return The aggregate.
     */
    cyclonedx.v1_3.Bom13.Aggregate getAggregate();

    /**
     * <pre>
     * The assemblies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string assemblies = 2;</code>
     * @return A list containing the assemblies.
     */
    java.util.List<java.lang.String>
        getAssembliesList();
    /**
     * <pre>
     * The assemblies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string assemblies = 2;</code>
     * @return The count of assemblies.
     */
    int getAssembliesCount();
    /**
     * <pre>
     * The assemblies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string assemblies = 2;</code>
     * @param index The index of the element to return.
     * @return The assemblies at the given index.
     */
    java.lang.String getAssemblies(int index);
    /**
     * <pre>
     * The assemblies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string assemblies = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the assemblies at the given index.
     */
    com.google.protobuf.ByteString
        getAssembliesBytes(int index);

    /**
     * <pre>
     * The dependencies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string dependencies = 3;</code>
     * @return A list containing the dependencies.
     */
    java.util.List<java.lang.String>
        getDependenciesList();
    /**
     * <pre>
     * The dependencies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string dependencies = 3;</code>
     * @return The count of dependencies.
     */
    int getDependenciesCount();
    /**
     * <pre>
     * The dependencies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string dependencies = 3;</code>
     * @param index The index of the element to return.
     * @return The dependencies at the given index.
     */
    java.lang.String getDependencies(int index);
    /**
     * <pre>
     * The dependencies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string dependencies = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the dependencies at the given index.
     */
    com.google.protobuf.ByteString
        getDependenciesBytes(int index);
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.Composition}
   */
  public static final class Composition extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Composition)
      CompositionOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Composition.class.getName());
    }
    // Use Composition.newBuilder() to construct.
    private Composition(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Composition() {
      aggregate_ = 0;
      assemblies_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      dependencies_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Composition_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Composition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Composition.class, cyclonedx.v1_3.Bom13.Composition.Builder.class);
    }

    public static final int AGGREGATE_FIELD_NUMBER = 1;
    private int aggregate_ = 0;
    /**
     * <pre>
     * Indicates the aggregate completeness
     * </pre>
     *
     * <code>.cyclonedx.v1_3.Aggregate aggregate = 1;</code>
     * @return The enum numeric value on the wire for aggregate.
     */
    @java.lang.Override public int getAggregateValue() {
      return aggregate_;
    }
    /**
     * <pre>
     * Indicates the aggregate completeness
     * </pre>
     *
     * <code>.cyclonedx.v1_3.Aggregate aggregate = 1;</code>
     * @return The aggregate.
     */
    @java.lang.Override public cyclonedx.v1_3.Bom13.Aggregate getAggregate() {
      cyclonedx.v1_3.Bom13.Aggregate result = cyclonedx.v1_3.Bom13.Aggregate.forNumber(aggregate_);
      return result == null ? cyclonedx.v1_3.Bom13.Aggregate.UNRECOGNIZED : result;
    }

    public static final int ASSEMBLIES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList assemblies_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * The assemblies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string assemblies = 2;</code>
     * @return A list containing the assemblies.
     */
    public com.google.protobuf.ProtocolStringList
        getAssembliesList() {
      return assemblies_;
    }
    /**
     * <pre>
     * The assemblies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string assemblies = 2;</code>
     * @return The count of assemblies.
     */
    public int getAssembliesCount() {
      return assemblies_.size();
    }
    /**
     * <pre>
     * The assemblies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string assemblies = 2;</code>
     * @param index The index of the element to return.
     * @return The assemblies at the given index.
     */
    public java.lang.String getAssemblies(int index) {
      return assemblies_.get(index);
    }
    /**
     * <pre>
     * The assemblies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string assemblies = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the assemblies at the given index.
     */
    public com.google.protobuf.ByteString
        getAssembliesBytes(int index) {
      return assemblies_.getByteString(index);
    }

    public static final int DEPENDENCIES_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList dependencies_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * The dependencies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string dependencies = 3;</code>
     * @return A list containing the dependencies.
     */
    public com.google.protobuf.ProtocolStringList
        getDependenciesList() {
      return dependencies_;
    }
    /**
     * <pre>
     * The dependencies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string dependencies = 3;</code>
     * @return The count of dependencies.
     */
    public int getDependenciesCount() {
      return dependencies_.size();
    }
    /**
     * <pre>
     * The dependencies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string dependencies = 3;</code>
     * @param index The index of the element to return.
     * @return The dependencies at the given index.
     */
    public java.lang.String getDependencies(int index) {
      return dependencies_.get(index);
    }
    /**
     * <pre>
     * The dependencies the aggregate completeness applies to
     * </pre>
     *
     * <code>repeated string dependencies = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the dependencies at the given index.
     */
    public com.google.protobuf.ByteString
        getDependenciesBytes(int index) {
      return dependencies_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (aggregate_ != cyclonedx.v1_3.Bom13.Aggregate.AGGREGATE_NOT_SPECIFIED.getNumber()) {
        output.writeEnum(1, aggregate_);
      }
      for (int i = 0; i < assemblies_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, assemblies_.getRaw(i));
      }
      for (int i = 0; i < dependencies_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, dependencies_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (aggregate_ != cyclonedx.v1_3.Bom13.Aggregate.AGGREGATE_NOT_SPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, aggregate_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < assemblies_.size(); i++) {
          dataSize += computeStringSizeNoTag(assemblies_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getAssembliesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < dependencies_.size(); i++) {
          dataSize += computeStringSizeNoTag(dependencies_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getDependenciesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Composition)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Composition other = (cyclonedx.v1_3.Bom13.Composition) obj;

      if (aggregate_ != other.aggregate_) return false;
      if (!getAssembliesList()
          .equals(other.getAssembliesList())) return false;
      if (!getDependenciesList()
          .equals(other.getDependenciesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + AGGREGATE_FIELD_NUMBER;
      hash = (53 * hash) + aggregate_;
      if (getAssembliesCount() > 0) {
        hash = (37 * hash) + ASSEMBLIES_FIELD_NUMBER;
        hash = (53 * hash) + getAssembliesList().hashCode();
      }
      if (getDependenciesCount() > 0) {
        hash = (37 * hash) + DEPENDENCIES_FIELD_NUMBER;
        hash = (53 * hash) + getDependenciesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Composition parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Composition parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Composition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Composition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Composition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Composition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Composition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Composition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Composition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Composition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Composition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Composition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Composition prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.Composition}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Composition)
        cyclonedx.v1_3.Bom13.CompositionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Composition_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Composition_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Composition.class, cyclonedx.v1_3.Bom13.Composition.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Composition.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        aggregate_ = 0;
        assemblies_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        dependencies_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Composition_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Composition getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Composition.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Composition build() {
        cyclonedx.v1_3.Bom13.Composition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Composition buildPartial() {
        cyclonedx.v1_3.Bom13.Composition result = new cyclonedx.v1_3.Bom13.Composition(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Composition result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.aggregate_ = aggregate_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          assemblies_.makeImmutable();
          result.assemblies_ = assemblies_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          dependencies_.makeImmutable();
          result.dependencies_ = dependencies_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Composition) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Composition)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Composition other) {
        if (other == cyclonedx.v1_3.Bom13.Composition.getDefaultInstance()) return this;
        if (other.aggregate_ != 0) {
          setAggregateValue(other.getAggregateValue());
        }
        if (!other.assemblies_.isEmpty()) {
          if (assemblies_.isEmpty()) {
            assemblies_ = other.assemblies_;
            bitField0_ |= 0x00000002;
          } else {
            ensureAssembliesIsMutable();
            assemblies_.addAll(other.assemblies_);
          }
          onChanged();
        }
        if (!other.dependencies_.isEmpty()) {
          if (dependencies_.isEmpty()) {
            dependencies_ = other.dependencies_;
            bitField0_ |= 0x00000004;
          } else {
            ensureDependenciesIsMutable();
            dependencies_.addAll(other.dependencies_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                aggregate_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureAssembliesIsMutable();
                assemblies_.add(s);
                break;
              } // case 18
              case 26: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureDependenciesIsMutable();
                dependencies_.add(s);
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int aggregate_ = 0;
      /**
       * <pre>
       * Indicates the aggregate completeness
       * </pre>
       *
       * <code>.cyclonedx.v1_3.Aggregate aggregate = 1;</code>
       * @return The enum numeric value on the wire for aggregate.
       */
      @java.lang.Override public int getAggregateValue() {
        return aggregate_;
      }
      /**
       * <pre>
       * Indicates the aggregate completeness
       * </pre>
       *
       * <code>.cyclonedx.v1_3.Aggregate aggregate = 1;</code>
       * @param value The enum numeric value on the wire for aggregate to set.
       * @return This builder for chaining.
       */
      public Builder setAggregateValue(int value) {
        aggregate_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indicates the aggregate completeness
       * </pre>
       *
       * <code>.cyclonedx.v1_3.Aggregate aggregate = 1;</code>
       * @return The aggregate.
       */
      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Aggregate getAggregate() {
        cyclonedx.v1_3.Bom13.Aggregate result = cyclonedx.v1_3.Bom13.Aggregate.forNumber(aggregate_);
        return result == null ? cyclonedx.v1_3.Bom13.Aggregate.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Indicates the aggregate completeness
       * </pre>
       *
       * <code>.cyclonedx.v1_3.Aggregate aggregate = 1;</code>
       * @param value The aggregate to set.
       * @return This builder for chaining.
       */
      public Builder setAggregate(cyclonedx.v1_3.Bom13.Aggregate value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        aggregate_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indicates the aggregate completeness
       * </pre>
       *
       * <code>.cyclonedx.v1_3.Aggregate aggregate = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAggregate() {
        bitField0_ = (bitField0_ & ~0x00000001);
        aggregate_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList assemblies_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureAssembliesIsMutable() {
        if (!assemblies_.isModifiable()) {
          assemblies_ = new com.google.protobuf.LazyStringArrayList(assemblies_);
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <pre>
       * The assemblies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string assemblies = 2;</code>
       * @return A list containing the assemblies.
       */
      public com.google.protobuf.ProtocolStringList
          getAssembliesList() {
        assemblies_.makeImmutable();
        return assemblies_;
      }
      /**
       * <pre>
       * The assemblies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string assemblies = 2;</code>
       * @return The count of assemblies.
       */
      public int getAssembliesCount() {
        return assemblies_.size();
      }
      /**
       * <pre>
       * The assemblies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string assemblies = 2;</code>
       * @param index The index of the element to return.
       * @return The assemblies at the given index.
       */
      public java.lang.String getAssemblies(int index) {
        return assemblies_.get(index);
      }
      /**
       * <pre>
       * The assemblies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string assemblies = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the assemblies at the given index.
       */
      public com.google.protobuf.ByteString
          getAssembliesBytes(int index) {
        return assemblies_.getByteString(index);
      }
      /**
       * <pre>
       * The assemblies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string assemblies = 2;</code>
       * @param index The index to set the value at.
       * @param value The assemblies to set.
       * @return This builder for chaining.
       */
      public Builder setAssemblies(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureAssembliesIsMutable();
        assemblies_.set(index, value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The assemblies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string assemblies = 2;</code>
       * @param value The assemblies to add.
       * @return This builder for chaining.
       */
      public Builder addAssemblies(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureAssembliesIsMutable();
        assemblies_.add(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The assemblies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string assemblies = 2;</code>
       * @param values The assemblies to add.
       * @return This builder for chaining.
       */
      public Builder addAllAssemblies(
          java.lang.Iterable<java.lang.String> values) {
        ensureAssembliesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, assemblies_);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The assemblies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string assemblies = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAssemblies() {
        assemblies_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The assemblies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string assemblies = 2;</code>
       * @param value The bytes of the assemblies to add.
       * @return This builder for chaining.
       */
      public Builder addAssembliesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureAssembliesIsMutable();
        assemblies_.add(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList dependencies_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureDependenciesIsMutable() {
        if (!dependencies_.isModifiable()) {
          dependencies_ = new com.google.protobuf.LazyStringArrayList(dependencies_);
        }
        bitField0_ |= 0x00000004;
      }
      /**
       * <pre>
       * The dependencies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string dependencies = 3;</code>
       * @return A list containing the dependencies.
       */
      public com.google.protobuf.ProtocolStringList
          getDependenciesList() {
        dependencies_.makeImmutable();
        return dependencies_;
      }
      /**
       * <pre>
       * The dependencies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string dependencies = 3;</code>
       * @return The count of dependencies.
       */
      public int getDependenciesCount() {
        return dependencies_.size();
      }
      /**
       * <pre>
       * The dependencies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string dependencies = 3;</code>
       * @param index The index of the element to return.
       * @return The dependencies at the given index.
       */
      public java.lang.String getDependencies(int index) {
        return dependencies_.get(index);
      }
      /**
       * <pre>
       * The dependencies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string dependencies = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the dependencies at the given index.
       */
      public com.google.protobuf.ByteString
          getDependenciesBytes(int index) {
        return dependencies_.getByteString(index);
      }
      /**
       * <pre>
       * The dependencies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string dependencies = 3;</code>
       * @param index The index to set the value at.
       * @param value The dependencies to set.
       * @return This builder for chaining.
       */
      public Builder setDependencies(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureDependenciesIsMutable();
        dependencies_.set(index, value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The dependencies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string dependencies = 3;</code>
       * @param value The dependencies to add.
       * @return This builder for chaining.
       */
      public Builder addDependencies(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureDependenciesIsMutable();
        dependencies_.add(value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The dependencies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string dependencies = 3;</code>
       * @param values The dependencies to add.
       * @return This builder for chaining.
       */
      public Builder addAllDependencies(
          java.lang.Iterable<java.lang.String> values) {
        ensureDependenciesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dependencies_);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The dependencies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string dependencies = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDependencies() {
        dependencies_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The dependencies the aggregate completeness applies to
       * </pre>
       *
       * <code>repeated string dependencies = 3;</code>
       * @param value The bytes of the dependencies to add.
       * @return This builder for chaining.
       */
      public Builder addDependenciesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureDependenciesIsMutable();
        dependencies_.add(value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Composition)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Composition)
    private static final cyclonedx.v1_3.Bom13.Composition DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Composition();
    }

    public static cyclonedx.v1_3.Bom13.Composition getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Composition>
        PARSER = new com.google.protobuf.AbstractParser<Composition>() {
      @java.lang.Override
      public Composition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Composition> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Composition> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Composition getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EvidenceCopyrightOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.EvidenceCopyright)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Copyright text
     * </pre>
     *
     * <code>string text = 1;</code>
     * @return The text.
     */
    java.lang.String getText();
    /**
     * <pre>
     * Copyright text
     * </pre>
     *
     * <code>string text = 1;</code>
     * @return The bytes for text.
     */
    com.google.protobuf.ByteString
        getTextBytes();
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.EvidenceCopyright}
   */
  public static final class EvidenceCopyright extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.EvidenceCopyright)
      EvidenceCopyrightOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        EvidenceCopyright.class.getName());
    }
    // Use EvidenceCopyright.newBuilder() to construct.
    private EvidenceCopyright(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private EvidenceCopyright() {
      text_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_EvidenceCopyright_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_EvidenceCopyright_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.EvidenceCopyright.class, cyclonedx.v1_3.Bom13.EvidenceCopyright.Builder.class);
    }

    public static final int TEXT_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object text_ = "";
    /**
     * <pre>
     * Copyright text
     * </pre>
     *
     * <code>string text = 1;</code>
     * @return The text.
     */
    @java.lang.Override
    public java.lang.String getText() {
      java.lang.Object ref = text_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        text_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Copyright text
     * </pre>
     *
     * <code>string text = 1;</code>
     * @return The bytes for text.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTextBytes() {
      java.lang.Object ref = text_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        text_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(text_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, text_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(text_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, text_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.EvidenceCopyright)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.EvidenceCopyright other = (cyclonedx.v1_3.Bom13.EvidenceCopyright) obj;

      if (!getText()
          .equals(other.getText())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TEXT_FIELD_NUMBER;
      hash = (53 * hash) + getText().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.EvidenceCopyright parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.EvidenceCopyright parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.EvidenceCopyright parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.EvidenceCopyright parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.EvidenceCopyright parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.EvidenceCopyright parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.EvidenceCopyright parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.EvidenceCopyright parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.EvidenceCopyright parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.EvidenceCopyright parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.EvidenceCopyright parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.EvidenceCopyright parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.EvidenceCopyright prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.EvidenceCopyright}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.EvidenceCopyright)
        cyclonedx.v1_3.Bom13.EvidenceCopyrightOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_EvidenceCopyright_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_EvidenceCopyright_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.EvidenceCopyright.class, cyclonedx.v1_3.Bom13.EvidenceCopyright.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.EvidenceCopyright.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        text_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_EvidenceCopyright_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.EvidenceCopyright getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.EvidenceCopyright.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.EvidenceCopyright build() {
        cyclonedx.v1_3.Bom13.EvidenceCopyright result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.EvidenceCopyright buildPartial() {
        cyclonedx.v1_3.Bom13.EvidenceCopyright result = new cyclonedx.v1_3.Bom13.EvidenceCopyright(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.EvidenceCopyright result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.text_ = text_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.EvidenceCopyright) {
          return mergeFrom((cyclonedx.v1_3.Bom13.EvidenceCopyright)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.EvidenceCopyright other) {
        if (other == cyclonedx.v1_3.Bom13.EvidenceCopyright.getDefaultInstance()) return this;
        if (!other.getText().isEmpty()) {
          text_ = other.text_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                text_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object text_ = "";
      /**
       * <pre>
       * Copyright text
       * </pre>
       *
       * <code>string text = 1;</code>
       * @return The text.
       */
      public java.lang.String getText() {
        java.lang.Object ref = text_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          text_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Copyright text
       * </pre>
       *
       * <code>string text = 1;</code>
       * @return The bytes for text.
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        java.lang.Object ref = text_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          text_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Copyright text
       * </pre>
       *
       * <code>string text = 1;</code>
       * @param value The text to set.
       * @return This builder for chaining.
       */
      public Builder setText(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        text_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Copyright text
       * </pre>
       *
       * <code>string text = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearText() {
        text_ = getDefaultInstance().getText();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Copyright text
       * </pre>
       *
       * <code>string text = 1;</code>
       * @param value The bytes for text to set.
       * @return This builder for chaining.
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        text_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.EvidenceCopyright)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.EvidenceCopyright)
    private static final cyclonedx.v1_3.Bom13.EvidenceCopyright DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.EvidenceCopyright();
    }

    public static cyclonedx.v1_3.Bom13.EvidenceCopyright getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EvidenceCopyright>
        PARSER = new com.google.protobuf.AbstractParser<EvidenceCopyright>() {
      @java.lang.Override
      public EvidenceCopyright parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<EvidenceCopyright> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EvidenceCopyright> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.EvidenceCopyright getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EvidenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.v1_3.Evidence)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> 
        getLicensesList();
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
     */
    cyclonedx.v1_3.Bom13.LicenseChoice getLicenses(int index);
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
     */
    int getLicensesCount();
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> 
        getLicensesOrBuilderList();
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
     */
    cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder getLicensesOrBuilder(
        int index);

    /**
     * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
     */
    java.util.List<cyclonedx.v1_3.Bom13.EvidenceCopyright> 
        getCopyrightList();
    /**
     * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
     */
    cyclonedx.v1_3.Bom13.EvidenceCopyright getCopyright(int index);
    /**
     * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
     */
    int getCopyrightCount();
    /**
     * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
     */
    java.util.List<? extends cyclonedx.v1_3.Bom13.EvidenceCopyrightOrBuilder> 
        getCopyrightOrBuilderList();
    /**
     * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
     */
    cyclonedx.v1_3.Bom13.EvidenceCopyrightOrBuilder getCopyrightOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code cyclonedx.v1_3.Evidence}
   */
  public static final class Evidence extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.v1_3.Evidence)
      EvidenceOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Evidence.class.getName());
    }
    // Use Evidence.newBuilder() to construct.
    private Evidence(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Evidence() {
      licenses_ = java.util.Collections.emptyList();
      copyright_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Evidence_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Evidence_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.v1_3.Bom13.Evidence.class, cyclonedx.v1_3.Bom13.Evidence.Builder.class);
    }

    public static final int LICENSES_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> licenses_;
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> getLicensesList() {
      return licenses_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> 
        getLicensesOrBuilderList() {
      return licenses_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
     */
    @java.lang.Override
    public int getLicensesCount() {
      return licenses_.size();
    }
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.LicenseChoice getLicenses(int index) {
      return licenses_.get(index);
    }
    /**
     * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder getLicensesOrBuilder(
        int index) {
      return licenses_.get(index);
    }

    public static final int COPYRIGHT_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.v1_3.Bom13.EvidenceCopyright> copyright_;
    /**
     * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.v1_3.Bom13.EvidenceCopyright> getCopyrightList() {
      return copyright_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.v1_3.Bom13.EvidenceCopyrightOrBuilder> 
        getCopyrightOrBuilderList() {
      return copyright_;
    }
    /**
     * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
     */
    @java.lang.Override
    public int getCopyrightCount() {
      return copyright_.size();
    }
    /**
     * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.EvidenceCopyright getCopyright(int index) {
      return copyright_.get(index);
    }
    /**
     * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
     */
    @java.lang.Override
    public cyclonedx.v1_3.Bom13.EvidenceCopyrightOrBuilder getCopyrightOrBuilder(
        int index) {
      return copyright_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < licenses_.size(); i++) {
        output.writeMessage(1, licenses_.get(i));
      }
      for (int i = 0; i < copyright_.size(); i++) {
        output.writeMessage(2, copyright_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < licenses_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, licenses_.get(i));
      }
      for (int i = 0; i < copyright_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, copyright_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.v1_3.Bom13.Evidence)) {
        return super.equals(obj);
      }
      cyclonedx.v1_3.Bom13.Evidence other = (cyclonedx.v1_3.Bom13.Evidence) obj;

      if (!getLicensesList()
          .equals(other.getLicensesList())) return false;
      if (!getCopyrightList()
          .equals(other.getCopyrightList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getLicensesCount() > 0) {
        hash = (37 * hash) + LICENSES_FIELD_NUMBER;
        hash = (53 * hash) + getLicensesList().hashCode();
      }
      if (getCopyrightCount() > 0) {
        hash = (37 * hash) + COPYRIGHT_FIELD_NUMBER;
        hash = (53 * hash) + getCopyrightList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.v1_3.Bom13.Evidence parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Evidence parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Evidence parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Evidence parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Evidence parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.v1_3.Bom13.Evidence parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Evidence parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Evidence parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.v1_3.Bom13.Evidence parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.v1_3.Bom13.Evidence parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.v1_3.Bom13.Evidence parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.v1_3.Bom13.Evidence parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.v1_3.Bom13.Evidence prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cyclonedx.v1_3.Evidence}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.v1_3.Evidence)
        cyclonedx.v1_3.Bom13.EvidenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Evidence_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Evidence_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.v1_3.Bom13.Evidence.class, cyclonedx.v1_3.Bom13.Evidence.Builder.class);
      }

      // Construct using cyclonedx.v1_3.Bom13.Evidence.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (licensesBuilder_ == null) {
          licenses_ = java.util.Collections.emptyList();
        } else {
          licenses_ = null;
          licensesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (copyrightBuilder_ == null) {
          copyright_ = java.util.Collections.emptyList();
        } else {
          copyright_ = null;
          copyrightBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.v1_3.Bom13.internal_static_cyclonedx_v1_3_Evidence_descriptor;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Evidence getDefaultInstanceForType() {
        return cyclonedx.v1_3.Bom13.Evidence.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Evidence build() {
        cyclonedx.v1_3.Bom13.Evidence result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.v1_3.Bom13.Evidence buildPartial() {
        cyclonedx.v1_3.Bom13.Evidence result = new cyclonedx.v1_3.Bom13.Evidence(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(cyclonedx.v1_3.Bom13.Evidence result) {
        if (licensesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            licenses_ = java.util.Collections.unmodifiableList(licenses_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.licenses_ = licenses_;
        } else {
          result.licenses_ = licensesBuilder_.build();
        }
        if (copyrightBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            copyright_ = java.util.Collections.unmodifiableList(copyright_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.copyright_ = copyright_;
        } else {
          result.copyright_ = copyrightBuilder_.build();
        }
      }

      private void buildPartial0(cyclonedx.v1_3.Bom13.Evidence result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.v1_3.Bom13.Evidence) {
          return mergeFrom((cyclonedx.v1_3.Bom13.Evidence)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.v1_3.Bom13.Evidence other) {
        if (other == cyclonedx.v1_3.Bom13.Evidence.getDefaultInstance()) return this;
        if (licensesBuilder_ == null) {
          if (!other.licenses_.isEmpty()) {
            if (licenses_.isEmpty()) {
              licenses_ = other.licenses_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureLicensesIsMutable();
              licenses_.addAll(other.licenses_);
            }
            onChanged();
          }
        } else {
          if (!other.licenses_.isEmpty()) {
            if (licensesBuilder_.isEmpty()) {
              licensesBuilder_.dispose();
              licensesBuilder_ = null;
              licenses_ = other.licenses_;
              bitField0_ = (bitField0_ & ~0x00000001);
              licensesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLicensesFieldBuilder() : null;
            } else {
              licensesBuilder_.addAllMessages(other.licenses_);
            }
          }
        }
        if (copyrightBuilder_ == null) {
          if (!other.copyright_.isEmpty()) {
            if (copyright_.isEmpty()) {
              copyright_ = other.copyright_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCopyrightIsMutable();
              copyright_.addAll(other.copyright_);
            }
            onChanged();
          }
        } else {
          if (!other.copyright_.isEmpty()) {
            if (copyrightBuilder_.isEmpty()) {
              copyrightBuilder_.dispose();
              copyrightBuilder_ = null;
              copyright_ = other.copyright_;
              bitField0_ = (bitField0_ & ~0x00000002);
              copyrightBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCopyrightFieldBuilder() : null;
            } else {
              copyrightBuilder_.addAllMessages(other.copyright_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                cyclonedx.v1_3.Bom13.LicenseChoice m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.LicenseChoice.parser(),
                        extensionRegistry);
                if (licensesBuilder_ == null) {
                  ensureLicensesIsMutable();
                  licenses_.add(m);
                } else {
                  licensesBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                cyclonedx.v1_3.Bom13.EvidenceCopyright m =
                    input.readMessage(
                        cyclonedx.v1_3.Bom13.EvidenceCopyright.parser(),
                        extensionRegistry);
                if (copyrightBuilder_ == null) {
                  ensureCopyrightIsMutable();
                  copyright_.add(m);
                } else {
                  copyrightBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> licenses_ =
        java.util.Collections.emptyList();
      private void ensureLicensesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          licenses_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.LicenseChoice>(licenses_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.LicenseChoice, cyclonedx.v1_3.Bom13.LicenseChoice.Builder, cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> licensesBuilder_;

      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice> getLicensesList() {
        if (licensesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(licenses_);
        } else {
          return licensesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public int getLicensesCount() {
        if (licensesBuilder_ == null) {
          return licenses_.size();
        } else {
          return licensesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoice getLicenses(int index) {
        if (licensesBuilder_ == null) {
          return licenses_.get(index);
        } else {
          return licensesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public Builder setLicenses(
          int index, cyclonedx.v1_3.Bom13.LicenseChoice value) {
        if (licensesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLicensesIsMutable();
          licenses_.set(index, value);
          onChanged();
        } else {
          licensesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public Builder setLicenses(
          int index, cyclonedx.v1_3.Bom13.LicenseChoice.Builder builderForValue) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          licenses_.set(index, builderForValue.build());
          onChanged();
        } else {
          licensesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public Builder addLicenses(cyclonedx.v1_3.Bom13.LicenseChoice value) {
        if (licensesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLicensesIsMutable();
          licenses_.add(value);
          onChanged();
        } else {
          licensesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public Builder addLicenses(
          int index, cyclonedx.v1_3.Bom13.LicenseChoice value) {
        if (licensesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLicensesIsMutable();
          licenses_.add(index, value);
          onChanged();
        } else {
          licensesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public Builder addLicenses(
          cyclonedx.v1_3.Bom13.LicenseChoice.Builder builderForValue) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          licenses_.add(builderForValue.build());
          onChanged();
        } else {
          licensesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public Builder addLicenses(
          int index, cyclonedx.v1_3.Bom13.LicenseChoice.Builder builderForValue) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          licenses_.add(index, builderForValue.build());
          onChanged();
        } else {
          licensesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public Builder addAllLicenses(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.LicenseChoice> values) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, licenses_);
          onChanged();
        } else {
          licensesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public Builder clearLicenses() {
        if (licensesBuilder_ == null) {
          licenses_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          licensesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public Builder removeLicenses(int index) {
        if (licensesBuilder_ == null) {
          ensureLicensesIsMutable();
          licenses_.remove(index);
          onChanged();
        } else {
          licensesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoice.Builder getLicensesBuilder(
          int index) {
        return getLicensesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder getLicensesOrBuilder(
          int index) {
        if (licensesBuilder_ == null) {
          return licenses_.get(index);  } else {
          return licensesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> 
           getLicensesOrBuilderList() {
        if (licensesBuilder_ != null) {
          return licensesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(licenses_);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoice.Builder addLicensesBuilder() {
        return getLicensesFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.LicenseChoice.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public cyclonedx.v1_3.Bom13.LicenseChoice.Builder addLicensesBuilder(
          int index) {
        return getLicensesFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.LicenseChoice.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.LicenseChoice licenses = 1;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.LicenseChoice.Builder> 
           getLicensesBuilderList() {
        return getLicensesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.LicenseChoice, cyclonedx.v1_3.Bom13.LicenseChoice.Builder, cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder> 
          getLicensesFieldBuilder() {
        if (licensesBuilder_ == null) {
          licensesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.LicenseChoice, cyclonedx.v1_3.Bom13.LicenseChoice.Builder, cyclonedx.v1_3.Bom13.LicenseChoiceOrBuilder>(
                  licenses_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          licenses_ = null;
        }
        return licensesBuilder_;
      }

      private java.util.List<cyclonedx.v1_3.Bom13.EvidenceCopyright> copyright_ =
        java.util.Collections.emptyList();
      private void ensureCopyrightIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          copyright_ = new java.util.ArrayList<cyclonedx.v1_3.Bom13.EvidenceCopyright>(copyright_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.EvidenceCopyright, cyclonedx.v1_3.Bom13.EvidenceCopyright.Builder, cyclonedx.v1_3.Bom13.EvidenceCopyrightOrBuilder> copyrightBuilder_;

      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.EvidenceCopyright> getCopyrightList() {
        if (copyrightBuilder_ == null) {
          return java.util.Collections.unmodifiableList(copyright_);
        } else {
          return copyrightBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public int getCopyrightCount() {
        if (copyrightBuilder_ == null) {
          return copyright_.size();
        } else {
          return copyrightBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.EvidenceCopyright getCopyright(int index) {
        if (copyrightBuilder_ == null) {
          return copyright_.get(index);
        } else {
          return copyrightBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public Builder setCopyright(
          int index, cyclonedx.v1_3.Bom13.EvidenceCopyright value) {
        if (copyrightBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCopyrightIsMutable();
          copyright_.set(index, value);
          onChanged();
        } else {
          copyrightBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public Builder setCopyright(
          int index, cyclonedx.v1_3.Bom13.EvidenceCopyright.Builder builderForValue) {
        if (copyrightBuilder_ == null) {
          ensureCopyrightIsMutable();
          copyright_.set(index, builderForValue.build());
          onChanged();
        } else {
          copyrightBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public Builder addCopyright(cyclonedx.v1_3.Bom13.EvidenceCopyright value) {
        if (copyrightBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCopyrightIsMutable();
          copyright_.add(value);
          onChanged();
        } else {
          copyrightBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public Builder addCopyright(
          int index, cyclonedx.v1_3.Bom13.EvidenceCopyright value) {
        if (copyrightBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCopyrightIsMutable();
          copyright_.add(index, value);
          onChanged();
        } else {
          copyrightBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public Builder addCopyright(
          cyclonedx.v1_3.Bom13.EvidenceCopyright.Builder builderForValue) {
        if (copyrightBuilder_ == null) {
          ensureCopyrightIsMutable();
          copyright_.add(builderForValue.build());
          onChanged();
        } else {
          copyrightBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public Builder addCopyright(
          int index, cyclonedx.v1_3.Bom13.EvidenceCopyright.Builder builderForValue) {
        if (copyrightBuilder_ == null) {
          ensureCopyrightIsMutable();
          copyright_.add(index, builderForValue.build());
          onChanged();
        } else {
          copyrightBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public Builder addAllCopyright(
          java.lang.Iterable<? extends cyclonedx.v1_3.Bom13.EvidenceCopyright> values) {
        if (copyrightBuilder_ == null) {
          ensureCopyrightIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, copyright_);
          onChanged();
        } else {
          copyrightBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public Builder clearCopyright() {
        if (copyrightBuilder_ == null) {
          copyright_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          copyrightBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public Builder removeCopyright(int index) {
        if (copyrightBuilder_ == null) {
          ensureCopyrightIsMutable();
          copyright_.remove(index);
          onChanged();
        } else {
          copyrightBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.EvidenceCopyright.Builder getCopyrightBuilder(
          int index) {
        return getCopyrightFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.EvidenceCopyrightOrBuilder getCopyrightOrBuilder(
          int index) {
        if (copyrightBuilder_ == null) {
          return copyright_.get(index);  } else {
          return copyrightBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public java.util.List<? extends cyclonedx.v1_3.Bom13.EvidenceCopyrightOrBuilder> 
           getCopyrightOrBuilderList() {
        if (copyrightBuilder_ != null) {
          return copyrightBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(copyright_);
        }
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.EvidenceCopyright.Builder addCopyrightBuilder() {
        return getCopyrightFieldBuilder().addBuilder(
            cyclonedx.v1_3.Bom13.EvidenceCopyright.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public cyclonedx.v1_3.Bom13.EvidenceCopyright.Builder addCopyrightBuilder(
          int index) {
        return getCopyrightFieldBuilder().addBuilder(
            index, cyclonedx.v1_3.Bom13.EvidenceCopyright.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.v1_3.EvidenceCopyright copyright = 2;</code>
       */
      public java.util.List<cyclonedx.v1_3.Bom13.EvidenceCopyright.Builder> 
           getCopyrightBuilderList() {
        return getCopyrightFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.v1_3.Bom13.EvidenceCopyright, cyclonedx.v1_3.Bom13.EvidenceCopyright.Builder, cyclonedx.v1_3.Bom13.EvidenceCopyrightOrBuilder> 
          getCopyrightFieldBuilder() {
        if (copyrightBuilder_ == null) {
          copyrightBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.v1_3.Bom13.EvidenceCopyright, cyclonedx.v1_3.Bom13.EvidenceCopyright.Builder, cyclonedx.v1_3.Bom13.EvidenceCopyrightOrBuilder>(
                  copyright_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          copyright_ = null;
        }
        return copyrightBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.v1_3.Evidence)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.v1_3.Evidence)
    private static final cyclonedx.v1_3.Bom13.Evidence DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.v1_3.Bom13.Evidence();
    }

    public static cyclonedx.v1_3.Bom13.Evidence getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Evidence>
        PARSER = new com.google.protobuf.AbstractParser<Evidence>() {
      @java.lang.Override
      public Evidence parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Evidence> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Evidence> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.v1_3.Bom13.Evidence getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_AttachedText_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_AttachedText_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Bom_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Bom_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Commit_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Commit_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Component_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Component_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_DataClassification_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_DataClassification_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Dependency_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Dependency_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Diff_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Diff_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_ExternalReference_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_ExternalReference_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Hash_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Hash_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_IdentifiableAction_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_IdentifiableAction_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Issue_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Issue_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Source_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Source_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_LicenseChoice_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_LicenseChoice_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_License_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_License_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Metadata_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Metadata_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_OrganizationalContact_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_OrganizationalContact_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_OrganizationalEntity_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_OrganizationalEntity_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Patch_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Patch_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Pedigree_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Pedigree_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Service_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Service_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Swid_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Swid_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Tool_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Tool_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Property_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Property_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Composition_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Composition_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_EvidenceCopyright_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_EvidenceCopyright_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_v1_3_Evidence_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_v1_3_Evidence_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rbom-1.3.proto\022\016cyclonedx.v1_3\032\037google/" +
      "protobuf/timestamp.proto\"m\n\014AttachedText" +
      "\022\031\n\014content_type\030\001 \001(\tH\000\210\001\001\022\025\n\010encoding\030" +
      "\002 \001(\tH\001\210\001\001\022\r\n\005value\030\003 \001(\tB\017\n\r_content_ty" +
      "peB\013\n\t_encoding\"\250\003\n\003Bom\022\024\n\014spec_version\030" +
      "\001 \001(\t\022\024\n\007version\030\002 \001(\005H\000\210\001\001\022\032\n\rserial_nu" +
      "mber\030\003 \001(\tH\001\210\001\001\022/\n\010metadata\030\004 \001(\0132\030.cycl" +
      "onedx.v1_3.MetadataH\002\210\001\001\022-\n\ncomponents\030\005" +
      " \003(\0132\031.cyclonedx.v1_3.Component\022)\n\010servi" +
      "ces\030\006 \003(\0132\027.cyclonedx.v1_3.Service\022>\n\023ex" +
      "ternal_references\030\007 \003(\0132!.cyclonedx.v1_3" +
      ".ExternalReference\0220\n\014dependencies\030\010 \003(\013" +
      "2\032.cyclonedx.v1_3.Dependency\0221\n\014composit" +
      "ions\030\t \003(\0132\033.cyclonedx.v1_3.CompositionB" +
      "\n\n\010_versionB\020\n\016_serial_numberB\013\n\t_metada" +
      "ta\"\354\001\n\006Commit\022\020\n\003uid\030\001 \001(\tH\000\210\001\001\022\020\n\003url\030\002" +
      " \001(\tH\001\210\001\001\0227\n\006author\030\003 \001(\0132\".cyclonedx.v1" +
      "_3.IdentifiableActionH\002\210\001\001\022:\n\tcommitter\030" +
      "\004 \001(\0132\".cyclonedx.v1_3.IdentifiableActio" +
      "nH\003\210\001\001\022\024\n\007message\030\005 \001(\tH\004\210\001\001B\006\n\004_uidB\006\n\004" +
      "_urlB\t\n\007_authorB\014\n\n_committerB\n\n\010_messag" +
      "e\"\275\007\n\tComponent\022,\n\004type\030\001 \001(\0162\036.cycloned" +
      "x.v1_3.Classification\022\026\n\tmime_type\030\002 \001(\t" +
      "H\000\210\001\001\022\024\n\007bom_ref\030\003 \001(\tH\001\210\001\001\022;\n\010supplier\030" +
      "\004 \001(\0132$.cyclonedx.v1_3.OrganizationalEnt" +
      "ityH\002\210\001\001\022\023\n\006author\030\005 \001(\tH\003\210\001\001\022\026\n\tpublish" +
      "er\030\006 \001(\tH\004\210\001\001\022\022\n\005group\030\007 \001(\tH\005\210\001\001\022\014\n\004nam" +
      "e\030\010 \001(\t\022\017\n\007version\030\t \001(\t\022\030\n\013description\030" +
      "\n \001(\tH\006\210\001\001\022)\n\005scope\030\013 \001(\0162\025.cyclonedx.v1" +
      "_3.ScopeH\007\210\001\001\022$\n\006hashes\030\014 \003(\0132\024.cycloned" +
      "x.v1_3.Hash\022/\n\010licenses\030\r \003(\0132\035.cycloned" +
      "x.v1_3.LicenseChoice\022\026\n\tcopyright\030\016 \001(\tH" +
      "\010\210\001\001\022\020\n\003cpe\030\017 \001(\tH\t\210\001\001\022\021\n\004purl\030\020 \001(\tH\n\210\001" +
      "\001\022\'\n\004swid\030\021 \001(\0132\024.cyclonedx.v1_3.SwidH\013\210" +
      "\001\001\022\025\n\010modified\030\022 \001(\010H\014\210\001\001\022/\n\010pedigree\030\023 " +
      "\001(\0132\030.cyclonedx.v1_3.PedigreeH\r\210\001\001\022>\n\023ex" +
      "ternal_references\030\024 \003(\0132!.cyclonedx.v1_3" +
      ".ExternalReference\022-\n\ncomponents\030\025 \003(\0132\031" +
      ".cyclonedx.v1_3.Component\022,\n\nproperties\030" +
      "\026 \003(\0132\030.cyclonedx.v1_3.Property\022*\n\010evide" +
      "nce\030\027 \003(\0132\030.cyclonedx.v1_3.EvidenceB\014\n\n_" +
      "mime_typeB\n\n\010_bom_refB\013\n\t_supplierB\t\n\007_a" +
      "uthorB\014\n\n_publisherB\010\n\006_groupB\016\n\014_descri" +
      "ptionB\010\n\006_scopeB\014\n\n_copyrightB\006\n\004_cpeB\007\n" +
      "\005_purlB\007\n\005_swidB\013\n\t_modifiedB\013\n\t_pedigre" +
      "e\"K\n\022DataClassification\022&\n\004flow\030\001 \001(\0162\030." +
      "cyclonedx.v1_3.DataFlow\022\r\n\005value\030\002 \001(\t\"K" +
      "\n\nDependency\022\013\n\003ref\030\001 \001(\t\0220\n\014dependencie" +
      "s\030\002 \003(\0132\032.cyclonedx.v1_3.Dependency\"Z\n\004D" +
      "iff\022/\n\004text\030\001 \001(\0132\034.cyclonedx.v1_3.Attac" +
      "hedTextH\000\210\001\001\022\020\n\003url\030\002 \001(\tH\001\210\001\001B\007\n\005_textB" +
      "\006\n\004_url\"\235\001\n\021ExternalReference\0223\n\004type\030\001 " +
      "\001(\0162%.cyclonedx.v1_3.ExternalReferenceTy" +
      "pe\022\013\n\003url\030\002 \001(\t\022\024\n\007comment\030\003 \001(\tH\000\210\001\001\022$\n" +
      "\006hashes\030\004 \003(\0132\024.cyclonedx.v1_3.HashB\n\n\010_" +
      "comment\";\n\004Hash\022$\n\003alg\030\001 \001(\0162\027.cyclonedx" +
      ".v1_3.HashAlg\022\r\n\005value\030\002 \001(\t\"\220\001\n\022Identif" +
      "iableAction\0222\n\ttimestamp\030\001 \001(\0132\032.google." +
      "protobuf.TimestampH\000\210\001\001\022\021\n\004name\030\002 \001(\tH\001\210" +
      "\001\001\022\022\n\005email\030\003 \001(\tH\002\210\001\001B\014\n\n_timestampB\007\n\005" +
      "_nameB\010\n\006_email\"\344\001\n\005Issue\0221\n\004type\030\001 \001(\0162" +
      "#.cyclonedx.v1_3.IssueClassification\022\017\n\002" +
      "id\030\002 \001(\tH\000\210\001\001\022\021\n\004name\030\003 \001(\tH\001\210\001\001\022\030\n\013desc" +
      "ription\030\004 \001(\tH\002\210\001\001\022+\n\006source\030\005 \001(\0132\026.cyc" +
      "lonedx.v1_3.SourceH\003\210\001\001\022\022\n\nreferences\030\006 " +
      "\003(\tB\005\n\003_idB\007\n\005_nameB\016\n\014_descriptionB\t\n\007_" +
      "source\">\n\006Source\022\021\n\004name\030\001 \001(\tH\000\210\001\001\022\020\n\003u" +
      "rl\030\002 \001(\tH\001\210\001\001B\007\n\005_nameB\006\n\004_url\"[\n\rLicens" +
      "eChoice\022*\n\007license\030\001 \001(\0132\027.cyclonedx.v1_" +
      "3.LicenseH\000\022\024\n\nexpression\030\002 \001(\tH\000B\010\n\006cho" +
      "ice\"\206\001\n\007License\022\014\n\002id\030\001 \001(\tH\000\022\016\n\004name\030\002 " +
      "\001(\tH\000\022/\n\004text\030\003 \001(\0132\034.cyclonedx.v1_3.Att" +
      "achedTextH\001\210\001\001\022\020\n\003url\030\004 \001(\tH\002\210\001\001B\t\n\007lice" +
      "nseB\007\n\005_textB\006\n\004_url\"\365\003\n\010Metadata\0222\n\ttim" +
      "estamp\030\001 \001(\0132\032.google.protobuf.Timestamp" +
      "H\000\210\001\001\022#\n\005tools\030\002 \003(\0132\024.cyclonedx.v1_3.To" +
      "ol\0226\n\007authors\030\003 \003(\0132%.cyclonedx.v1_3.Org" +
      "anizationalContact\0221\n\tcomponent\030\004 \001(\0132\031." +
      "cyclonedx.v1_3.ComponentH\001\210\001\001\022>\n\013manufac" +
      "ture\030\005 \001(\0132$.cyclonedx.v1_3.Organization" +
      "alEntityH\002\210\001\001\022;\n\010supplier\030\006 \001(\0132$.cyclon" +
      "edx.v1_3.OrganizationalEntityH\003\210\001\001\0224\n\010li" +
      "censes\030\007 \001(\0132\035.cyclonedx.v1_3.LicenseCho" +
      "iceH\004\210\001\001\022,\n\nproperties\030\010 \003(\0132\030.cyclonedx" +
      ".v1_3.PropertyB\014\n\n_timestampB\014\n\n_compone" +
      "ntB\016\n\014_manufactureB\013\n\t_supplierB\013\n\t_lice" +
      "nses\"o\n\025OrganizationalContact\022\021\n\004name\030\001 " +
      "\001(\tH\000\210\001\001\022\022\n\005email\030\002 \001(\tH\001\210\001\001\022\022\n\005phone\030\003 " +
      "\001(\tH\002\210\001\001B\007\n\005_nameB\010\n\006_emailB\010\n\006_phone\"w\n" +
      "\024OrganizationalEntity\022\021\n\004name\030\001 \001(\tH\000\210\001\001" +
      "\022\013\n\003url\030\002 \003(\t\0226\n\007contact\030\003 \003(\0132%.cyclone" +
      "dx.v1_3.OrganizationalContactB\007\n\005_name\"\225" +
      "\001\n\005Patch\0221\n\004type\030\001 \001(\0162#.cyclonedx.v1_3." +
      "PatchClassification\022\'\n\004diff\030\002 \001(\0132\024.cycl" +
      "onedx.v1_3.DiffH\000\210\001\001\022\'\n\010resolves\030\003 \003(\0132\025" +
      ".cyclonedx.v1_3.IssueB\007\n\005_diff\"\204\002\n\010Pedig" +
      "ree\022,\n\tancestors\030\001 \003(\0132\031.cyclonedx.v1_3." +
      "Component\022.\n\013descendants\030\002 \003(\0132\031.cyclone" +
      "dx.v1_3.Component\022+\n\010variants\030\003 \003(\0132\031.cy" +
      "clonedx.v1_3.Component\022\'\n\007commits\030\004 \003(\0132" +
      "\026.cyclonedx.v1_3.Commit\022&\n\007patches\030\005 \003(\013" +
      "2\025.cyclonedx.v1_3.Patch\022\022\n\005notes\030\006 \001(\tH\000" +
      "\210\001\001B\010\n\006_notes\"\336\004\n\007Service\022\024\n\007bom_ref\030\001 \001" +
      "(\tH\000\210\001\001\022;\n\010provider\030\002 \001(\0132$.cyclonedx.v1" +
      "_3.OrganizationalEntityH\001\210\001\001\022\022\n\005group\030\003 " +
      "\001(\tH\002\210\001\001\022\014\n\004name\030\004 \001(\t\022\024\n\007version\030\005 \001(\tH" +
      "\003\210\001\001\022\030\n\013description\030\006 \001(\tH\004\210\001\001\022\021\n\tendpoi" +
      "nts\030\007 \003(\t\022\032\n\rauthenticated\030\010 \001(\010H\005\210\001\001\022\035\n" +
      "\020x_trust_boundary\030\t \001(\010H\006\210\001\001\0220\n\004data\030\n \003" +
      "(\0132\".cyclonedx.v1_3.DataClassification\022/" +
      "\n\010licenses\030\013 \003(\0132\035.cyclonedx.v1_3.Licens" +
      "eChoice\022>\n\023external_references\030\014 \003(\0132!.c" +
      "yclonedx.v1_3.ExternalReference\022)\n\010servi" +
      "ces\030\r \003(\0132\027.cyclonedx.v1_3.Service\022,\n\npr" +
      "operties\030\016 \003(\0132\030.cyclonedx.v1_3.Property" +
      "B\n\n\010_bom_refB\013\n\t_providerB\010\n\006_groupB\n\n\010_" +
      "versionB\016\n\014_descriptionB\020\n\016_authenticate" +
      "dB\023\n\021_x_trust_boundary\"\342\001\n\004Swid\022\016\n\006tag_i" +
      "d\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\024\n\007version\030\003 \001(\tH\000" +
      "\210\001\001\022\030\n\013tag_version\030\004 \001(\005H\001\210\001\001\022\022\n\005patch\030\005" +
      " \001(\010H\002\210\001\001\022/\n\004text\030\006 \001(\0132\034.cyclonedx.v1_3" +
      ".AttachedTextH\003\210\001\001\022\020\n\003url\030\007 \001(\tH\004\210\001\001B\n\n\010" +
      "_versionB\016\n\014_tag_versionB\010\n\006_patchB\007\n\005_t" +
      "extB\006\n\004_url\"\212\001\n\004Tool\022\023\n\006vendor\030\001 \001(\tH\000\210\001" +
      "\001\022\021\n\004name\030\002 \001(\tH\001\210\001\001\022\024\n\007version\030\003 \001(\tH\002\210" +
      "\001\001\022$\n\006hashes\030\004 \003(\0132\024.cyclonedx.v1_3.Hash" +
      "B\t\n\007_vendorB\007\n\005_nameB\n\n\010_version\"6\n\010Prop" +
      "erty\022\014\n\004name\030\001 \001(\t\022\022\n\005value\030\002 \001(\tH\000\210\001\001B\010" +
      "\n\006_value\"e\n\013Composition\022,\n\taggregate\030\001 \001" +
      "(\0162\031.cyclonedx.v1_3.Aggregate\022\022\n\nassembl" +
      "ies\030\002 \003(\t\022\024\n\014dependencies\030\003 \003(\t\"!\n\021Evide" +
      "nceCopyright\022\014\n\004text\030\001 \001(\t\"q\n\010Evidence\022/" +
      "\n\010licenses\030\001 \003(\0132\035.cyclonedx.v1_3.Licens" +
      "eChoice\0224\n\tcopyright\030\002 \003(\0132!.cyclonedx.v" +
      "1_3.EvidenceCopyright*\227\002\n\016Classification" +
      "\022\027\n\023CLASSIFICATION_NULL\020\000\022\036\n\032CLASSIFICAT" +
      "ION_APPLICATION\020\001\022\034\n\030CLASSIFICATION_FRAM" +
      "EWORK\020\002\022\032\n\026CLASSIFICATION_LIBRARY\020\003\022#\n\037C" +
      "LASSIFICATION_OPERATING_SYSTEM\020\004\022\031\n\025CLAS" +
      "SIFICATION_DEVICE\020\005\022\027\n\023CLASSIFICATION_FI" +
      "LE\020\006\022\034\n\030CLASSIFICATION_CONTAINER\020\007\022\033\n\027CL" +
      "ASSIFICATION_FIRMWARE\020\010*\202\001\n\010DataFlow\022\022\n\016" +
      "DATA_FLOW_NULL\020\000\022\025\n\021DATA_FLOW_INBOUND\020\001\022" +
      "\026\n\022DATA_FLOW_OUTBOUND\020\002\022\034\n\030DATA_FLOW_BI_" +
      "DIRECTIONAL\020\003\022\025\n\021DATA_FLOW_UNKNOWN\020\004*\325\004\n" +
      "\025ExternalReferenceType\022!\n\035EXTERNAL_REFER" +
      "ENCE_TYPE_OTHER\020\000\022\037\n\033EXTERNAL_REFERENCE_" +
      "TYPE_VCS\020\001\022)\n%EXTERNAL_REFERENCE_TYPE_IS" +
      "SUE_TRACKER\020\002\022#\n\037EXTERNAL_REFERENCE_TYPE" +
      "_WEBSITE\020\003\022&\n\"EXTERNAL_REFERENCE_TYPE_AD" +
      "VISORIES\020\004\022\037\n\033EXTERNAL_REFERENCE_TYPE_BO" +
      "M\020\005\022(\n$EXTERNAL_REFERENCE_TYPE_MAILING_L" +
      "IST\020\006\022\"\n\036EXTERNAL_REFERENCE_TYPE_SOCIAL\020" +
      "\007\022 \n\034EXTERNAL_REFERENCE_TYPE_CHAT\020\010\022)\n%E" +
      "XTERNAL_REFERENCE_TYPE_DOCUMENTATION\020\t\022#" +
      "\n\037EXTERNAL_REFERENCE_TYPE_SUPPORT\020\n\022(\n$E" +
      "XTERNAL_REFERENCE_TYPE_DISTRIBUTION\020\013\022#\n" +
      "\037EXTERNAL_REFERENCE_TYPE_LICENSE\020\014\022&\n\"EX" +
      "TERNAL_REFERENCE_TYPE_BUILD_META\020\r\022(\n$EX" +
      "TERNAL_REFERENCE_TYPE_BUILD_SYSTEM\020\016*\267\002\n" +
      "\007HashAlg\022\021\n\rHASH_ALG_NULL\020\000\022\021\n\rHASH_ALG_" +
      "MD_5\020\001\022\022\n\016HASH_ALG_SHA_1\020\002\022\024\n\020HASH_ALG_S" +
      "HA_256\020\003\022\024\n\020HASH_ALG_SHA_384\020\004\022\024\n\020HASH_A" +
      "LG_SHA_512\020\005\022\026\n\022HASH_ALG_SHA_3_256\020\006\022\026\n\022" +
      "HASH_ALG_SHA_3_384\020\007\022\026\n\022HASH_ALG_SHA_3_5" +
      "12\020\010\022\032\n\026HASH_ALG_BLAKE_2_B_256\020\t\022\032\n\026HASH" +
      "_ALG_BLAKE_2_B_384\020\n\022\032\n\026HASH_ALG_BLAKE_2" +
      "_B_512\020\013\022\024\n\020HASH_ALG_BLAKE_3\020\014*\236\001\n\023Issue" +
      "Classification\022\035\n\031ISSUE_CLASSIFICATION_N" +
      "ULL\020\000\022\037\n\033ISSUE_CLASSIFICATION_DEFECT\020\001\022$" +
      "\n ISSUE_CLASSIFICATION_ENHANCEMENT\020\002\022!\n\035" +
      "ISSUE_CLASSIFICATION_SECURITY\020\003*\303\001\n\023Patc" +
      "hClassification\022\035\n\031PATCH_CLASSIFICATION_" +
      "NULL\020\000\022#\n\037PATCH_CLASSIFICATION_UNOFFICIA" +
      "L\020\001\022\037\n\033PATCH_CLASSIFICATION_MONKEY\020\002\022!\n\035" +
      "PATCH_CLASSIFICATION_BACKPORT\020\003\022$\n PATCH" +
      "_CLASSIFICATION_CHERRY_PICK\020\004*Z\n\005Scope\022\025" +
      "\n\021SCOPE_UNSPECIFIED\020\000\022\022\n\016SCOPE_REQUIRED\020" +
      "\001\022\022\n\016SCOPE_OPTIONAL\020\002\022\022\n\016SCOPE_EXCLUDED\020" +
      "\003*\307\001\n\tAggregate\022\033\n\027AGGREGATE_NOT_SPECIFI" +
      "ED\020\000\022\026\n\022AGGREGATE_COMPLETE\020\001\022\030\n\024AGGREGAT" +
      "E_INCOMPLETE\020\002\022)\n%AGGREGATE_INCOMPLETE_F" +
      "IRST_PARTY_ONLY\020\003\022)\n%AGGREGATE_INCOMPLET" +
      "E_THIRD_PARTY_ONLY\020\004\022\025\n\021AGGREGATE_UNKNOW" +
      "N\020\005b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.TimestampProto.getDescriptor(),
        });
    internal_static_cyclonedx_v1_3_AttachedText_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_cyclonedx_v1_3_AttachedText_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_AttachedText_descriptor,
        new java.lang.String[] { "ContentType", "Encoding", "Value", });
    internal_static_cyclonedx_v1_3_Bom_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_cyclonedx_v1_3_Bom_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Bom_descriptor,
        new java.lang.String[] { "SpecVersion", "Version", "SerialNumber", "Metadata", "Components", "Services", "ExternalReferences", "Dependencies", "Compositions", });
    internal_static_cyclonedx_v1_3_Commit_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_cyclonedx_v1_3_Commit_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Commit_descriptor,
        new java.lang.String[] { "Uid", "Url", "Author", "Committer", "Message", });
    internal_static_cyclonedx_v1_3_Component_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_cyclonedx_v1_3_Component_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Component_descriptor,
        new java.lang.String[] { "Type", "MimeType", "BomRef", "Supplier", "Author", "Publisher", "Group", "Name", "Version", "Description", "Scope", "Hashes", "Licenses", "Copyright", "Cpe", "Purl", "Swid", "Modified", "Pedigree", "ExternalReferences", "Components", "Properties", "Evidence", });
    internal_static_cyclonedx_v1_3_DataClassification_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_cyclonedx_v1_3_DataClassification_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_DataClassification_descriptor,
        new java.lang.String[] { "Flow", "Value", });
    internal_static_cyclonedx_v1_3_Dependency_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_cyclonedx_v1_3_Dependency_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Dependency_descriptor,
        new java.lang.String[] { "Ref", "Dependencies", });
    internal_static_cyclonedx_v1_3_Diff_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_cyclonedx_v1_3_Diff_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Diff_descriptor,
        new java.lang.String[] { "Text", "Url", });
    internal_static_cyclonedx_v1_3_ExternalReference_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_cyclonedx_v1_3_ExternalReference_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_ExternalReference_descriptor,
        new java.lang.String[] { "Type", "Url", "Comment", "Hashes", });
    internal_static_cyclonedx_v1_3_Hash_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_cyclonedx_v1_3_Hash_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Hash_descriptor,
        new java.lang.String[] { "Alg", "Value", });
    internal_static_cyclonedx_v1_3_IdentifiableAction_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_cyclonedx_v1_3_IdentifiableAction_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_IdentifiableAction_descriptor,
        new java.lang.String[] { "Timestamp", "Name", "Email", });
    internal_static_cyclonedx_v1_3_Issue_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_cyclonedx_v1_3_Issue_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Issue_descriptor,
        new java.lang.String[] { "Type", "Id", "Name", "Description", "Source", "References", });
    internal_static_cyclonedx_v1_3_Source_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_cyclonedx_v1_3_Source_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Source_descriptor,
        new java.lang.String[] { "Name", "Url", });
    internal_static_cyclonedx_v1_3_LicenseChoice_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_cyclonedx_v1_3_LicenseChoice_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_LicenseChoice_descriptor,
        new java.lang.String[] { "License", "Expression", "Choice", });
    internal_static_cyclonedx_v1_3_License_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_cyclonedx_v1_3_License_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_License_descriptor,
        new java.lang.String[] { "Id", "Name", "Text", "Url", "License", });
    internal_static_cyclonedx_v1_3_Metadata_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_cyclonedx_v1_3_Metadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Metadata_descriptor,
        new java.lang.String[] { "Timestamp", "Tools", "Authors", "Component", "Manufacture", "Supplier", "Licenses", "Properties", });
    internal_static_cyclonedx_v1_3_OrganizationalContact_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_cyclonedx_v1_3_OrganizationalContact_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_OrganizationalContact_descriptor,
        new java.lang.String[] { "Name", "Email", "Phone", });
    internal_static_cyclonedx_v1_3_OrganizationalEntity_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_cyclonedx_v1_3_OrganizationalEntity_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_OrganizationalEntity_descriptor,
        new java.lang.String[] { "Name", "Url", "Contact", });
    internal_static_cyclonedx_v1_3_Patch_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_cyclonedx_v1_3_Patch_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Patch_descriptor,
        new java.lang.String[] { "Type", "Diff", "Resolves", });
    internal_static_cyclonedx_v1_3_Pedigree_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_cyclonedx_v1_3_Pedigree_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Pedigree_descriptor,
        new java.lang.String[] { "Ancestors", "Descendants", "Variants", "Commits", "Patches", "Notes", });
    internal_static_cyclonedx_v1_3_Service_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_cyclonedx_v1_3_Service_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Service_descriptor,
        new java.lang.String[] { "BomRef", "Provider", "Group", "Name", "Version", "Description", "Endpoints", "Authenticated", "XTrustBoundary", "Data", "Licenses", "ExternalReferences", "Services", "Properties", });
    internal_static_cyclonedx_v1_3_Swid_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_cyclonedx_v1_3_Swid_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Swid_descriptor,
        new java.lang.String[] { "TagId", "Name", "Version", "TagVersion", "Patch", "Text", "Url", });
    internal_static_cyclonedx_v1_3_Tool_descriptor =
      getDescriptor().getMessageTypes().get(21);
    internal_static_cyclonedx_v1_3_Tool_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Tool_descriptor,
        new java.lang.String[] { "Vendor", "Name", "Version", "Hashes", });
    internal_static_cyclonedx_v1_3_Property_descriptor =
      getDescriptor().getMessageTypes().get(22);
    internal_static_cyclonedx_v1_3_Property_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Property_descriptor,
        new java.lang.String[] { "Name", "Value", });
    internal_static_cyclonedx_v1_3_Composition_descriptor =
      getDescriptor().getMessageTypes().get(23);
    internal_static_cyclonedx_v1_3_Composition_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Composition_descriptor,
        new java.lang.String[] { "Aggregate", "Assemblies", "Dependencies", });
    internal_static_cyclonedx_v1_3_EvidenceCopyright_descriptor =
      getDescriptor().getMessageTypes().get(24);
    internal_static_cyclonedx_v1_3_EvidenceCopyright_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_EvidenceCopyright_descriptor,
        new java.lang.String[] { "Text", });
    internal_static_cyclonedx_v1_3_Evidence_descriptor =
      getDescriptor().getMessageTypes().get(25);
    internal_static_cyclonedx_v1_3_Evidence_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_v1_3_Evidence_descriptor,
        new java.lang.String[] { "Licenses", "Copyright", });
    descriptor.resolveAllFeaturesImmutable();
    com.google.protobuf.TimestampProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: license-collision-specification.proto
// Protobuf Java Version: 4.27.0-rc1

package dependencyCrawler;

public final class LicenseCollisionSpecificationOuterClass {
  private LicenseCollisionSpecificationOuterClass() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 0,
      /* suffix= */ "-rc1",
      LicenseCollisionSpecificationOuterClass.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface LicenseCollisionSpecificationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dependencyCrawler.LicenseCollisionSpecification)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The license collisions
     * </pre>
     *
     * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
     */
    java.util.List<dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision> 
        getLicenseCollisionsList();
    /**
     * <pre>
     * The license collisions
     * </pre>
     *
     * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
     */
    dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision getLicenseCollisions(int index);
    /**
     * <pre>
     * The license collisions
     * </pre>
     *
     * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
     */
    int getLicenseCollisionsCount();
    /**
     * <pre>
     * The license collisions
     * </pre>
     *
     * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
     */
    java.util.List<? extends dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionOrBuilder> 
        getLicenseCollisionsOrBuilderList();
    /**
     * <pre>
     * The license collisions
     * </pre>
     *
     * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
     */
    dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionOrBuilder getLicenseCollisionsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dependencyCrawler.LicenseCollisionSpecification}
   */
  public static final class LicenseCollisionSpecification extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dependencyCrawler.LicenseCollisionSpecification)
      LicenseCollisionSpecificationOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 27,
        /* patch= */ 0,
        /* suffix= */ "-rc1",
        LicenseCollisionSpecification.class.getName());
    }
    // Use LicenseCollisionSpecification.newBuilder() to construct.
    private LicenseCollisionSpecification(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private LicenseCollisionSpecification() {
      licenseCollisions_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dependencyCrawler.LicenseCollisionSpecificationOuterClass.internal_static_dependencyCrawler_LicenseCollisionSpecification_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dependencyCrawler.LicenseCollisionSpecificationOuterClass.internal_static_dependencyCrawler_LicenseCollisionSpecification_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification.class, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification.Builder.class);
    }

    public static final int LICENSECOLLISIONS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision> licenseCollisions_;
    /**
     * <pre>
     * The license collisions
     * </pre>
     *
     * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
     */
    @java.lang.Override
    public java.util.List<dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision> getLicenseCollisionsList() {
      return licenseCollisions_;
    }
    /**
     * <pre>
     * The license collisions
     * </pre>
     *
     * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionOrBuilder> 
        getLicenseCollisionsOrBuilderList() {
      return licenseCollisions_;
    }
    /**
     * <pre>
     * The license collisions
     * </pre>
     *
     * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
     */
    @java.lang.Override
    public int getLicenseCollisionsCount() {
      return licenseCollisions_.size();
    }
    /**
     * <pre>
     * The license collisions
     * </pre>
     *
     * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
     */
    @java.lang.Override
    public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision getLicenseCollisions(int index) {
      return licenseCollisions_.get(index);
    }
    /**
     * <pre>
     * The license collisions
     * </pre>
     *
     * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
     */
    @java.lang.Override
    public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionOrBuilder getLicenseCollisionsOrBuilder(
        int index) {
      return licenseCollisions_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < licenseCollisions_.size(); i++) {
        output.writeMessage(1, licenseCollisions_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < licenseCollisions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, licenseCollisions_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification)) {
        return super.equals(obj);
      }
      dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification other = (dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification) obj;

      if (!getLicenseCollisionsList()
          .equals(other.getLicenseCollisionsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getLicenseCollisionsCount() > 0) {
        hash = (37 * hash) + LICENSECOLLISIONS_FIELD_NUMBER;
        hash = (53 * hash) + getLicenseCollisionsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dependencyCrawler.LicenseCollisionSpecification}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dependencyCrawler.LicenseCollisionSpecification)
        dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecificationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dependencyCrawler.LicenseCollisionSpecificationOuterClass.internal_static_dependencyCrawler_LicenseCollisionSpecification_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dependencyCrawler.LicenseCollisionSpecificationOuterClass.internal_static_dependencyCrawler_LicenseCollisionSpecification_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification.class, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification.Builder.class);
      }

      // Construct using dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (licenseCollisionsBuilder_ == null) {
          licenseCollisions_ = java.util.Collections.emptyList();
        } else {
          licenseCollisions_ = null;
          licenseCollisionsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dependencyCrawler.LicenseCollisionSpecificationOuterClass.internal_static_dependencyCrawler_LicenseCollisionSpecification_descriptor;
      }

      @java.lang.Override
      public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification getDefaultInstanceForType() {
        return dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification.getDefaultInstance();
      }

      @java.lang.Override
      public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification build() {
        dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification buildPartial() {
        dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification result = new dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification result) {
        if (licenseCollisionsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            licenseCollisions_ = java.util.Collections.unmodifiableList(licenseCollisions_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.licenseCollisions_ = licenseCollisions_;
        } else {
          result.licenseCollisions_ = licenseCollisionsBuilder_.build();
        }
      }

      private void buildPartial0(dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification) {
          return mergeFrom((dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification other) {
        if (other == dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification.getDefaultInstance()) return this;
        if (licenseCollisionsBuilder_ == null) {
          if (!other.licenseCollisions_.isEmpty()) {
            if (licenseCollisions_.isEmpty()) {
              licenseCollisions_ = other.licenseCollisions_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureLicenseCollisionsIsMutable();
              licenseCollisions_.addAll(other.licenseCollisions_);
            }
            onChanged();
          }
        } else {
          if (!other.licenseCollisions_.isEmpty()) {
            if (licenseCollisionsBuilder_.isEmpty()) {
              licenseCollisionsBuilder_.dispose();
              licenseCollisionsBuilder_ = null;
              licenseCollisions_ = other.licenseCollisions_;
              bitField0_ = (bitField0_ & ~0x00000001);
              licenseCollisionsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLicenseCollisionsFieldBuilder() : null;
            } else {
              licenseCollisionsBuilder_.addAllMessages(other.licenseCollisions_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision m =
                    input.readMessage(
                        dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.parser(),
                        extensionRegistry);
                if (licenseCollisionsBuilder_ == null) {
                  ensureLicenseCollisionsIsMutable();
                  licenseCollisions_.add(m);
                } else {
                  licenseCollisionsBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision> licenseCollisions_ =
        java.util.Collections.emptyList();
      private void ensureLicenseCollisionsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          licenseCollisions_ = new java.util.ArrayList<dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision>(licenseCollisions_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.Builder, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionOrBuilder> licenseCollisionsBuilder_;

      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public java.util.List<dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision> getLicenseCollisionsList() {
        if (licenseCollisionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(licenseCollisions_);
        } else {
          return licenseCollisionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public int getLicenseCollisionsCount() {
        if (licenseCollisionsBuilder_ == null) {
          return licenseCollisions_.size();
        } else {
          return licenseCollisionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision getLicenseCollisions(int index) {
        if (licenseCollisionsBuilder_ == null) {
          return licenseCollisions_.get(index);
        } else {
          return licenseCollisionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public Builder setLicenseCollisions(
          int index, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision value) {
        if (licenseCollisionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLicenseCollisionsIsMutable();
          licenseCollisions_.set(index, value);
          onChanged();
        } else {
          licenseCollisionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public Builder setLicenseCollisions(
          int index, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.Builder builderForValue) {
        if (licenseCollisionsBuilder_ == null) {
          ensureLicenseCollisionsIsMutable();
          licenseCollisions_.set(index, builderForValue.build());
          onChanged();
        } else {
          licenseCollisionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public Builder addLicenseCollisions(dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision value) {
        if (licenseCollisionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLicenseCollisionsIsMutable();
          licenseCollisions_.add(value);
          onChanged();
        } else {
          licenseCollisionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public Builder addLicenseCollisions(
          int index, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision value) {
        if (licenseCollisionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLicenseCollisionsIsMutable();
          licenseCollisions_.add(index, value);
          onChanged();
        } else {
          licenseCollisionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public Builder addLicenseCollisions(
          dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.Builder builderForValue) {
        if (licenseCollisionsBuilder_ == null) {
          ensureLicenseCollisionsIsMutable();
          licenseCollisions_.add(builderForValue.build());
          onChanged();
        } else {
          licenseCollisionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public Builder addLicenseCollisions(
          int index, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.Builder builderForValue) {
        if (licenseCollisionsBuilder_ == null) {
          ensureLicenseCollisionsIsMutable();
          licenseCollisions_.add(index, builderForValue.build());
          onChanged();
        } else {
          licenseCollisionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public Builder addAllLicenseCollisions(
          java.lang.Iterable<? extends dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision> values) {
        if (licenseCollisionsBuilder_ == null) {
          ensureLicenseCollisionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, licenseCollisions_);
          onChanged();
        } else {
          licenseCollisionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public Builder clearLicenseCollisions() {
        if (licenseCollisionsBuilder_ == null) {
          licenseCollisions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          licenseCollisionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public Builder removeLicenseCollisions(int index) {
        if (licenseCollisionsBuilder_ == null) {
          ensureLicenseCollisionsIsMutable();
          licenseCollisions_.remove(index);
          onChanged();
        } else {
          licenseCollisionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.Builder getLicenseCollisionsBuilder(
          int index) {
        return getLicenseCollisionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionOrBuilder getLicenseCollisionsOrBuilder(
          int index) {
        if (licenseCollisionsBuilder_ == null) {
          return licenseCollisions_.get(index);  } else {
          return licenseCollisionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public java.util.List<? extends dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionOrBuilder> 
           getLicenseCollisionsOrBuilderList() {
        if (licenseCollisionsBuilder_ != null) {
          return licenseCollisionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(licenseCollisions_);
        }
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.Builder addLicenseCollisionsBuilder() {
        return getLicenseCollisionsFieldBuilder().addBuilder(
            dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.getDefaultInstance());
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.Builder addLicenseCollisionsBuilder(
          int index) {
        return getLicenseCollisionsFieldBuilder().addBuilder(
            index, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.getDefaultInstance());
      }
      /**
       * <pre>
       * The license collisions
       * </pre>
       *
       * <code>repeated .dependencyCrawler.LicenseCollision licenseCollisions = 1;</code>
       */
      public java.util.List<dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.Builder> 
           getLicenseCollisionsBuilderList() {
        return getLicenseCollisionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.Builder, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionOrBuilder> 
          getLicenseCollisionsFieldBuilder() {
        if (licenseCollisionsBuilder_ == null) {
          licenseCollisionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.Builder, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionOrBuilder>(
                  licenseCollisions_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          licenseCollisions_ = null;
        }
        return licenseCollisionsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:dependencyCrawler.LicenseCollisionSpecification)
    }

    // @@protoc_insertion_point(class_scope:dependencyCrawler.LicenseCollisionSpecification)
    private static final dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification();
    }

    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LicenseCollisionSpecification>
        PARSER = new com.google.protobuf.AbstractParser<LicenseCollisionSpecification>() {
      @java.lang.Override
      public LicenseCollisionSpecification parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<LicenseCollisionSpecification> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LicenseCollisionSpecification> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionSpecification getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LicenseCollisionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dependencyCrawler.LicenseCollision)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The spdx id of the parent component or empty if collides with any license
     * </pre>
     *
     * <code>repeated string spdxIDParent = 1;</code>
     * @return A list containing the spdxIDParent.
     */
    java.util.List<java.lang.String>
        getSpdxIDParentList();
    /**
     * <pre>
     * The spdx id of the parent component or empty if collides with any license
     * </pre>
     *
     * <code>repeated string spdxIDParent = 1;</code>
     * @return The count of spdxIDParent.
     */
    int getSpdxIDParentCount();
    /**
     * <pre>
     * The spdx id of the parent component or empty if collides with any license
     * </pre>
     *
     * <code>repeated string spdxIDParent = 1;</code>
     * @param index The index of the element to return.
     * @return The spdxIDParent at the given index.
     */
    java.lang.String getSpdxIDParent(int index);
    /**
     * <pre>
     * The spdx id of the parent component or empty if collides with any license
     * </pre>
     *
     * <code>repeated string spdxIDParent = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the spdxIDParent at the given index.
     */
    com.google.protobuf.ByteString
        getSpdxIDParentBytes(int index);

    /**
     * <pre>
     * The spdx id of the child component
     * </pre>
     *
     * <code>string spdxIDChild = 2;</code>
     * @return The spdxIDChild.
     */
    java.lang.String getSpdxIDChild();
    /**
     * <pre>
     * The spdx id of the child component
     * </pre>
     *
     * <code>string spdxIDChild = 2;</code>
     * @return The bytes for spdxIDChild.
     */
    com.google.protobuf.ByteString
        getSpdxIDChildBytes();

    /**
     * <pre>
     * If this collision is also true for if the parent is an application.
     * </pre>
     *
     * <code>bool forApplication = 3;</code>
     * @return The forApplication.
     */
    boolean getForApplication();

    /**
     * <pre>
     * The cause of the license collision
     * </pre>
     *
     * <code>optional string cause = 4;</code>
     * @return Whether the cause field is set.
     */
    boolean hasCause();
    /**
     * <pre>
     * The cause of the license collision
     * </pre>
     *
     * <code>optional string cause = 4;</code>
     * @return The cause.
     */
    java.lang.String getCause();
    /**
     * <pre>
     * The cause of the license collision
     * </pre>
     *
     * <code>optional string cause = 4;</code>
     * @return The bytes for cause.
     */
    com.google.protobuf.ByteString
        getCauseBytes();

    /**
     * <pre>
     * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
     * </pre>
     *
     * <code>repeated string parentExclusion = 5;</code>
     * @return A list containing the parentExclusion.
     */
    java.util.List<java.lang.String>
        getParentExclusionList();
    /**
     * <pre>
     * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
     * </pre>
     *
     * <code>repeated string parentExclusion = 5;</code>
     * @return The count of parentExclusion.
     */
    int getParentExclusionCount();
    /**
     * <pre>
     * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
     * </pre>
     *
     * <code>repeated string parentExclusion = 5;</code>
     * @param index The index of the element to return.
     * @return The parentExclusion at the given index.
     */
    java.lang.String getParentExclusion(int index);
    /**
     * <pre>
     * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
     * </pre>
     *
     * <code>repeated string parentExclusion = 5;</code>
     * @param index The index of the value to return.
     * @return The bytes of the parentExclusion at the given index.
     */
    com.google.protobuf.ByteString
        getParentExclusionBytes(int index);
  }
  /**
   * <pre>
   * A License Collision
   * </pre>
   *
   * Protobuf type {@code dependencyCrawler.LicenseCollision}
   */
  public static final class LicenseCollision extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dependencyCrawler.LicenseCollision)
      LicenseCollisionOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 27,
        /* patch= */ 0,
        /* suffix= */ "-rc1",
        LicenseCollision.class.getName());
    }
    // Use LicenseCollision.newBuilder() to construct.
    private LicenseCollision(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private LicenseCollision() {
      spdxIDParent_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      spdxIDChild_ = "";
      cause_ = "";
      parentExclusion_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dependencyCrawler.LicenseCollisionSpecificationOuterClass.internal_static_dependencyCrawler_LicenseCollision_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dependencyCrawler.LicenseCollisionSpecificationOuterClass.internal_static_dependencyCrawler_LicenseCollision_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.class, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.Builder.class);
    }

    private int bitField0_;
    public static final int SPDXIDPARENT_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList spdxIDParent_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * The spdx id of the parent component or empty if collides with any license
     * </pre>
     *
     * <code>repeated string spdxIDParent = 1;</code>
     * @return A list containing the spdxIDParent.
     */
    public com.google.protobuf.ProtocolStringList
        getSpdxIDParentList() {
      return spdxIDParent_;
    }
    /**
     * <pre>
     * The spdx id of the parent component or empty if collides with any license
     * </pre>
     *
     * <code>repeated string spdxIDParent = 1;</code>
     * @return The count of spdxIDParent.
     */
    public int getSpdxIDParentCount() {
      return spdxIDParent_.size();
    }
    /**
     * <pre>
     * The spdx id of the parent component or empty if collides with any license
     * </pre>
     *
     * <code>repeated string spdxIDParent = 1;</code>
     * @param index The index of the element to return.
     * @return The spdxIDParent at the given index.
     */
    public java.lang.String getSpdxIDParent(int index) {
      return spdxIDParent_.get(index);
    }
    /**
     * <pre>
     * The spdx id of the parent component or empty if collides with any license
     * </pre>
     *
     * <code>repeated string spdxIDParent = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the spdxIDParent at the given index.
     */
    public com.google.protobuf.ByteString
        getSpdxIDParentBytes(int index) {
      return spdxIDParent_.getByteString(index);
    }

    public static final int SPDXIDCHILD_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object spdxIDChild_ = "";
    /**
     * <pre>
     * The spdx id of the child component
     * </pre>
     *
     * <code>string spdxIDChild = 2;</code>
     * @return The spdxIDChild.
     */
    @java.lang.Override
    public java.lang.String getSpdxIDChild() {
      java.lang.Object ref = spdxIDChild_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        spdxIDChild_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The spdx id of the child component
     * </pre>
     *
     * <code>string spdxIDChild = 2;</code>
     * @return The bytes for spdxIDChild.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSpdxIDChildBytes() {
      java.lang.Object ref = spdxIDChild_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        spdxIDChild_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FORAPPLICATION_FIELD_NUMBER = 3;
    private boolean forApplication_ = false;
    /**
     * <pre>
     * If this collision is also true for if the parent is an application.
     * </pre>
     *
     * <code>bool forApplication = 3;</code>
     * @return The forApplication.
     */
    @java.lang.Override
    public boolean getForApplication() {
      return forApplication_;
    }

    public static final int CAUSE_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object cause_ = "";
    /**
     * <pre>
     * The cause of the license collision
     * </pre>
     *
     * <code>optional string cause = 4;</code>
     * @return Whether the cause field is set.
     */
    @java.lang.Override
    public boolean hasCause() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The cause of the license collision
     * </pre>
     *
     * <code>optional string cause = 4;</code>
     * @return The cause.
     */
    @java.lang.Override
    public java.lang.String getCause() {
      java.lang.Object ref = cause_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        cause_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The cause of the license collision
     * </pre>
     *
     * <code>optional string cause = 4;</code>
     * @return The bytes for cause.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCauseBytes() {
      java.lang.Object ref = cause_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cause_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PARENTEXCLUSION_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList parentExclusion_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
     * </pre>
     *
     * <code>repeated string parentExclusion = 5;</code>
     * @return A list containing the parentExclusion.
     */
    public com.google.protobuf.ProtocolStringList
        getParentExclusionList() {
      return parentExclusion_;
    }
    /**
     * <pre>
     * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
     * </pre>
     *
     * <code>repeated string parentExclusion = 5;</code>
     * @return The count of parentExclusion.
     */
    public int getParentExclusionCount() {
      return parentExclusion_.size();
    }
    /**
     * <pre>
     * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
     * </pre>
     *
     * <code>repeated string parentExclusion = 5;</code>
     * @param index The index of the element to return.
     * @return The parentExclusion at the given index.
     */
    public java.lang.String getParentExclusion(int index) {
      return parentExclusion_.get(index);
    }
    /**
     * <pre>
     * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
     * </pre>
     *
     * <code>repeated string parentExclusion = 5;</code>
     * @param index The index of the value to return.
     * @return The bytes of the parentExclusion at the given index.
     */
    public com.google.protobuf.ByteString
        getParentExclusionBytes(int index) {
      return parentExclusion_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < spdxIDParent_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, spdxIDParent_.getRaw(i));
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(spdxIDChild_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, spdxIDChild_);
      }
      if (forApplication_ != false) {
        output.writeBool(3, forApplication_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 4, cause_);
      }
      for (int i = 0; i < parentExclusion_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 5, parentExclusion_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < spdxIDParent_.size(); i++) {
          dataSize += computeStringSizeNoTag(spdxIDParent_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getSpdxIDParentList().size();
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(spdxIDChild_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, spdxIDChild_);
      }
      if (forApplication_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, forApplication_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(4, cause_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < parentExclusion_.size(); i++) {
          dataSize += computeStringSizeNoTag(parentExclusion_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getParentExclusionList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision)) {
        return super.equals(obj);
      }
      dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision other = (dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision) obj;

      if (!getSpdxIDParentList()
          .equals(other.getSpdxIDParentList())) return false;
      if (!getSpdxIDChild()
          .equals(other.getSpdxIDChild())) return false;
      if (getForApplication()
          != other.getForApplication()) return false;
      if (hasCause() != other.hasCause()) return false;
      if (hasCause()) {
        if (!getCause()
            .equals(other.getCause())) return false;
      }
      if (!getParentExclusionList()
          .equals(other.getParentExclusionList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSpdxIDParentCount() > 0) {
        hash = (37 * hash) + SPDXIDPARENT_FIELD_NUMBER;
        hash = (53 * hash) + getSpdxIDParentList().hashCode();
      }
      hash = (37 * hash) + SPDXIDCHILD_FIELD_NUMBER;
      hash = (53 * hash) + getSpdxIDChild().hashCode();
      hash = (37 * hash) + FORAPPLICATION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getForApplication());
      if (hasCause()) {
        hash = (37 * hash) + CAUSE_FIELD_NUMBER;
        hash = (53 * hash) + getCause().hashCode();
      }
      if (getParentExclusionCount() > 0) {
        hash = (37 * hash) + PARENTEXCLUSION_FIELD_NUMBER;
        hash = (53 * hash) + getParentExclusionList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A License Collision
     * </pre>
     *
     * Protobuf type {@code dependencyCrawler.LicenseCollision}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dependencyCrawler.LicenseCollision)
        dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollisionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dependencyCrawler.LicenseCollisionSpecificationOuterClass.internal_static_dependencyCrawler_LicenseCollision_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dependencyCrawler.LicenseCollisionSpecificationOuterClass.internal_static_dependencyCrawler_LicenseCollision_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.class, dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.Builder.class);
      }

      // Construct using dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        spdxIDParent_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        spdxIDChild_ = "";
        forApplication_ = false;
        cause_ = "";
        parentExclusion_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dependencyCrawler.LicenseCollisionSpecificationOuterClass.internal_static_dependencyCrawler_LicenseCollision_descriptor;
      }

      @java.lang.Override
      public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision getDefaultInstanceForType() {
        return dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.getDefaultInstance();
      }

      @java.lang.Override
      public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision build() {
        dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision buildPartial() {
        dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision result = new dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          spdxIDParent_.makeImmutable();
          result.spdxIDParent_ = spdxIDParent_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.spdxIDChild_ = spdxIDChild_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.forApplication_ = forApplication_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.cause_ = cause_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          parentExclusion_.makeImmutable();
          result.parentExclusion_ = parentExclusion_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision) {
          return mergeFrom((dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision other) {
        if (other == dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision.getDefaultInstance()) return this;
        if (!other.spdxIDParent_.isEmpty()) {
          if (spdxIDParent_.isEmpty()) {
            spdxIDParent_ = other.spdxIDParent_;
            bitField0_ |= 0x00000001;
          } else {
            ensureSpdxIDParentIsMutable();
            spdxIDParent_.addAll(other.spdxIDParent_);
          }
          onChanged();
        }
        if (!other.getSpdxIDChild().isEmpty()) {
          spdxIDChild_ = other.spdxIDChild_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.getForApplication() != false) {
          setForApplication(other.getForApplication());
        }
        if (other.hasCause()) {
          cause_ = other.cause_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        if (!other.parentExclusion_.isEmpty()) {
          if (parentExclusion_.isEmpty()) {
            parentExclusion_ = other.parentExclusion_;
            bitField0_ |= 0x00000010;
          } else {
            ensureParentExclusionIsMutable();
            parentExclusion_.addAll(other.parentExclusion_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureSpdxIDParentIsMutable();
                spdxIDParent_.add(s);
                break;
              } // case 10
              case 18: {
                spdxIDChild_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                forApplication_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                cause_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureParentExclusionIsMutable();
                parentExclusion_.add(s);
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringArrayList spdxIDParent_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureSpdxIDParentIsMutable() {
        if (!spdxIDParent_.isModifiable()) {
          spdxIDParent_ = new com.google.protobuf.LazyStringArrayList(spdxIDParent_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * The spdx id of the parent component or empty if collides with any license
       * </pre>
       *
       * <code>repeated string spdxIDParent = 1;</code>
       * @return A list containing the spdxIDParent.
       */
      public com.google.protobuf.ProtocolStringList
          getSpdxIDParentList() {
        spdxIDParent_.makeImmutable();
        return spdxIDParent_;
      }
      /**
       * <pre>
       * The spdx id of the parent component or empty if collides with any license
       * </pre>
       *
       * <code>repeated string spdxIDParent = 1;</code>
       * @return The count of spdxIDParent.
       */
      public int getSpdxIDParentCount() {
        return spdxIDParent_.size();
      }
      /**
       * <pre>
       * The spdx id of the parent component or empty if collides with any license
       * </pre>
       *
       * <code>repeated string spdxIDParent = 1;</code>
       * @param index The index of the element to return.
       * @return The spdxIDParent at the given index.
       */
      public java.lang.String getSpdxIDParent(int index) {
        return spdxIDParent_.get(index);
      }
      /**
       * <pre>
       * The spdx id of the parent component or empty if collides with any license
       * </pre>
       *
       * <code>repeated string spdxIDParent = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the spdxIDParent at the given index.
       */
      public com.google.protobuf.ByteString
          getSpdxIDParentBytes(int index) {
        return spdxIDParent_.getByteString(index);
      }
      /**
       * <pre>
       * The spdx id of the parent component or empty if collides with any license
       * </pre>
       *
       * <code>repeated string spdxIDParent = 1;</code>
       * @param index The index to set the value at.
       * @param value The spdxIDParent to set.
       * @return This builder for chaining.
       */
      public Builder setSpdxIDParent(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSpdxIDParentIsMutable();
        spdxIDParent_.set(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The spdx id of the parent component or empty if collides with any license
       * </pre>
       *
       * <code>repeated string spdxIDParent = 1;</code>
       * @param value The spdxIDParent to add.
       * @return This builder for chaining.
       */
      public Builder addSpdxIDParent(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureSpdxIDParentIsMutable();
        spdxIDParent_.add(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The spdx id of the parent component or empty if collides with any license
       * </pre>
       *
       * <code>repeated string spdxIDParent = 1;</code>
       * @param values The spdxIDParent to add.
       * @return This builder for chaining.
       */
      public Builder addAllSpdxIDParent(
          java.lang.Iterable<java.lang.String> values) {
        ensureSpdxIDParentIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, spdxIDParent_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The spdx id of the parent component or empty if collides with any license
       * </pre>
       *
       * <code>repeated string spdxIDParent = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpdxIDParent() {
        spdxIDParent_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The spdx id of the parent component or empty if collides with any license
       * </pre>
       *
       * <code>repeated string spdxIDParent = 1;</code>
       * @param value The bytes of the spdxIDParent to add.
       * @return This builder for chaining.
       */
      public Builder addSpdxIDParentBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureSpdxIDParentIsMutable();
        spdxIDParent_.add(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object spdxIDChild_ = "";
      /**
       * <pre>
       * The spdx id of the child component
       * </pre>
       *
       * <code>string spdxIDChild = 2;</code>
       * @return The spdxIDChild.
       */
      public java.lang.String getSpdxIDChild() {
        java.lang.Object ref = spdxIDChild_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          spdxIDChild_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The spdx id of the child component
       * </pre>
       *
       * <code>string spdxIDChild = 2;</code>
       * @return The bytes for spdxIDChild.
       */
      public com.google.protobuf.ByteString
          getSpdxIDChildBytes() {
        java.lang.Object ref = spdxIDChild_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          spdxIDChild_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The spdx id of the child component
       * </pre>
       *
       * <code>string spdxIDChild = 2;</code>
       * @param value The spdxIDChild to set.
       * @return This builder for chaining.
       */
      public Builder setSpdxIDChild(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        spdxIDChild_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The spdx id of the child component
       * </pre>
       *
       * <code>string spdxIDChild = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpdxIDChild() {
        spdxIDChild_ = getDefaultInstance().getSpdxIDChild();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The spdx id of the child component
       * </pre>
       *
       * <code>string spdxIDChild = 2;</code>
       * @param value The bytes for spdxIDChild to set.
       * @return This builder for chaining.
       */
      public Builder setSpdxIDChildBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        spdxIDChild_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private boolean forApplication_ ;
      /**
       * <pre>
       * If this collision is also true for if the parent is an application.
       * </pre>
       *
       * <code>bool forApplication = 3;</code>
       * @return The forApplication.
       */
      @java.lang.Override
      public boolean getForApplication() {
        return forApplication_;
      }
      /**
       * <pre>
       * If this collision is also true for if the parent is an application.
       * </pre>
       *
       * <code>bool forApplication = 3;</code>
       * @param value The forApplication to set.
       * @return This builder for chaining.
       */
      public Builder setForApplication(boolean value) {

        forApplication_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If this collision is also true for if the parent is an application.
       * </pre>
       *
       * <code>bool forApplication = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearForApplication() {
        bitField0_ = (bitField0_ & ~0x00000004);
        forApplication_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object cause_ = "";
      /**
       * <pre>
       * The cause of the license collision
       * </pre>
       *
       * <code>optional string cause = 4;</code>
       * @return Whether the cause field is set.
       */
      public boolean hasCause() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The cause of the license collision
       * </pre>
       *
       * <code>optional string cause = 4;</code>
       * @return The cause.
       */
      public java.lang.String getCause() {
        java.lang.Object ref = cause_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          cause_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The cause of the license collision
       * </pre>
       *
       * <code>optional string cause = 4;</code>
       * @return The bytes for cause.
       */
      public com.google.protobuf.ByteString
          getCauseBytes() {
        java.lang.Object ref = cause_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          cause_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The cause of the license collision
       * </pre>
       *
       * <code>optional string cause = 4;</code>
       * @param value The cause to set.
       * @return This builder for chaining.
       */
      public Builder setCause(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        cause_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The cause of the license collision
       * </pre>
       *
       * <code>optional string cause = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearCause() {
        cause_ = getDefaultInstance().getCause();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The cause of the license collision
       * </pre>
       *
       * <code>optional string cause = 4;</code>
       * @param value The bytes for cause to set.
       * @return This builder for chaining.
       */
      public Builder setCauseBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        cause_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList parentExclusion_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureParentExclusionIsMutable() {
        if (!parentExclusion_.isModifiable()) {
          parentExclusion_ = new com.google.protobuf.LazyStringArrayList(parentExclusion_);
        }
        bitField0_ |= 0x00000010;
      }
      /**
       * <pre>
       * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
       * </pre>
       *
       * <code>repeated string parentExclusion = 5;</code>
       * @return A list containing the parentExclusion.
       */
      public com.google.protobuf.ProtocolStringList
          getParentExclusionList() {
        parentExclusion_.makeImmutable();
        return parentExclusion_;
      }
      /**
       * <pre>
       * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
       * </pre>
       *
       * <code>repeated string parentExclusion = 5;</code>
       * @return The count of parentExclusion.
       */
      public int getParentExclusionCount() {
        return parentExclusion_.size();
      }
      /**
       * <pre>
       * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
       * </pre>
       *
       * <code>repeated string parentExclusion = 5;</code>
       * @param index The index of the element to return.
       * @return The parentExclusion at the given index.
       */
      public java.lang.String getParentExclusion(int index) {
        return parentExclusion_.get(index);
      }
      /**
       * <pre>
       * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
       * </pre>
       *
       * <code>repeated string parentExclusion = 5;</code>
       * @param index The index of the value to return.
       * @return The bytes of the parentExclusion at the given index.
       */
      public com.google.protobuf.ByteString
          getParentExclusionBytes(int index) {
        return parentExclusion_.getByteString(index);
      }
      /**
       * <pre>
       * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
       * </pre>
       *
       * <code>repeated string parentExclusion = 5;</code>
       * @param index The index to set the value at.
       * @param value The parentExclusion to set.
       * @return This builder for chaining.
       */
      public Builder setParentExclusion(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureParentExclusionIsMutable();
        parentExclusion_.set(index, value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
       * </pre>
       *
       * <code>repeated string parentExclusion = 5;</code>
       * @param value The parentExclusion to add.
       * @return This builder for chaining.
       */
      public Builder addParentExclusion(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureParentExclusionIsMutable();
        parentExclusion_.add(value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
       * </pre>
       *
       * <code>repeated string parentExclusion = 5;</code>
       * @param values The parentExclusion to add.
       * @return This builder for chaining.
       */
      public Builder addAllParentExclusion(
          java.lang.Iterable<java.lang.String> values) {
        ensureParentExclusionIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, parentExclusion_);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
       * </pre>
       *
       * <code>repeated string parentExclusion = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearParentExclusion() {
        parentExclusion_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only if the parent is null, the parent exclusion. That means all the licenses that will be allowed to be a parent.
       * </pre>
       *
       * <code>repeated string parentExclusion = 5;</code>
       * @param value The bytes of the parentExclusion to add.
       * @return This builder for chaining.
       */
      public Builder addParentExclusionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureParentExclusionIsMutable();
        parentExclusion_.add(value);
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dependencyCrawler.LicenseCollision)
    }

    // @@protoc_insertion_point(class_scope:dependencyCrawler.LicenseCollision)
    private static final dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision();
    }

    public static dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LicenseCollision>
        PARSER = new com.google.protobuf.AbstractParser<LicenseCollision>() {
      @java.lang.Override
      public LicenseCollision parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<LicenseCollision> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LicenseCollision> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dependencyCrawler.LicenseCollisionSpecificationOuterClass.LicenseCollision getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dependencyCrawler_LicenseCollisionSpecification_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dependencyCrawler_LicenseCollisionSpecification_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dependencyCrawler_LicenseCollision_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dependencyCrawler_LicenseCollision_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n%license-collision-specification.proto\022" +
      "\021dependencyCrawler\"_\n\035LicenseCollisionSp" +
      "ecification\022>\n\021licenseCollisions\030\001 \003(\0132#" +
      ".dependencyCrawler.LicenseCollision\"\214\001\n\020" +
      "LicenseCollision\022\024\n\014spdxIDParent\030\001 \003(\t\022\023" +
      "\n\013spdxIDChild\030\002 \001(\t\022\026\n\016forApplication\030\003 " +
      "\001(\010\022\022\n\005cause\030\004 \001(\tH\000\210\001\001\022\027\n\017parentExclusi" +
      "on\030\005 \003(\tB\010\n\006_causeb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_dependencyCrawler_LicenseCollisionSpecification_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dependencyCrawler_LicenseCollisionSpecification_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dependencyCrawler_LicenseCollisionSpecification_descriptor,
        new java.lang.String[] { "LicenseCollisions", });
    internal_static_dependencyCrawler_LicenseCollision_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dependencyCrawler_LicenseCollision_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dependencyCrawler_LicenseCollision_descriptor,
        new java.lang.String[] { "SpdxIDParent", "SpdxIDChild", "ForApplication", "Cause", "ParentExclusion", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}

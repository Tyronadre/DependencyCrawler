// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: vex.proto
// Protobuf Java Version: 4.27.0-rc1

package cyclonedx.vex;

public final class VexOuterClass {
  private VexOuterClass() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 0,
      /* suffix= */ "-rc1",
      VexOuterClass.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Textual representation of the severity of the vulnerability adopted by the risk analysis method.
   * </pre>
   *
   * Protobuf enum {@code cyclonedx.vex.Severity}
   */
  public enum Severity
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NONE = 0;</code>
     */
    NONE(0),
    /**
     * <code>LOW = 1;</code>
     */
    LOW(1),
    /**
     * <code>MEDIUM = 2;</code>
     */
    MEDIUM(2),
    /**
     * <code>HIGH = 3;</code>
     */
    HIGH(3),
    /**
     * <code>CRITICAL = 4;</code>
     */
    CRITICAL(4),
    /**
     * <code>UNKNOWN = 5;</code>
     */
    UNKNOWN(5),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 27,
        /* patch= */ 0,
        /* suffix= */ "-rc1",
        Severity.class.getName());
    }
    /**
     * <code>NONE = 0;</code>
     */
    public static final int NONE_VALUE = 0;
    /**
     * <code>LOW = 1;</code>
     */
    public static final int LOW_VALUE = 1;
    /**
     * <code>MEDIUM = 2;</code>
     */
    public static final int MEDIUM_VALUE = 2;
    /**
     * <code>HIGH = 3;</code>
     */
    public static final int HIGH_VALUE = 3;
    /**
     * <code>CRITICAL = 4;</code>
     */
    public static final int CRITICAL_VALUE = 4;
    /**
     * <code>UNKNOWN = 5;</code>
     */
    public static final int UNKNOWN_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Severity valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Severity forNumber(int value) {
      switch (value) {
        case 0: return NONE;
        case 1: return LOW;
        case 2: return MEDIUM;
        case 3: return HIGH;
        case 4: return CRITICAL;
        case 5: return UNKNOWN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Severity>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Severity> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Severity>() {
            public Severity findValueByNumber(int number) {
              return Severity.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return cyclonedx.vex.VexOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final Severity[] VALUES = values();

    public static Severity valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Severity(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:cyclonedx.vex.Severity)
  }

  /**
   * <pre>
   * Specifies the risk scoring methodology/standard used.
   * </pre>
   *
   * Protobuf enum {@code cyclonedx.vex.ScoreSource}
   */
  public enum ScoreSource
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CVSSv2 = 0;</code>
     */
    CVSSv2(0),
    /**
     * <code>CVSSv3 = 1;</code>
     */
    CVSSv3(1),
    /**
     * <code>OWASP_RISK = 2;</code>
     */
    OWASP_RISK(2),
    /**
     * <code>OPEN_FAIR = 3;</code>
     */
    OPEN_FAIR(3),
    /**
     * <code>OTHER = 4;</code>
     */
    OTHER(4),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 27,
        /* patch= */ 0,
        /* suffix= */ "-rc1",
        ScoreSource.class.getName());
    }
    /**
     * <code>CVSSv2 = 0;</code>
     */
    public static final int CVSSv2_VALUE = 0;
    /**
     * <code>CVSSv3 = 1;</code>
     */
    public static final int CVSSv3_VALUE = 1;
    /**
     * <code>OWASP_RISK = 2;</code>
     */
    public static final int OWASP_RISK_VALUE = 2;
    /**
     * <code>OPEN_FAIR = 3;</code>
     */
    public static final int OPEN_FAIR_VALUE = 3;
    /**
     * <code>OTHER = 4;</code>
     */
    public static final int OTHER_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ScoreSource valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ScoreSource forNumber(int value) {
      switch (value) {
        case 0: return CVSSv2;
        case 1: return CVSSv3;
        case 2: return OWASP_RISK;
        case 3: return OPEN_FAIR;
        case 4: return OTHER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ScoreSource>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ScoreSource> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ScoreSource>() {
            public ScoreSource findValueByNumber(int number) {
              return ScoreSource.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return cyclonedx.vex.VexOuterClass.getDescriptor().getEnumTypes().get(1);
    }

    private static final ScoreSource[] VALUES = values();

    public static ScoreSource valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ScoreSource(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:cyclonedx.vex.ScoreSource)
  }

  public interface CweOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.vex.Cwe)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 cwe = 1;</code>
     * @return The cwe.
     */
    int getCwe();
  }
  /**
   * <pre>
   * Integer representation of a Common Weaknesses Enumerations (CWE).
   * </pre>
   *
   * Protobuf type {@code cyclonedx.vex.Cwe}
   */
  public static final class Cwe extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.vex.Cwe)
      CweOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 27,
        /* patch= */ 0,
        /* suffix= */ "-rc1",
        Cwe.class.getName());
    }
    // Use Cwe.newBuilder() to construct.
    private Cwe(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Cwe() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Cwe_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Cwe_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.vex.VexOuterClass.Cwe.class, cyclonedx.vex.VexOuterClass.Cwe.Builder.class);
    }

    public static final int CWE_FIELD_NUMBER = 1;
    private int cwe_ = 0;
    /**
     * <code>int32 cwe = 1;</code>
     * @return The cwe.
     */
    @java.lang.Override
    public int getCwe() {
      return cwe_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (cwe_ != 0) {
        output.writeInt32(1, cwe_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (cwe_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cwe_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.vex.VexOuterClass.Cwe)) {
        return super.equals(obj);
      }
      cyclonedx.vex.VexOuterClass.Cwe other = (cyclonedx.vex.VexOuterClass.Cwe) obj;

      if (getCwe()
          != other.getCwe()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CWE_FIELD_NUMBER;
      hash = (53 * hash) + getCwe();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.vex.VexOuterClass.Cwe parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Cwe parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Cwe parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Cwe parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Cwe parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Cwe parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Cwe parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.vex.VexOuterClass.Cwe parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.vex.VexOuterClass.Cwe parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.vex.VexOuterClass.Cwe parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Cwe parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.vex.VexOuterClass.Cwe parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.vex.VexOuterClass.Cwe prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Integer representation of a Common Weaknesses Enumerations (CWE).
     * </pre>
     *
     * Protobuf type {@code cyclonedx.vex.Cwe}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.vex.Cwe)
        cyclonedx.vex.VexOuterClass.CweOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Cwe_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Cwe_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.vex.VexOuterClass.Cwe.class, cyclonedx.vex.VexOuterClass.Cwe.Builder.class);
      }

      // Construct using cyclonedx.vex.VexOuterClass.Cwe.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        cwe_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Cwe_descriptor;
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Cwe getDefaultInstanceForType() {
        return cyclonedx.vex.VexOuterClass.Cwe.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Cwe build() {
        cyclonedx.vex.VexOuterClass.Cwe result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Cwe buildPartial() {
        cyclonedx.vex.VexOuterClass.Cwe result = new cyclonedx.vex.VexOuterClass.Cwe(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.vex.VexOuterClass.Cwe result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.cwe_ = cwe_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.vex.VexOuterClass.Cwe) {
          return mergeFrom((cyclonedx.vex.VexOuterClass.Cwe)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.vex.VexOuterClass.Cwe other) {
        if (other == cyclonedx.vex.VexOuterClass.Cwe.getDefaultInstance()) return this;
        if (other.getCwe() != 0) {
          setCwe(other.getCwe());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                cwe_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int cwe_ ;
      /**
       * <code>int32 cwe = 1;</code>
       * @return The cwe.
       */
      @java.lang.Override
      public int getCwe() {
        return cwe_;
      }
      /**
       * <code>int32 cwe = 1;</code>
       * @param value The cwe to set.
       * @return This builder for chaining.
       */
      public Builder setCwe(int value) {

        cwe_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 cwe = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCwe() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cwe_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.vex.Cwe)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.vex.Cwe)
    private static final cyclonedx.vex.VexOuterClass.Cwe DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.vex.VexOuterClass.Cwe();
    }

    public static cyclonedx.vex.VexOuterClass.Cwe getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Cwe>
        PARSER = new com.google.protobuf.AbstractParser<Cwe>() {
      @java.lang.Override
      public Cwe parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Cwe> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Cwe> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.Cwe getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ScoreOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.vex.Score)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The base score of the security vulnerability (Refer CVSS standard for example).
     * </pre>
     *
     * <code>double base = 1;</code>
     * @return The base.
     */
    double getBase();

    /**
     * <pre>
     * The impact subscore of the security vulnerability (Refer CVSS standard for example).
     * </pre>
     *
     * <code>double impact = 2;</code>
     * @return The impact.
     */
    double getImpact();

    /**
     * <pre>
     * The exploitability subscore of the security vulnerability (Refer CVSS standard for example).
     * </pre>
     *
     * <code>double exploitability = 3;</code>
     * @return The exploitability.
     */
    double getExploitability();
  }
  /**
   * <pre>
   * Defines the numerical risk score of a vulnerability.
   * </pre>
   *
   * Protobuf type {@code cyclonedx.vex.Score}
   */
  public static final class Score extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.vex.Score)
      ScoreOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 27,
        /* patch= */ 0,
        /* suffix= */ "-rc1",
        Score.class.getName());
    }
    // Use Score.newBuilder() to construct.
    private Score(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Score() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Score_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Score_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.vex.VexOuterClass.Score.class, cyclonedx.vex.VexOuterClass.Score.Builder.class);
    }

    public static final int BASE_FIELD_NUMBER = 1;
    private double base_ = 0D;
    /**
     * <pre>
     * The base score of the security vulnerability (Refer CVSS standard for example).
     * </pre>
     *
     * <code>double base = 1;</code>
     * @return The base.
     */
    @java.lang.Override
    public double getBase() {
      return base_;
    }

    public static final int IMPACT_FIELD_NUMBER = 2;
    private double impact_ = 0D;
    /**
     * <pre>
     * The impact subscore of the security vulnerability (Refer CVSS standard for example).
     * </pre>
     *
     * <code>double impact = 2;</code>
     * @return The impact.
     */
    @java.lang.Override
    public double getImpact() {
      return impact_;
    }

    public static final int EXPLOITABILITY_FIELD_NUMBER = 3;
    private double exploitability_ = 0D;
    /**
     * <pre>
     * The exploitability subscore of the security vulnerability (Refer CVSS standard for example).
     * </pre>
     *
     * <code>double exploitability = 3;</code>
     * @return The exploitability.
     */
    @java.lang.Override
    public double getExploitability() {
      return exploitability_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (java.lang.Double.doubleToRawLongBits(base_) != 0) {
        output.writeDouble(1, base_);
      }
      if (java.lang.Double.doubleToRawLongBits(impact_) != 0) {
        output.writeDouble(2, impact_);
      }
      if (java.lang.Double.doubleToRawLongBits(exploitability_) != 0) {
        output.writeDouble(3, exploitability_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Double.doubleToRawLongBits(base_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, base_);
      }
      if (java.lang.Double.doubleToRawLongBits(impact_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, impact_);
      }
      if (java.lang.Double.doubleToRawLongBits(exploitability_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, exploitability_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.vex.VexOuterClass.Score)) {
        return super.equals(obj);
      }
      cyclonedx.vex.VexOuterClass.Score other = (cyclonedx.vex.VexOuterClass.Score) obj;

      if (java.lang.Double.doubleToLongBits(getBase())
          != java.lang.Double.doubleToLongBits(
              other.getBase())) return false;
      if (java.lang.Double.doubleToLongBits(getImpact())
          != java.lang.Double.doubleToLongBits(
              other.getImpact())) return false;
      if (java.lang.Double.doubleToLongBits(getExploitability())
          != java.lang.Double.doubleToLongBits(
              other.getExploitability())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + BASE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getBase()));
      hash = (37 * hash) + IMPACT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getImpact()));
      hash = (37 * hash) + EXPLOITABILITY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getExploitability()));
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.vex.VexOuterClass.Score parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Score parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Score parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Score parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Score parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Score parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Score parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.vex.VexOuterClass.Score parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.vex.VexOuterClass.Score parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.vex.VexOuterClass.Score parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Score parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.vex.VexOuterClass.Score parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.vex.VexOuterClass.Score prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines the numerical risk score of a vulnerability.
     * </pre>
     *
     * Protobuf type {@code cyclonedx.vex.Score}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.vex.Score)
        cyclonedx.vex.VexOuterClass.ScoreOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Score_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Score_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.vex.VexOuterClass.Score.class, cyclonedx.vex.VexOuterClass.Score.Builder.class);
      }

      // Construct using cyclonedx.vex.VexOuterClass.Score.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        base_ = 0D;
        impact_ = 0D;
        exploitability_ = 0D;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Score_descriptor;
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Score getDefaultInstanceForType() {
        return cyclonedx.vex.VexOuterClass.Score.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Score build() {
        cyclonedx.vex.VexOuterClass.Score result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Score buildPartial() {
        cyclonedx.vex.VexOuterClass.Score result = new cyclonedx.vex.VexOuterClass.Score(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.vex.VexOuterClass.Score result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.base_ = base_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.impact_ = impact_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.exploitability_ = exploitability_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.vex.VexOuterClass.Score) {
          return mergeFrom((cyclonedx.vex.VexOuterClass.Score)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.vex.VexOuterClass.Score other) {
        if (other == cyclonedx.vex.VexOuterClass.Score.getDefaultInstance()) return this;
        if (other.getBase() != 0D) {
          setBase(other.getBase());
        }
        if (other.getImpact() != 0D) {
          setImpact(other.getImpact());
        }
        if (other.getExploitability() != 0D) {
          setExploitability(other.getExploitability());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {
                base_ = input.readDouble();
                bitField0_ |= 0x00000001;
                break;
              } // case 9
              case 17: {
                impact_ = input.readDouble();
                bitField0_ |= 0x00000002;
                break;
              } // case 17
              case 25: {
                exploitability_ = input.readDouble();
                bitField0_ |= 0x00000004;
                break;
              } // case 25
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private double base_ ;
      /**
       * <pre>
       * The base score of the security vulnerability (Refer CVSS standard for example).
       * </pre>
       *
       * <code>double base = 1;</code>
       * @return The base.
       */
      @java.lang.Override
      public double getBase() {
        return base_;
      }
      /**
       * <pre>
       * The base score of the security vulnerability (Refer CVSS standard for example).
       * </pre>
       *
       * <code>double base = 1;</code>
       * @param value The base to set.
       * @return This builder for chaining.
       */
      public Builder setBase(double value) {

        base_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The base score of the security vulnerability (Refer CVSS standard for example).
       * </pre>
       *
       * <code>double base = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearBase() {
        bitField0_ = (bitField0_ & ~0x00000001);
        base_ = 0D;
        onChanged();
        return this;
      }

      private double impact_ ;
      /**
       * <pre>
       * The impact subscore of the security vulnerability (Refer CVSS standard for example).
       * </pre>
       *
       * <code>double impact = 2;</code>
       * @return The impact.
       */
      @java.lang.Override
      public double getImpact() {
        return impact_;
      }
      /**
       * <pre>
       * The impact subscore of the security vulnerability (Refer CVSS standard for example).
       * </pre>
       *
       * <code>double impact = 2;</code>
       * @param value The impact to set.
       * @return This builder for chaining.
       */
      public Builder setImpact(double value) {

        impact_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The impact subscore of the security vulnerability (Refer CVSS standard for example).
       * </pre>
       *
       * <code>double impact = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearImpact() {
        bitField0_ = (bitField0_ & ~0x00000002);
        impact_ = 0D;
        onChanged();
        return this;
      }

      private double exploitability_ ;
      /**
       * <pre>
       * The exploitability subscore of the security vulnerability (Refer CVSS standard for example).
       * </pre>
       *
       * <code>double exploitability = 3;</code>
       * @return The exploitability.
       */
      @java.lang.Override
      public double getExploitability() {
        return exploitability_;
      }
      /**
       * <pre>
       * The exploitability subscore of the security vulnerability (Refer CVSS standard for example).
       * </pre>
       *
       * <code>double exploitability = 3;</code>
       * @param value The exploitability to set.
       * @return This builder for chaining.
       */
      public Builder setExploitability(double value) {

        exploitability_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The exploitability subscore of the security vulnerability (Refer CVSS standard for example).
       * </pre>
       *
       * <code>double exploitability = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearExploitability() {
        bitField0_ = (bitField0_ & ~0x00000004);
        exploitability_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.vex.Score)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.vex.Score)
    private static final cyclonedx.vex.VexOuterClass.Score DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.vex.VexOuterClass.Score();
    }

    public static cyclonedx.vex.VexOuterClass.Score getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Score>
        PARSER = new com.google.protobuf.AbstractParser<Score>() {
      @java.lang.Override
      public Score parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Score> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Score> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.Score getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RatingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.vex.Rating)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.cyclonedx.vex.Score score = 1;</code>
     * @return Whether the score field is set.
     */
    boolean hasScore();
    /**
     * <code>.cyclonedx.vex.Score score = 1;</code>
     * @return The score.
     */
    cyclonedx.vex.VexOuterClass.Score getScore();
    /**
     * <code>.cyclonedx.vex.Score score = 1;</code>
     */
    cyclonedx.vex.VexOuterClass.ScoreOrBuilder getScoreOrBuilder();

    /**
     * <pre>
     * Textual representation of the severity of the vulnerability.
     * </pre>
     *
     * <code>.cyclonedx.vex.Severity severity = 2;</code>
     * @return The enum numeric value on the wire for severity.
     */
    int getSeverityValue();
    /**
     * <pre>
     * Textual representation of the severity of the vulnerability.
     * </pre>
     *
     * <code>.cyclonedx.vex.Severity severity = 2;</code>
     * @return The severity.
     */
    cyclonedx.vex.VexOuterClass.Severity getSeverity();

    /**
     * <pre>
     * Specifies the risk scoring methodology/standard used.
     * </pre>
     *
     * <code>.cyclonedx.vex.ScoreSource method = 3;</code>
     * @return The enum numeric value on the wire for method.
     */
    int getMethodValue();
    /**
     * <pre>
     * Specifies the risk scoring methodology/standard used.
     * </pre>
     *
     * <code>.cyclonedx.vex.ScoreSource method = 3;</code>
     * @return The method.
     */
    cyclonedx.vex.VexOuterClass.ScoreSource getMethod();

    /**
     * <pre>
     * Textual representation of the metric values used to score the vulnerability.
     * </pre>
     *
     * <code>string vector = 4;</code>
     * @return The vector.
     */
    java.lang.String getVector();
    /**
     * <pre>
     * Textual representation of the metric values used to score the vulnerability.
     * </pre>
     *
     * <code>string vector = 4;</code>
     * @return The bytes for vector.
     */
    com.google.protobuf.ByteString
        getVectorBytes();
  }
  /**
   * <pre>
   * Defines the risk rating of a vulnerability.
   * </pre>
   *
   * Protobuf type {@code cyclonedx.vex.Rating}
   */
  public static final class Rating extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.vex.Rating)
      RatingOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 27,
        /* patch= */ 0,
        /* suffix= */ "-rc1",
        Rating.class.getName());
    }
    // Use Rating.newBuilder() to construct.
    private Rating(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Rating() {
      severity_ = 0;
      method_ = 0;
      vector_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Rating_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Rating_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.vex.VexOuterClass.Rating.class, cyclonedx.vex.VexOuterClass.Rating.Builder.class);
    }

    private int bitField0_;
    public static final int SCORE_FIELD_NUMBER = 1;
    private cyclonedx.vex.VexOuterClass.Score score_;
    /**
     * <code>.cyclonedx.vex.Score score = 1;</code>
     * @return Whether the score field is set.
     */
    @java.lang.Override
    public boolean hasScore() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.cyclonedx.vex.Score score = 1;</code>
     * @return The score.
     */
    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.Score getScore() {
      return score_ == null ? cyclonedx.vex.VexOuterClass.Score.getDefaultInstance() : score_;
    }
    /**
     * <code>.cyclonedx.vex.Score score = 1;</code>
     */
    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.ScoreOrBuilder getScoreOrBuilder() {
      return score_ == null ? cyclonedx.vex.VexOuterClass.Score.getDefaultInstance() : score_;
    }

    public static final int SEVERITY_FIELD_NUMBER = 2;
    private int severity_ = 0;
    /**
     * <pre>
     * Textual representation of the severity of the vulnerability.
     * </pre>
     *
     * <code>.cyclonedx.vex.Severity severity = 2;</code>
     * @return The enum numeric value on the wire for severity.
     */
    @java.lang.Override public int getSeverityValue() {
      return severity_;
    }
    /**
     * <pre>
     * Textual representation of the severity of the vulnerability.
     * </pre>
     *
     * <code>.cyclonedx.vex.Severity severity = 2;</code>
     * @return The severity.
     */
    @java.lang.Override public cyclonedx.vex.VexOuterClass.Severity getSeverity() {
      cyclonedx.vex.VexOuterClass.Severity result = cyclonedx.vex.VexOuterClass.Severity.forNumber(severity_);
      return result == null ? cyclonedx.vex.VexOuterClass.Severity.UNRECOGNIZED : result;
    }

    public static final int METHOD_FIELD_NUMBER = 3;
    private int method_ = 0;
    /**
     * <pre>
     * Specifies the risk scoring methodology/standard used.
     * </pre>
     *
     * <code>.cyclonedx.vex.ScoreSource method = 3;</code>
     * @return The enum numeric value on the wire for method.
     */
    @java.lang.Override public int getMethodValue() {
      return method_;
    }
    /**
     * <pre>
     * Specifies the risk scoring methodology/standard used.
     * </pre>
     *
     * <code>.cyclonedx.vex.ScoreSource method = 3;</code>
     * @return The method.
     */
    @java.lang.Override public cyclonedx.vex.VexOuterClass.ScoreSource getMethod() {
      cyclonedx.vex.VexOuterClass.ScoreSource result = cyclonedx.vex.VexOuterClass.ScoreSource.forNumber(method_);
      return result == null ? cyclonedx.vex.VexOuterClass.ScoreSource.UNRECOGNIZED : result;
    }

    public static final int VECTOR_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object vector_ = "";
    /**
     * <pre>
     * Textual representation of the metric values used to score the vulnerability.
     * </pre>
     *
     * <code>string vector = 4;</code>
     * @return The vector.
     */
    @java.lang.Override
    public java.lang.String getVector() {
      java.lang.Object ref = vector_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        vector_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Textual representation of the metric values used to score the vulnerability.
     * </pre>
     *
     * <code>string vector = 4;</code>
     * @return The bytes for vector.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVectorBytes() {
      java.lang.Object ref = vector_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vector_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getScore());
      }
      if (severity_ != cyclonedx.vex.VexOuterClass.Severity.NONE.getNumber()) {
        output.writeEnum(2, severity_);
      }
      if (method_ != cyclonedx.vex.VexOuterClass.ScoreSource.CVSSv2.getNumber()) {
        output.writeEnum(3, method_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(vector_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 4, vector_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getScore());
      }
      if (severity_ != cyclonedx.vex.VexOuterClass.Severity.NONE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, severity_);
      }
      if (method_ != cyclonedx.vex.VexOuterClass.ScoreSource.CVSSv2.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, method_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(vector_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(4, vector_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.vex.VexOuterClass.Rating)) {
        return super.equals(obj);
      }
      cyclonedx.vex.VexOuterClass.Rating other = (cyclonedx.vex.VexOuterClass.Rating) obj;

      if (hasScore() != other.hasScore()) return false;
      if (hasScore()) {
        if (!getScore()
            .equals(other.getScore())) return false;
      }
      if (severity_ != other.severity_) return false;
      if (method_ != other.method_) return false;
      if (!getVector()
          .equals(other.getVector())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasScore()) {
        hash = (37 * hash) + SCORE_FIELD_NUMBER;
        hash = (53 * hash) + getScore().hashCode();
      }
      hash = (37 * hash) + SEVERITY_FIELD_NUMBER;
      hash = (53 * hash) + severity_;
      hash = (37 * hash) + METHOD_FIELD_NUMBER;
      hash = (53 * hash) + method_;
      hash = (37 * hash) + VECTOR_FIELD_NUMBER;
      hash = (53 * hash) + getVector().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.vex.VexOuterClass.Rating parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Rating parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Rating parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Rating parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Rating parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Rating parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Rating parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.vex.VexOuterClass.Rating parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.vex.VexOuterClass.Rating parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.vex.VexOuterClass.Rating parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Rating parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.vex.VexOuterClass.Rating parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.vex.VexOuterClass.Rating prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines the risk rating of a vulnerability.
     * </pre>
     *
     * Protobuf type {@code cyclonedx.vex.Rating}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.vex.Rating)
        cyclonedx.vex.VexOuterClass.RatingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Rating_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Rating_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.vex.VexOuterClass.Rating.class, cyclonedx.vex.VexOuterClass.Rating.Builder.class);
      }

      // Construct using cyclonedx.vex.VexOuterClass.Rating.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getScoreFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        score_ = null;
        if (scoreBuilder_ != null) {
          scoreBuilder_.dispose();
          scoreBuilder_ = null;
        }
        severity_ = 0;
        method_ = 0;
        vector_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Rating_descriptor;
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Rating getDefaultInstanceForType() {
        return cyclonedx.vex.VexOuterClass.Rating.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Rating build() {
        cyclonedx.vex.VexOuterClass.Rating result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Rating buildPartial() {
        cyclonedx.vex.VexOuterClass.Rating result = new cyclonedx.vex.VexOuterClass.Rating(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.vex.VexOuterClass.Rating result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.score_ = scoreBuilder_ == null
              ? score_
              : scoreBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.severity_ = severity_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.method_ = method_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.vector_ = vector_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.vex.VexOuterClass.Rating) {
          return mergeFrom((cyclonedx.vex.VexOuterClass.Rating)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.vex.VexOuterClass.Rating other) {
        if (other == cyclonedx.vex.VexOuterClass.Rating.getDefaultInstance()) return this;
        if (other.hasScore()) {
          mergeScore(other.getScore());
        }
        if (other.severity_ != 0) {
          setSeverityValue(other.getSeverityValue());
        }
        if (other.method_ != 0) {
          setMethodValue(other.getMethodValue());
        }
        if (!other.getVector().isEmpty()) {
          vector_ = other.vector_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getScoreFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                severity_ = input.readEnum();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                method_ = input.readEnum();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                vector_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private cyclonedx.vex.VexOuterClass.Score score_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.vex.VexOuterClass.Score, cyclonedx.vex.VexOuterClass.Score.Builder, cyclonedx.vex.VexOuterClass.ScoreOrBuilder> scoreBuilder_;
      /**
       * <code>.cyclonedx.vex.Score score = 1;</code>
       * @return Whether the score field is set.
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.cyclonedx.vex.Score score = 1;</code>
       * @return The score.
       */
      public cyclonedx.vex.VexOuterClass.Score getScore() {
        if (scoreBuilder_ == null) {
          return score_ == null ? cyclonedx.vex.VexOuterClass.Score.getDefaultInstance() : score_;
        } else {
          return scoreBuilder_.getMessage();
        }
      }
      /**
       * <code>.cyclonedx.vex.Score score = 1;</code>
       */
      public Builder setScore(cyclonedx.vex.VexOuterClass.Score value) {
        if (scoreBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          score_ = value;
        } else {
          scoreBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.cyclonedx.vex.Score score = 1;</code>
       */
      public Builder setScore(
          cyclonedx.vex.VexOuterClass.Score.Builder builderForValue) {
        if (scoreBuilder_ == null) {
          score_ = builderForValue.build();
        } else {
          scoreBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.cyclonedx.vex.Score score = 1;</code>
       */
      public Builder mergeScore(cyclonedx.vex.VexOuterClass.Score value) {
        if (scoreBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            score_ != null &&
            score_ != cyclonedx.vex.VexOuterClass.Score.getDefaultInstance()) {
            getScoreBuilder().mergeFrom(value);
          } else {
            score_ = value;
          }
        } else {
          scoreBuilder_.mergeFrom(value);
        }
        if (score_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>.cyclonedx.vex.Score score = 1;</code>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000001);
        score_ = null;
        if (scoreBuilder_ != null) {
          scoreBuilder_.dispose();
          scoreBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.cyclonedx.vex.Score score = 1;</code>
       */
      public cyclonedx.vex.VexOuterClass.Score.Builder getScoreBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getScoreFieldBuilder().getBuilder();
      }
      /**
       * <code>.cyclonedx.vex.Score score = 1;</code>
       */
      public cyclonedx.vex.VexOuterClass.ScoreOrBuilder getScoreOrBuilder() {
        if (scoreBuilder_ != null) {
          return scoreBuilder_.getMessageOrBuilder();
        } else {
          return score_ == null ?
              cyclonedx.vex.VexOuterClass.Score.getDefaultInstance() : score_;
        }
      }
      /**
       * <code>.cyclonedx.vex.Score score = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.vex.VexOuterClass.Score, cyclonedx.vex.VexOuterClass.Score.Builder, cyclonedx.vex.VexOuterClass.ScoreOrBuilder> 
          getScoreFieldBuilder() {
        if (scoreBuilder_ == null) {
          scoreBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.vex.VexOuterClass.Score, cyclonedx.vex.VexOuterClass.Score.Builder, cyclonedx.vex.VexOuterClass.ScoreOrBuilder>(
                  getScore(),
                  getParentForChildren(),
                  isClean());
          score_ = null;
        }
        return scoreBuilder_;
      }

      private int severity_ = 0;
      /**
       * <pre>
       * Textual representation of the severity of the vulnerability.
       * </pre>
       *
       * <code>.cyclonedx.vex.Severity severity = 2;</code>
       * @return The enum numeric value on the wire for severity.
       */
      @java.lang.Override public int getSeverityValue() {
        return severity_;
      }
      /**
       * <pre>
       * Textual representation of the severity of the vulnerability.
       * </pre>
       *
       * <code>.cyclonedx.vex.Severity severity = 2;</code>
       * @param value The enum numeric value on the wire for severity to set.
       * @return This builder for chaining.
       */
      public Builder setSeverityValue(int value) {
        severity_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Textual representation of the severity of the vulnerability.
       * </pre>
       *
       * <code>.cyclonedx.vex.Severity severity = 2;</code>
       * @return The severity.
       */
      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Severity getSeverity() {
        cyclonedx.vex.VexOuterClass.Severity result = cyclonedx.vex.VexOuterClass.Severity.forNumber(severity_);
        return result == null ? cyclonedx.vex.VexOuterClass.Severity.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Textual representation of the severity of the vulnerability.
       * </pre>
       *
       * <code>.cyclonedx.vex.Severity severity = 2;</code>
       * @param value The severity to set.
       * @return This builder for chaining.
       */
      public Builder setSeverity(cyclonedx.vex.VexOuterClass.Severity value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        severity_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Textual representation of the severity of the vulnerability.
       * </pre>
       *
       * <code>.cyclonedx.vex.Severity severity = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSeverity() {
        bitField0_ = (bitField0_ & ~0x00000002);
        severity_ = 0;
        onChanged();
        return this;
      }

      private int method_ = 0;
      /**
       * <pre>
       * Specifies the risk scoring methodology/standard used.
       * </pre>
       *
       * <code>.cyclonedx.vex.ScoreSource method = 3;</code>
       * @return The enum numeric value on the wire for method.
       */
      @java.lang.Override public int getMethodValue() {
        return method_;
      }
      /**
       * <pre>
       * Specifies the risk scoring methodology/standard used.
       * </pre>
       *
       * <code>.cyclonedx.vex.ScoreSource method = 3;</code>
       * @param value The enum numeric value on the wire for method to set.
       * @return This builder for chaining.
       */
      public Builder setMethodValue(int value) {
        method_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the risk scoring methodology/standard used.
       * </pre>
       *
       * <code>.cyclonedx.vex.ScoreSource method = 3;</code>
       * @return The method.
       */
      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.ScoreSource getMethod() {
        cyclonedx.vex.VexOuterClass.ScoreSource result = cyclonedx.vex.VexOuterClass.ScoreSource.forNumber(method_);
        return result == null ? cyclonedx.vex.VexOuterClass.ScoreSource.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Specifies the risk scoring methodology/standard used.
       * </pre>
       *
       * <code>.cyclonedx.vex.ScoreSource method = 3;</code>
       * @param value The method to set.
       * @return This builder for chaining.
       */
      public Builder setMethod(cyclonedx.vex.VexOuterClass.ScoreSource value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        method_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the risk scoring methodology/standard used.
       * </pre>
       *
       * <code>.cyclonedx.vex.ScoreSource method = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMethod() {
        bitField0_ = (bitField0_ & ~0x00000004);
        method_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object vector_ = "";
      /**
       * <pre>
       * Textual representation of the metric values used to score the vulnerability.
       * </pre>
       *
       * <code>string vector = 4;</code>
       * @return The vector.
       */
      public java.lang.String getVector() {
        java.lang.Object ref = vector_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          vector_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Textual representation of the metric values used to score the vulnerability.
       * </pre>
       *
       * <code>string vector = 4;</code>
       * @return The bytes for vector.
       */
      public com.google.protobuf.ByteString
          getVectorBytes() {
        java.lang.Object ref = vector_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vector_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Textual representation of the metric values used to score the vulnerability.
       * </pre>
       *
       * <code>string vector = 4;</code>
       * @param value The vector to set.
       * @return This builder for chaining.
       */
      public Builder setVector(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        vector_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Textual representation of the metric values used to score the vulnerability.
       * </pre>
       *
       * <code>string vector = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearVector() {
        vector_ = getDefaultInstance().getVector();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Textual representation of the metric values used to score the vulnerability.
       * </pre>
       *
       * <code>string vector = 4;</code>
       * @param value The bytes for vector to set.
       * @return This builder for chaining.
       */
      public Builder setVectorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        vector_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.vex.Rating)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.vex.Rating)
    private static final cyclonedx.vex.VexOuterClass.Rating DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.vex.VexOuterClass.Rating();
    }

    public static cyclonedx.vex.VexOuterClass.Rating getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Rating>
        PARSER = new com.google.protobuf.AbstractParser<Rating>() {
      @java.lang.Override
      public Rating parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Rating> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Rating> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.Rating getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SourceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.vex.Source)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The url of the vulnerability documentation as provided by the source.
     * </pre>
     *
     * <code>string url = 1;</code>
     * @return The url.
     */
    java.lang.String getUrl();
    /**
     * <pre>
     * The url of the vulnerability documentation as provided by the source.
     * </pre>
     *
     * <code>string url = 1;</code>
     * @return The bytes for url.
     */
    com.google.protobuf.ByteString
        getUrlBytes();

    /**
     * <pre>
     * The name of the source.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The name of the source.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();
  }
  /**
   * <pre>
   * The source of the vulnerability where it is documented.
   * </pre>
   *
   * Protobuf type {@code cyclonedx.vex.Source}
   */
  public static final class Source extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.vex.Source)
      SourceOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 27,
        /* patch= */ 0,
        /* suffix= */ "-rc1",
        Source.class.getName());
    }
    // Use Source.newBuilder() to construct.
    private Source(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Source() {
      url_ = "";
      name_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Source_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Source_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.vex.VexOuterClass.Source.class, cyclonedx.vex.VexOuterClass.Source.Builder.class);
    }

    public static final int URL_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object url_ = "";
    /**
     * <pre>
     * The url of the vulnerability documentation as provided by the source.
     * </pre>
     *
     * <code>string url = 1;</code>
     * @return The url.
     */
    @java.lang.Override
    public java.lang.String getUrl() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        url_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The url of the vulnerability documentation as provided by the source.
     * </pre>
     *
     * <code>string url = 1;</code>
     * @return The bytes for url.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUrlBytes() {
      java.lang.Object ref = url_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        url_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of the source.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the source.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(url_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, url_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, name_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(url_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, url_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, name_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.vex.VexOuterClass.Source)) {
        return super.equals(obj);
      }
      cyclonedx.vex.VexOuterClass.Source other = (cyclonedx.vex.VexOuterClass.Source) obj;

      if (!getUrl()
          .equals(other.getUrl())) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + URL_FIELD_NUMBER;
      hash = (53 * hash) + getUrl().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.vex.VexOuterClass.Source parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Source parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Source parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Source parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Source parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Source parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Source parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.vex.VexOuterClass.Source parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.vex.VexOuterClass.Source parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.vex.VexOuterClass.Source parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Source parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.vex.VexOuterClass.Source parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.vex.VexOuterClass.Source prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The source of the vulnerability where it is documented.
     * </pre>
     *
     * Protobuf type {@code cyclonedx.vex.Source}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.vex.Source)
        cyclonedx.vex.VexOuterClass.SourceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Source_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Source_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.vex.VexOuterClass.Source.class, cyclonedx.vex.VexOuterClass.Source.Builder.class);
      }

      // Construct using cyclonedx.vex.VexOuterClass.Source.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        url_ = "";
        name_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Source_descriptor;
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Source getDefaultInstanceForType() {
        return cyclonedx.vex.VexOuterClass.Source.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Source build() {
        cyclonedx.vex.VexOuterClass.Source result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Source buildPartial() {
        cyclonedx.vex.VexOuterClass.Source result = new cyclonedx.vex.VexOuterClass.Source(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(cyclonedx.vex.VexOuterClass.Source result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.url_ = url_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.name_ = name_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.vex.VexOuterClass.Source) {
          return mergeFrom((cyclonedx.vex.VexOuterClass.Source)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.vex.VexOuterClass.Source other) {
        if (other == cyclonedx.vex.VexOuterClass.Source.getDefaultInstance()) return this;
        if (!other.getUrl().isEmpty()) {
          url_ = other.url_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                url_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object url_ = "";
      /**
       * <pre>
       * The url of the vulnerability documentation as provided by the source.
       * </pre>
       *
       * <code>string url = 1;</code>
       * @return The url.
       */
      public java.lang.String getUrl() {
        java.lang.Object ref = url_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          url_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The url of the vulnerability documentation as provided by the source.
       * </pre>
       *
       * <code>string url = 1;</code>
       * @return The bytes for url.
       */
      public com.google.protobuf.ByteString
          getUrlBytes() {
        java.lang.Object ref = url_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          url_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The url of the vulnerability documentation as provided by the source.
       * </pre>
       *
       * <code>string url = 1;</code>
       * @param value The url to set.
       * @return This builder for chaining.
       */
      public Builder setUrl(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        url_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The url of the vulnerability documentation as provided by the source.
       * </pre>
       *
       * <code>string url = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUrl() {
        url_ = getDefaultInstance().getUrl();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The url of the vulnerability documentation as provided by the source.
       * </pre>
       *
       * <code>string url = 1;</code>
       * @param value The bytes for url to set.
       * @return This builder for chaining.
       */
      public Builder setUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        url_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The name of the source.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the source.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the source.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the source.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the source.
       * </pre>
       *
       * <code>string name = 2;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.vex.Source)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.vex.Source)
    private static final cyclonedx.vex.VexOuterClass.Source DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.vex.VexOuterClass.Source();
    }

    public static cyclonedx.vex.VexOuterClass.Source getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Source>
        PARSER = new com.google.protobuf.AbstractParser<Source>() {
      @java.lang.Override
      public Source parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Source> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Source> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.Source getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface VulnerabilityOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.vex.Vulnerability)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * References a component by the components bom-ref attribute.
     * </pre>
     *
     * <code>string ref = 1;</code>
     * @return The ref.
     */
    java.lang.String getRef();
    /**
     * <pre>
     * References a component by the components bom-ref attribute.
     * </pre>
     *
     * <code>string ref = 1;</code>
     * @return The bytes for ref.
     */
    com.google.protobuf.ByteString
        getRefBytes();

    /**
     * <pre>
     * The id of the vulnerability as defined by the risk scoring methodology.
     * </pre>
     *
     * <code>string id = 2;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * The id of the vulnerability as defined by the risk scoring methodology.
     * </pre>
     *
     * <code>string id = 2;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * The source of the vulnerability where it is documented.
     * </pre>
     *
     * <code>.cyclonedx.vex.Source source = 3;</code>
     * @return Whether the source field is set.
     */
    boolean hasSource();
    /**
     * <pre>
     * The source of the vulnerability where it is documented.
     * </pre>
     *
     * <code>.cyclonedx.vex.Source source = 3;</code>
     * @return The source.
     */
    cyclonedx.vex.VexOuterClass.Source getSource();
    /**
     * <pre>
     * The source of the vulnerability where it is documented.
     * </pre>
     *
     * <code>.cyclonedx.vex.Source source = 3;</code>
     */
    cyclonedx.vex.VexOuterClass.SourceOrBuilder getSourceOrBuilder();

    /**
     * <pre>
     * List of the vulnerability ratings as defined by various risk rating methodologies.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
     */
    java.util.List<cyclonedx.vex.VexOuterClass.Rating> 
        getRatingsList();
    /**
     * <pre>
     * List of the vulnerability ratings as defined by various risk rating methodologies.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
     */
    cyclonedx.vex.VexOuterClass.Rating getRatings(int index);
    /**
     * <pre>
     * List of the vulnerability ratings as defined by various risk rating methodologies.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
     */
    int getRatingsCount();
    /**
     * <pre>
     * List of the vulnerability ratings as defined by various risk rating methodologies.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
     */
    java.util.List<? extends cyclonedx.vex.VexOuterClass.RatingOrBuilder> 
        getRatingsOrBuilderList();
    /**
     * <pre>
     * List of the vulnerability ratings as defined by various risk rating methodologies.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
     */
    cyclonedx.vex.VexOuterClass.RatingOrBuilder getRatingsOrBuilder(
        int index);

    /**
     * <pre>
     * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
     */
    java.util.List<cyclonedx.vex.VexOuterClass.Cwe> 
        getCwesList();
    /**
     * <pre>
     * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
     */
    cyclonedx.vex.VexOuterClass.Cwe getCwes(int index);
    /**
     * <pre>
     * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
     */
    int getCwesCount();
    /**
     * <pre>
     * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
     */
    java.util.List<? extends cyclonedx.vex.VexOuterClass.CweOrBuilder> 
        getCwesOrBuilderList();
    /**
     * <pre>
     * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
     */
    cyclonedx.vex.VexOuterClass.CweOrBuilder getCwesOrBuilder(
        int index);

    /**
     * <pre>
     * Description of the vulnerability as provided by the source organization.
     * </pre>
     *
     * <code>string description = 6;</code>
     * @return The description.
     */
    java.lang.String getDescription();
    /**
     * <pre>
     * Description of the vulnerability as provided by the source organization.
     * </pre>
     *
     * <code>string description = 6;</code>
     * @return The bytes for description.
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();

    /**
     * <pre>
     * List of recommendations of how the particular vulnerability can be avoided/mitigated.
     * </pre>
     *
     * <code>repeated string recommendations = 7;</code>
     * @return A list containing the recommendations.
     */
    java.util.List<java.lang.String>
        getRecommendationsList();
    /**
     * <pre>
     * List of recommendations of how the particular vulnerability can be avoided/mitigated.
     * </pre>
     *
     * <code>repeated string recommendations = 7;</code>
     * @return The count of recommendations.
     */
    int getRecommendationsCount();
    /**
     * <pre>
     * List of recommendations of how the particular vulnerability can be avoided/mitigated.
     * </pre>
     *
     * <code>repeated string recommendations = 7;</code>
     * @param index The index of the element to return.
     * @return The recommendations at the given index.
     */
    java.lang.String getRecommendations(int index);
    /**
     * <pre>
     * List of recommendations of how the particular vulnerability can be avoided/mitigated.
     * </pre>
     *
     * <code>repeated string recommendations = 7;</code>
     * @param index The index of the value to return.
     * @return The bytes of the recommendations at the given index.
     */
    com.google.protobuf.ByteString
        getRecommendationsBytes(int index);

    /**
     * <pre>
     * Published advisories of the vulnerability if provided.
     * </pre>
     *
     * <code>repeated string advisories = 8;</code>
     * @return A list containing the advisories.
     */
    java.util.List<java.lang.String>
        getAdvisoriesList();
    /**
     * <pre>
     * Published advisories of the vulnerability if provided.
     * </pre>
     *
     * <code>repeated string advisories = 8;</code>
     * @return The count of advisories.
     */
    int getAdvisoriesCount();
    /**
     * <pre>
     * Published advisories of the vulnerability if provided.
     * </pre>
     *
     * <code>repeated string advisories = 8;</code>
     * @param index The index of the element to return.
     * @return The advisories at the given index.
     */
    java.lang.String getAdvisories(int index);
    /**
     * <pre>
     * Published advisories of the vulnerability if provided.
     * </pre>
     *
     * <code>repeated string advisories = 8;</code>
     * @param index The index of the value to return.
     * @return The bytes of the advisories at the given index.
     */
    com.google.protobuf.ByteString
        getAdvisoriesBytes(int index);
  }
  /**
   * <pre>
   * Defines the structure of a vulnerability.
   * </pre>
   *
   * Protobuf type {@code cyclonedx.vex.Vulnerability}
   */
  public static final class Vulnerability extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.vex.Vulnerability)
      VulnerabilityOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 27,
        /* patch= */ 0,
        /* suffix= */ "-rc1",
        Vulnerability.class.getName());
    }
    // Use Vulnerability.newBuilder() to construct.
    private Vulnerability(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Vulnerability() {
      ref_ = "";
      id_ = "";
      ratings_ = java.util.Collections.emptyList();
      cwes_ = java.util.Collections.emptyList();
      description_ = "";
      recommendations_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      advisories_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Vulnerability_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Vulnerability_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.vex.VexOuterClass.Vulnerability.class, cyclonedx.vex.VexOuterClass.Vulnerability.Builder.class);
    }

    private int bitField0_;
    public static final int REF_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object ref_ = "";
    /**
     * <pre>
     * References a component by the components bom-ref attribute.
     * </pre>
     *
     * <code>string ref = 1;</code>
     * @return The ref.
     */
    @java.lang.Override
    public java.lang.String getRef() {
      java.lang.Object ref = ref_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        ref_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * References a component by the components bom-ref attribute.
     * </pre>
     *
     * <code>string ref = 1;</code>
     * @return The bytes for ref.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRefBytes() {
      java.lang.Object ref = ref_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ref_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ID_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object id_ = "";
    /**
     * <pre>
     * The id of the vulnerability as defined by the risk scoring methodology.
     * </pre>
     *
     * <code>string id = 2;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The id of the vulnerability as defined by the risk scoring methodology.
     * </pre>
     *
     * <code>string id = 2;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SOURCE_FIELD_NUMBER = 3;
    private cyclonedx.vex.VexOuterClass.Source source_;
    /**
     * <pre>
     * The source of the vulnerability where it is documented.
     * </pre>
     *
     * <code>.cyclonedx.vex.Source source = 3;</code>
     * @return Whether the source field is set.
     */
    @java.lang.Override
    public boolean hasSource() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The source of the vulnerability where it is documented.
     * </pre>
     *
     * <code>.cyclonedx.vex.Source source = 3;</code>
     * @return The source.
     */
    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.Source getSource() {
      return source_ == null ? cyclonedx.vex.VexOuterClass.Source.getDefaultInstance() : source_;
    }
    /**
     * <pre>
     * The source of the vulnerability where it is documented.
     * </pre>
     *
     * <code>.cyclonedx.vex.Source source = 3;</code>
     */
    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.SourceOrBuilder getSourceOrBuilder() {
      return source_ == null ? cyclonedx.vex.VexOuterClass.Source.getDefaultInstance() : source_;
    }

    public static final int RATINGS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.vex.VexOuterClass.Rating> ratings_;
    /**
     * <pre>
     * List of the vulnerability ratings as defined by various risk rating methodologies.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.vex.VexOuterClass.Rating> getRatingsList() {
      return ratings_;
    }
    /**
     * <pre>
     * List of the vulnerability ratings as defined by various risk rating methodologies.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.vex.VexOuterClass.RatingOrBuilder> 
        getRatingsOrBuilderList() {
      return ratings_;
    }
    /**
     * <pre>
     * List of the vulnerability ratings as defined by various risk rating methodologies.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
     */
    @java.lang.Override
    public int getRatingsCount() {
      return ratings_.size();
    }
    /**
     * <pre>
     * List of the vulnerability ratings as defined by various risk rating methodologies.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
     */
    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.Rating getRatings(int index) {
      return ratings_.get(index);
    }
    /**
     * <pre>
     * List of the vulnerability ratings as defined by various risk rating methodologies.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
     */
    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.RatingOrBuilder getRatingsOrBuilder(
        int index) {
      return ratings_.get(index);
    }

    public static final int CWES_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.vex.VexOuterClass.Cwe> cwes_;
    /**
     * <pre>
     * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.vex.VexOuterClass.Cwe> getCwesList() {
      return cwes_;
    }
    /**
     * <pre>
     * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.vex.VexOuterClass.CweOrBuilder> 
        getCwesOrBuilderList() {
      return cwes_;
    }
    /**
     * <pre>
     * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
     */
    @java.lang.Override
    public int getCwesCount() {
      return cwes_.size();
    }
    /**
     * <pre>
     * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
     */
    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.Cwe getCwes(int index) {
      return cwes_.get(index);
    }
    /**
     * <pre>
     * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
     * </pre>
     *
     * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
     */
    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.CweOrBuilder getCwesOrBuilder(
        int index) {
      return cwes_.get(index);
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private volatile java.lang.Object description_ = "";
    /**
     * <pre>
     * Description of the vulnerability as provided by the source organization.
     * </pre>
     *
     * <code>string description = 6;</code>
     * @return The description.
     */
    @java.lang.Override
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        description_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Description of the vulnerability as provided by the source organization.
     * </pre>
     *
     * <code>string description = 6;</code>
     * @return The bytes for description.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RECOMMENDATIONS_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList recommendations_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * List of recommendations of how the particular vulnerability can be avoided/mitigated.
     * </pre>
     *
     * <code>repeated string recommendations = 7;</code>
     * @return A list containing the recommendations.
     */
    public com.google.protobuf.ProtocolStringList
        getRecommendationsList() {
      return recommendations_;
    }
    /**
     * <pre>
     * List of recommendations of how the particular vulnerability can be avoided/mitigated.
     * </pre>
     *
     * <code>repeated string recommendations = 7;</code>
     * @return The count of recommendations.
     */
    public int getRecommendationsCount() {
      return recommendations_.size();
    }
    /**
     * <pre>
     * List of recommendations of how the particular vulnerability can be avoided/mitigated.
     * </pre>
     *
     * <code>repeated string recommendations = 7;</code>
     * @param index The index of the element to return.
     * @return The recommendations at the given index.
     */
    public java.lang.String getRecommendations(int index) {
      return recommendations_.get(index);
    }
    /**
     * <pre>
     * List of recommendations of how the particular vulnerability can be avoided/mitigated.
     * </pre>
     *
     * <code>repeated string recommendations = 7;</code>
     * @param index The index of the value to return.
     * @return The bytes of the recommendations at the given index.
     */
    public com.google.protobuf.ByteString
        getRecommendationsBytes(int index) {
      return recommendations_.getByteString(index);
    }

    public static final int ADVISORIES_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList advisories_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * Published advisories of the vulnerability if provided.
     * </pre>
     *
     * <code>repeated string advisories = 8;</code>
     * @return A list containing the advisories.
     */
    public com.google.protobuf.ProtocolStringList
        getAdvisoriesList() {
      return advisories_;
    }
    /**
     * <pre>
     * Published advisories of the vulnerability if provided.
     * </pre>
     *
     * <code>repeated string advisories = 8;</code>
     * @return The count of advisories.
     */
    public int getAdvisoriesCount() {
      return advisories_.size();
    }
    /**
     * <pre>
     * Published advisories of the vulnerability if provided.
     * </pre>
     *
     * <code>repeated string advisories = 8;</code>
     * @param index The index of the element to return.
     * @return The advisories at the given index.
     */
    public java.lang.String getAdvisories(int index) {
      return advisories_.get(index);
    }
    /**
     * <pre>
     * Published advisories of the vulnerability if provided.
     * </pre>
     *
     * <code>repeated string advisories = 8;</code>
     * @param index The index of the value to return.
     * @return The bytes of the advisories at the given index.
     */
    public com.google.protobuf.ByteString
        getAdvisoriesBytes(int index) {
      return advisories_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(ref_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, ref_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(id_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, id_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(3, getSource());
      }
      for (int i = 0; i < ratings_.size(); i++) {
        output.writeMessage(4, ratings_.get(i));
      }
      for (int i = 0; i < cwes_.size(); i++) {
        output.writeMessage(5, cwes_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(description_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 6, description_);
      }
      for (int i = 0; i < recommendations_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 7, recommendations_.getRaw(i));
      }
      for (int i = 0; i < advisories_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 8, advisories_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(ref_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, ref_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(id_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, id_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getSource());
      }
      for (int i = 0; i < ratings_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, ratings_.get(i));
      }
      for (int i = 0; i < cwes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cwes_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(description_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(6, description_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < recommendations_.size(); i++) {
          dataSize += computeStringSizeNoTag(recommendations_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getRecommendationsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < advisories_.size(); i++) {
          dataSize += computeStringSizeNoTag(advisories_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getAdvisoriesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.vex.VexOuterClass.Vulnerability)) {
        return super.equals(obj);
      }
      cyclonedx.vex.VexOuterClass.Vulnerability other = (cyclonedx.vex.VexOuterClass.Vulnerability) obj;

      if (!getRef()
          .equals(other.getRef())) return false;
      if (!getId()
          .equals(other.getId())) return false;
      if (hasSource() != other.hasSource()) return false;
      if (hasSource()) {
        if (!getSource()
            .equals(other.getSource())) return false;
      }
      if (!getRatingsList()
          .equals(other.getRatingsList())) return false;
      if (!getCwesList()
          .equals(other.getCwesList())) return false;
      if (!getDescription()
          .equals(other.getDescription())) return false;
      if (!getRecommendationsList()
          .equals(other.getRecommendationsList())) return false;
      if (!getAdvisoriesList()
          .equals(other.getAdvisoriesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + REF_FIELD_NUMBER;
      hash = (53 * hash) + getRef().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      if (hasSource()) {
        hash = (37 * hash) + SOURCE_FIELD_NUMBER;
        hash = (53 * hash) + getSource().hashCode();
      }
      if (getRatingsCount() > 0) {
        hash = (37 * hash) + RATINGS_FIELD_NUMBER;
        hash = (53 * hash) + getRatingsList().hashCode();
      }
      if (getCwesCount() > 0) {
        hash = (37 * hash) + CWES_FIELD_NUMBER;
        hash = (53 * hash) + getCwesList().hashCode();
      }
      hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
      hash = (53 * hash) + getDescription().hashCode();
      if (getRecommendationsCount() > 0) {
        hash = (37 * hash) + RECOMMENDATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getRecommendationsList().hashCode();
      }
      if (getAdvisoriesCount() > 0) {
        hash = (37 * hash) + ADVISORIES_FIELD_NUMBER;
        hash = (53 * hash) + getAdvisoriesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.vex.VexOuterClass.Vulnerability parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Vulnerability parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Vulnerability parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Vulnerability parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Vulnerability parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Vulnerability parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Vulnerability parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.vex.VexOuterClass.Vulnerability parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.vex.VexOuterClass.Vulnerability parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.vex.VexOuterClass.Vulnerability parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Vulnerability parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.vex.VexOuterClass.Vulnerability parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.vex.VexOuterClass.Vulnerability prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines the structure of a vulnerability.
     * </pre>
     *
     * Protobuf type {@code cyclonedx.vex.Vulnerability}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.vex.Vulnerability)
        cyclonedx.vex.VexOuterClass.VulnerabilityOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Vulnerability_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Vulnerability_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.vex.VexOuterClass.Vulnerability.class, cyclonedx.vex.VexOuterClass.Vulnerability.Builder.class);
      }

      // Construct using cyclonedx.vex.VexOuterClass.Vulnerability.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getSourceFieldBuilder();
          getRatingsFieldBuilder();
          getCwesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        ref_ = "";
        id_ = "";
        source_ = null;
        if (sourceBuilder_ != null) {
          sourceBuilder_.dispose();
          sourceBuilder_ = null;
        }
        if (ratingsBuilder_ == null) {
          ratings_ = java.util.Collections.emptyList();
        } else {
          ratings_ = null;
          ratingsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cwesBuilder_ == null) {
          cwes_ = java.util.Collections.emptyList();
        } else {
          cwes_ = null;
          cwesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        description_ = "";
        recommendations_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        advisories_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Vulnerability_descriptor;
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Vulnerability getDefaultInstanceForType() {
        return cyclonedx.vex.VexOuterClass.Vulnerability.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Vulnerability build() {
        cyclonedx.vex.VexOuterClass.Vulnerability result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Vulnerability buildPartial() {
        cyclonedx.vex.VexOuterClass.Vulnerability result = new cyclonedx.vex.VexOuterClass.Vulnerability(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(cyclonedx.vex.VexOuterClass.Vulnerability result) {
        if (ratingsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            ratings_ = java.util.Collections.unmodifiableList(ratings_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.ratings_ = ratings_;
        } else {
          result.ratings_ = ratingsBuilder_.build();
        }
        if (cwesBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            cwes_ = java.util.Collections.unmodifiableList(cwes_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cwes_ = cwes_;
        } else {
          result.cwes_ = cwesBuilder_.build();
        }
      }

      private void buildPartial0(cyclonedx.vex.VexOuterClass.Vulnerability result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.ref_ = ref_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.id_ = id_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.source_ = sourceBuilder_ == null
              ? source_
              : sourceBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.description_ = description_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          recommendations_.makeImmutable();
          result.recommendations_ = recommendations_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          advisories_.makeImmutable();
          result.advisories_ = advisories_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.vex.VexOuterClass.Vulnerability) {
          return mergeFrom((cyclonedx.vex.VexOuterClass.Vulnerability)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.vex.VexOuterClass.Vulnerability other) {
        if (other == cyclonedx.vex.VexOuterClass.Vulnerability.getDefaultInstance()) return this;
        if (!other.getRef().isEmpty()) {
          ref_ = other.ref_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasSource()) {
          mergeSource(other.getSource());
        }
        if (ratingsBuilder_ == null) {
          if (!other.ratings_.isEmpty()) {
            if (ratings_.isEmpty()) {
              ratings_ = other.ratings_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureRatingsIsMutable();
              ratings_.addAll(other.ratings_);
            }
            onChanged();
          }
        } else {
          if (!other.ratings_.isEmpty()) {
            if (ratingsBuilder_.isEmpty()) {
              ratingsBuilder_.dispose();
              ratingsBuilder_ = null;
              ratings_ = other.ratings_;
              bitField0_ = (bitField0_ & ~0x00000008);
              ratingsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRatingsFieldBuilder() : null;
            } else {
              ratingsBuilder_.addAllMessages(other.ratings_);
            }
          }
        }
        if (cwesBuilder_ == null) {
          if (!other.cwes_.isEmpty()) {
            if (cwes_.isEmpty()) {
              cwes_ = other.cwes_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCwesIsMutable();
              cwes_.addAll(other.cwes_);
            }
            onChanged();
          }
        } else {
          if (!other.cwes_.isEmpty()) {
            if (cwesBuilder_.isEmpty()) {
              cwesBuilder_.dispose();
              cwesBuilder_ = null;
              cwes_ = other.cwes_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cwesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCwesFieldBuilder() : null;
            } else {
              cwesBuilder_.addAllMessages(other.cwes_);
            }
          }
        }
        if (!other.getDescription().isEmpty()) {
          description_ = other.description_;
          bitField0_ |= 0x00000020;
          onChanged();
        }
        if (!other.recommendations_.isEmpty()) {
          if (recommendations_.isEmpty()) {
            recommendations_ = other.recommendations_;
            bitField0_ |= 0x00000040;
          } else {
            ensureRecommendationsIsMutable();
            recommendations_.addAll(other.recommendations_);
          }
          onChanged();
        }
        if (!other.advisories_.isEmpty()) {
          if (advisories_.isEmpty()) {
            advisories_ = other.advisories_;
            bitField0_ |= 0x00000080;
          } else {
            ensureAdvisoriesIsMutable();
            advisories_.addAll(other.advisories_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                ref_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                id_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getSourceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                cyclonedx.vex.VexOuterClass.Rating m =
                    input.readMessage(
                        cyclonedx.vex.VexOuterClass.Rating.parser(),
                        extensionRegistry);
                if (ratingsBuilder_ == null) {
                  ensureRatingsIsMutable();
                  ratings_.add(m);
                } else {
                  ratingsBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 42: {
                cyclonedx.vex.VexOuterClass.Cwe m =
                    input.readMessage(
                        cyclonedx.vex.VexOuterClass.Cwe.parser(),
                        extensionRegistry);
                if (cwesBuilder_ == null) {
                  ensureCwesIsMutable();
                  cwes_.add(m);
                } else {
                  cwesBuilder_.addMessage(m);
                }
                break;
              } // case 42
              case 50: {
                description_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 58: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureRecommendationsIsMutable();
                recommendations_.add(s);
                break;
              } // case 58
              case 66: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureAdvisoriesIsMutable();
                advisories_.add(s);
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object ref_ = "";
      /**
       * <pre>
       * References a component by the components bom-ref attribute.
       * </pre>
       *
       * <code>string ref = 1;</code>
       * @return The ref.
       */
      public java.lang.String getRef() {
        java.lang.Object ref = ref_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          ref_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * References a component by the components bom-ref attribute.
       * </pre>
       *
       * <code>string ref = 1;</code>
       * @return The bytes for ref.
       */
      public com.google.protobuf.ByteString
          getRefBytes() {
        java.lang.Object ref = ref_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ref_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * References a component by the components bom-ref attribute.
       * </pre>
       *
       * <code>string ref = 1;</code>
       * @param value The ref to set.
       * @return This builder for chaining.
       */
      public Builder setRef(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ref_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * References a component by the components bom-ref attribute.
       * </pre>
       *
       * <code>string ref = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearRef() {
        ref_ = getDefaultInstance().getRef();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * References a component by the components bom-ref attribute.
       * </pre>
       *
       * <code>string ref = 1;</code>
       * @param value The bytes for ref to set.
       * @return This builder for chaining.
       */
      public Builder setRefBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ref_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * The id of the vulnerability as defined by the risk scoring methodology.
       * </pre>
       *
       * <code>string id = 2;</code>
       * @return The id.
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The id of the vulnerability as defined by the risk scoring methodology.
       * </pre>
       *
       * <code>string id = 2;</code>
       * @return The bytes for id.
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The id of the vulnerability as defined by the risk scoring methodology.
       * </pre>
       *
       * <code>string id = 2;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        id_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The id of the vulnerability as defined by the risk scoring methodology.
       * </pre>
       *
       * <code>string id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        id_ = getDefaultInstance().getId();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The id of the vulnerability as defined by the risk scoring methodology.
       * </pre>
       *
       * <code>string id = 2;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        id_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private cyclonedx.vex.VexOuterClass.Source source_;
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.vex.VexOuterClass.Source, cyclonedx.vex.VexOuterClass.Source.Builder, cyclonedx.vex.VexOuterClass.SourceOrBuilder> sourceBuilder_;
      /**
       * <pre>
       * The source of the vulnerability where it is documented.
       * </pre>
       *
       * <code>.cyclonedx.vex.Source source = 3;</code>
       * @return Whether the source field is set.
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The source of the vulnerability where it is documented.
       * </pre>
       *
       * <code>.cyclonedx.vex.Source source = 3;</code>
       * @return The source.
       */
      public cyclonedx.vex.VexOuterClass.Source getSource() {
        if (sourceBuilder_ == null) {
          return source_ == null ? cyclonedx.vex.VexOuterClass.Source.getDefaultInstance() : source_;
        } else {
          return sourceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The source of the vulnerability where it is documented.
       * </pre>
       *
       * <code>.cyclonedx.vex.Source source = 3;</code>
       */
      public Builder setSource(cyclonedx.vex.VexOuterClass.Source value) {
        if (sourceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          source_ = value;
        } else {
          sourceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The source of the vulnerability where it is documented.
       * </pre>
       *
       * <code>.cyclonedx.vex.Source source = 3;</code>
       */
      public Builder setSource(
          cyclonedx.vex.VexOuterClass.Source.Builder builderForValue) {
        if (sourceBuilder_ == null) {
          source_ = builderForValue.build();
        } else {
          sourceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The source of the vulnerability where it is documented.
       * </pre>
       *
       * <code>.cyclonedx.vex.Source source = 3;</code>
       */
      public Builder mergeSource(cyclonedx.vex.VexOuterClass.Source value) {
        if (sourceBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            source_ != null &&
            source_ != cyclonedx.vex.VexOuterClass.Source.getDefaultInstance()) {
            getSourceBuilder().mergeFrom(value);
          } else {
            source_ = value;
          }
        } else {
          sourceBuilder_.mergeFrom(value);
        }
        if (source_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The source of the vulnerability where it is documented.
       * </pre>
       *
       * <code>.cyclonedx.vex.Source source = 3;</code>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00000004);
        source_ = null;
        if (sourceBuilder_ != null) {
          sourceBuilder_.dispose();
          sourceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The source of the vulnerability where it is documented.
       * </pre>
       *
       * <code>.cyclonedx.vex.Source source = 3;</code>
       */
      public cyclonedx.vex.VexOuterClass.Source.Builder getSourceBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getSourceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The source of the vulnerability where it is documented.
       * </pre>
       *
       * <code>.cyclonedx.vex.Source source = 3;</code>
       */
      public cyclonedx.vex.VexOuterClass.SourceOrBuilder getSourceOrBuilder() {
        if (sourceBuilder_ != null) {
          return sourceBuilder_.getMessageOrBuilder();
        } else {
          return source_ == null ?
              cyclonedx.vex.VexOuterClass.Source.getDefaultInstance() : source_;
        }
      }
      /**
       * <pre>
       * The source of the vulnerability where it is documented.
       * </pre>
       *
       * <code>.cyclonedx.vex.Source source = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cyclonedx.vex.VexOuterClass.Source, cyclonedx.vex.VexOuterClass.Source.Builder, cyclonedx.vex.VexOuterClass.SourceOrBuilder> 
          getSourceFieldBuilder() {
        if (sourceBuilder_ == null) {
          sourceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cyclonedx.vex.VexOuterClass.Source, cyclonedx.vex.VexOuterClass.Source.Builder, cyclonedx.vex.VexOuterClass.SourceOrBuilder>(
                  getSource(),
                  getParentForChildren(),
                  isClean());
          source_ = null;
        }
        return sourceBuilder_;
      }

      private java.util.List<cyclonedx.vex.VexOuterClass.Rating> ratings_ =
        java.util.Collections.emptyList();
      private void ensureRatingsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          ratings_ = new java.util.ArrayList<cyclonedx.vex.VexOuterClass.Rating>(ratings_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.vex.VexOuterClass.Rating, cyclonedx.vex.VexOuterClass.Rating.Builder, cyclonedx.vex.VexOuterClass.RatingOrBuilder> ratingsBuilder_;

      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public java.util.List<cyclonedx.vex.VexOuterClass.Rating> getRatingsList() {
        if (ratingsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(ratings_);
        } else {
          return ratingsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public int getRatingsCount() {
        if (ratingsBuilder_ == null) {
          return ratings_.size();
        } else {
          return ratingsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public cyclonedx.vex.VexOuterClass.Rating getRatings(int index) {
        if (ratingsBuilder_ == null) {
          return ratings_.get(index);
        } else {
          return ratingsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public Builder setRatings(
          int index, cyclonedx.vex.VexOuterClass.Rating value) {
        if (ratingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRatingsIsMutable();
          ratings_.set(index, value);
          onChanged();
        } else {
          ratingsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public Builder setRatings(
          int index, cyclonedx.vex.VexOuterClass.Rating.Builder builderForValue) {
        if (ratingsBuilder_ == null) {
          ensureRatingsIsMutable();
          ratings_.set(index, builderForValue.build());
          onChanged();
        } else {
          ratingsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public Builder addRatings(cyclonedx.vex.VexOuterClass.Rating value) {
        if (ratingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRatingsIsMutable();
          ratings_.add(value);
          onChanged();
        } else {
          ratingsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public Builder addRatings(
          int index, cyclonedx.vex.VexOuterClass.Rating value) {
        if (ratingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRatingsIsMutable();
          ratings_.add(index, value);
          onChanged();
        } else {
          ratingsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public Builder addRatings(
          cyclonedx.vex.VexOuterClass.Rating.Builder builderForValue) {
        if (ratingsBuilder_ == null) {
          ensureRatingsIsMutable();
          ratings_.add(builderForValue.build());
          onChanged();
        } else {
          ratingsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public Builder addRatings(
          int index, cyclonedx.vex.VexOuterClass.Rating.Builder builderForValue) {
        if (ratingsBuilder_ == null) {
          ensureRatingsIsMutable();
          ratings_.add(index, builderForValue.build());
          onChanged();
        } else {
          ratingsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public Builder addAllRatings(
          java.lang.Iterable<? extends cyclonedx.vex.VexOuterClass.Rating> values) {
        if (ratingsBuilder_ == null) {
          ensureRatingsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, ratings_);
          onChanged();
        } else {
          ratingsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public Builder clearRatings() {
        if (ratingsBuilder_ == null) {
          ratings_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          ratingsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public Builder removeRatings(int index) {
        if (ratingsBuilder_ == null) {
          ensureRatingsIsMutable();
          ratings_.remove(index);
          onChanged();
        } else {
          ratingsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public cyclonedx.vex.VexOuterClass.Rating.Builder getRatingsBuilder(
          int index) {
        return getRatingsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public cyclonedx.vex.VexOuterClass.RatingOrBuilder getRatingsOrBuilder(
          int index) {
        if (ratingsBuilder_ == null) {
          return ratings_.get(index);  } else {
          return ratingsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public java.util.List<? extends cyclonedx.vex.VexOuterClass.RatingOrBuilder> 
           getRatingsOrBuilderList() {
        if (ratingsBuilder_ != null) {
          return ratingsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(ratings_);
        }
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public cyclonedx.vex.VexOuterClass.Rating.Builder addRatingsBuilder() {
        return getRatingsFieldBuilder().addBuilder(
            cyclonedx.vex.VexOuterClass.Rating.getDefaultInstance());
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public cyclonedx.vex.VexOuterClass.Rating.Builder addRatingsBuilder(
          int index) {
        return getRatingsFieldBuilder().addBuilder(
            index, cyclonedx.vex.VexOuterClass.Rating.getDefaultInstance());
      }
      /**
       * <pre>
       * List of the vulnerability ratings as defined by various risk rating methodologies.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Rating ratings = 4;</code>
       */
      public java.util.List<cyclonedx.vex.VexOuterClass.Rating.Builder> 
           getRatingsBuilderList() {
        return getRatingsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.vex.VexOuterClass.Rating, cyclonedx.vex.VexOuterClass.Rating.Builder, cyclonedx.vex.VexOuterClass.RatingOrBuilder> 
          getRatingsFieldBuilder() {
        if (ratingsBuilder_ == null) {
          ratingsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.vex.VexOuterClass.Rating, cyclonedx.vex.VexOuterClass.Rating.Builder, cyclonedx.vex.VexOuterClass.RatingOrBuilder>(
                  ratings_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          ratings_ = null;
        }
        return ratingsBuilder_;
      }

      private java.util.List<cyclonedx.vex.VexOuterClass.Cwe> cwes_ =
        java.util.Collections.emptyList();
      private void ensureCwesIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          cwes_ = new java.util.ArrayList<cyclonedx.vex.VexOuterClass.Cwe>(cwes_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.vex.VexOuterClass.Cwe, cyclonedx.vex.VexOuterClass.Cwe.Builder, cyclonedx.vex.VexOuterClass.CweOrBuilder> cwesBuilder_;

      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public java.util.List<cyclonedx.vex.VexOuterClass.Cwe> getCwesList() {
        if (cwesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cwes_);
        } else {
          return cwesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public int getCwesCount() {
        if (cwesBuilder_ == null) {
          return cwes_.size();
        } else {
          return cwesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public cyclonedx.vex.VexOuterClass.Cwe getCwes(int index) {
        if (cwesBuilder_ == null) {
          return cwes_.get(index);
        } else {
          return cwesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public Builder setCwes(
          int index, cyclonedx.vex.VexOuterClass.Cwe value) {
        if (cwesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCwesIsMutable();
          cwes_.set(index, value);
          onChanged();
        } else {
          cwesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public Builder setCwes(
          int index, cyclonedx.vex.VexOuterClass.Cwe.Builder builderForValue) {
        if (cwesBuilder_ == null) {
          ensureCwesIsMutable();
          cwes_.set(index, builderForValue.build());
          onChanged();
        } else {
          cwesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public Builder addCwes(cyclonedx.vex.VexOuterClass.Cwe value) {
        if (cwesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCwesIsMutable();
          cwes_.add(value);
          onChanged();
        } else {
          cwesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public Builder addCwes(
          int index, cyclonedx.vex.VexOuterClass.Cwe value) {
        if (cwesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCwesIsMutable();
          cwes_.add(index, value);
          onChanged();
        } else {
          cwesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public Builder addCwes(
          cyclonedx.vex.VexOuterClass.Cwe.Builder builderForValue) {
        if (cwesBuilder_ == null) {
          ensureCwesIsMutable();
          cwes_.add(builderForValue.build());
          onChanged();
        } else {
          cwesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public Builder addCwes(
          int index, cyclonedx.vex.VexOuterClass.Cwe.Builder builderForValue) {
        if (cwesBuilder_ == null) {
          ensureCwesIsMutable();
          cwes_.add(index, builderForValue.build());
          onChanged();
        } else {
          cwesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public Builder addAllCwes(
          java.lang.Iterable<? extends cyclonedx.vex.VexOuterClass.Cwe> values) {
        if (cwesBuilder_ == null) {
          ensureCwesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, cwes_);
          onChanged();
        } else {
          cwesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public Builder clearCwes() {
        if (cwesBuilder_ == null) {
          cwes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cwesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public Builder removeCwes(int index) {
        if (cwesBuilder_ == null) {
          ensureCwesIsMutable();
          cwes_.remove(index);
          onChanged();
        } else {
          cwesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public cyclonedx.vex.VexOuterClass.Cwe.Builder getCwesBuilder(
          int index) {
        return getCwesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public cyclonedx.vex.VexOuterClass.CweOrBuilder getCwesOrBuilder(
          int index) {
        if (cwesBuilder_ == null) {
          return cwes_.get(index);  } else {
          return cwesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public java.util.List<? extends cyclonedx.vex.VexOuterClass.CweOrBuilder> 
           getCwesOrBuilderList() {
        if (cwesBuilder_ != null) {
          return cwesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cwes_);
        }
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public cyclonedx.vex.VexOuterClass.Cwe.Builder addCwesBuilder() {
        return getCwesFieldBuilder().addBuilder(
            cyclonedx.vex.VexOuterClass.Cwe.getDefaultInstance());
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public cyclonedx.vex.VexOuterClass.Cwe.Builder addCwesBuilder(
          int index) {
        return getCwesFieldBuilder().addBuilder(
            index, cyclonedx.vex.VexOuterClass.Cwe.getDefaultInstance());
      }
      /**
       * <pre>
       * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability.
       * </pre>
       *
       * <code>repeated .cyclonedx.vex.Cwe cwes = 5;</code>
       */
      public java.util.List<cyclonedx.vex.VexOuterClass.Cwe.Builder> 
           getCwesBuilderList() {
        return getCwesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.vex.VexOuterClass.Cwe, cyclonedx.vex.VexOuterClass.Cwe.Builder, cyclonedx.vex.VexOuterClass.CweOrBuilder> 
          getCwesFieldBuilder() {
        if (cwesBuilder_ == null) {
          cwesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.vex.VexOuterClass.Cwe, cyclonedx.vex.VexOuterClass.Cwe.Builder, cyclonedx.vex.VexOuterClass.CweOrBuilder>(
                  cwes_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          cwes_ = null;
        }
        return cwesBuilder_;
      }

      private java.lang.Object description_ = "";
      /**
       * <pre>
       * Description of the vulnerability as provided by the source organization.
       * </pre>
       *
       * <code>string description = 6;</code>
       * @return The description.
       */
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          description_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Description of the vulnerability as provided by the source organization.
       * </pre>
       *
       * <code>string description = 6;</code>
       * @return The bytes for description.
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Description of the vulnerability as provided by the source organization.
       * </pre>
       *
       * <code>string description = 6;</code>
       * @param value The description to set.
       * @return This builder for chaining.
       */
      public Builder setDescription(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        description_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Description of the vulnerability as provided by the source organization.
       * </pre>
       *
       * <code>string description = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearDescription() {
        description_ = getDefaultInstance().getDescription();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Description of the vulnerability as provided by the source organization.
       * </pre>
       *
       * <code>string description = 6;</code>
       * @param value The bytes for description to set.
       * @return This builder for chaining.
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        description_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList recommendations_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureRecommendationsIsMutable() {
        if (!recommendations_.isModifiable()) {
          recommendations_ = new com.google.protobuf.LazyStringArrayList(recommendations_);
        }
        bitField0_ |= 0x00000040;
      }
      /**
       * <pre>
       * List of recommendations of how the particular vulnerability can be avoided/mitigated.
       * </pre>
       *
       * <code>repeated string recommendations = 7;</code>
       * @return A list containing the recommendations.
       */
      public com.google.protobuf.ProtocolStringList
          getRecommendationsList() {
        recommendations_.makeImmutable();
        return recommendations_;
      }
      /**
       * <pre>
       * List of recommendations of how the particular vulnerability can be avoided/mitigated.
       * </pre>
       *
       * <code>repeated string recommendations = 7;</code>
       * @return The count of recommendations.
       */
      public int getRecommendationsCount() {
        return recommendations_.size();
      }
      /**
       * <pre>
       * List of recommendations of how the particular vulnerability can be avoided/mitigated.
       * </pre>
       *
       * <code>repeated string recommendations = 7;</code>
       * @param index The index of the element to return.
       * @return The recommendations at the given index.
       */
      public java.lang.String getRecommendations(int index) {
        return recommendations_.get(index);
      }
      /**
       * <pre>
       * List of recommendations of how the particular vulnerability can be avoided/mitigated.
       * </pre>
       *
       * <code>repeated string recommendations = 7;</code>
       * @param index The index of the value to return.
       * @return The bytes of the recommendations at the given index.
       */
      public com.google.protobuf.ByteString
          getRecommendationsBytes(int index) {
        return recommendations_.getByteString(index);
      }
      /**
       * <pre>
       * List of recommendations of how the particular vulnerability can be avoided/mitigated.
       * </pre>
       *
       * <code>repeated string recommendations = 7;</code>
       * @param index The index to set the value at.
       * @param value The recommendations to set.
       * @return This builder for chaining.
       */
      public Builder setRecommendations(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureRecommendationsIsMutable();
        recommendations_.set(index, value);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of recommendations of how the particular vulnerability can be avoided/mitigated.
       * </pre>
       *
       * <code>repeated string recommendations = 7;</code>
       * @param value The recommendations to add.
       * @return This builder for chaining.
       */
      public Builder addRecommendations(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureRecommendationsIsMutable();
        recommendations_.add(value);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of recommendations of how the particular vulnerability can be avoided/mitigated.
       * </pre>
       *
       * <code>repeated string recommendations = 7;</code>
       * @param values The recommendations to add.
       * @return This builder for chaining.
       */
      public Builder addAllRecommendations(
          java.lang.Iterable<java.lang.String> values) {
        ensureRecommendationsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, recommendations_);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of recommendations of how the particular vulnerability can be avoided/mitigated.
       * </pre>
       *
       * <code>repeated string recommendations = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearRecommendations() {
        recommendations_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of recommendations of how the particular vulnerability can be avoided/mitigated.
       * </pre>
       *
       * <code>repeated string recommendations = 7;</code>
       * @param value The bytes of the recommendations to add.
       * @return This builder for chaining.
       */
      public Builder addRecommendationsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureRecommendationsIsMutable();
        recommendations_.add(value);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList advisories_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureAdvisoriesIsMutable() {
        if (!advisories_.isModifiable()) {
          advisories_ = new com.google.protobuf.LazyStringArrayList(advisories_);
        }
        bitField0_ |= 0x00000080;
      }
      /**
       * <pre>
       * Published advisories of the vulnerability if provided.
       * </pre>
       *
       * <code>repeated string advisories = 8;</code>
       * @return A list containing the advisories.
       */
      public com.google.protobuf.ProtocolStringList
          getAdvisoriesList() {
        advisories_.makeImmutable();
        return advisories_;
      }
      /**
       * <pre>
       * Published advisories of the vulnerability if provided.
       * </pre>
       *
       * <code>repeated string advisories = 8;</code>
       * @return The count of advisories.
       */
      public int getAdvisoriesCount() {
        return advisories_.size();
      }
      /**
       * <pre>
       * Published advisories of the vulnerability if provided.
       * </pre>
       *
       * <code>repeated string advisories = 8;</code>
       * @param index The index of the element to return.
       * @return The advisories at the given index.
       */
      public java.lang.String getAdvisories(int index) {
        return advisories_.get(index);
      }
      /**
       * <pre>
       * Published advisories of the vulnerability if provided.
       * </pre>
       *
       * <code>repeated string advisories = 8;</code>
       * @param index The index of the value to return.
       * @return The bytes of the advisories at the given index.
       */
      public com.google.protobuf.ByteString
          getAdvisoriesBytes(int index) {
        return advisories_.getByteString(index);
      }
      /**
       * <pre>
       * Published advisories of the vulnerability if provided.
       * </pre>
       *
       * <code>repeated string advisories = 8;</code>
       * @param index The index to set the value at.
       * @param value The advisories to set.
       * @return This builder for chaining.
       */
      public Builder setAdvisories(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureAdvisoriesIsMutable();
        advisories_.set(index, value);
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Published advisories of the vulnerability if provided.
       * </pre>
       *
       * <code>repeated string advisories = 8;</code>
       * @param value The advisories to add.
       * @return This builder for chaining.
       */
      public Builder addAdvisories(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureAdvisoriesIsMutable();
        advisories_.add(value);
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Published advisories of the vulnerability if provided.
       * </pre>
       *
       * <code>repeated string advisories = 8;</code>
       * @param values The advisories to add.
       * @return This builder for chaining.
       */
      public Builder addAllAdvisories(
          java.lang.Iterable<java.lang.String> values) {
        ensureAdvisoriesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, advisories_);
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Published advisories of the vulnerability if provided.
       * </pre>
       *
       * <code>repeated string advisories = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearAdvisories() {
        advisories_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Published advisories of the vulnerability if provided.
       * </pre>
       *
       * <code>repeated string advisories = 8;</code>
       * @param value The bytes of the advisories to add.
       * @return This builder for chaining.
       */
      public Builder addAdvisoriesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureAdvisoriesIsMutable();
        advisories_.add(value);
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.vex.Vulnerability)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.vex.Vulnerability)
    private static final cyclonedx.vex.VexOuterClass.Vulnerability DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.vex.VexOuterClass.Vulnerability();
    }

    public static cyclonedx.vex.VexOuterClass.Vulnerability getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Vulnerability>
        PARSER = new com.google.protobuf.AbstractParser<Vulnerability>() {
      @java.lang.Override
      public Vulnerability parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Vulnerability> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Vulnerability> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.Vulnerability getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface VexOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cyclonedx.vex.Vex)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
     */
    java.util.List<cyclonedx.vex.VexOuterClass.Vulnerability> 
        getVulnerabilitiesList();
    /**
     * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
     */
    cyclonedx.vex.VexOuterClass.Vulnerability getVulnerabilities(int index);
    /**
     * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
     */
    int getVulnerabilitiesCount();
    /**
     * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
     */
    java.util.List<? extends cyclonedx.vex.VexOuterClass.VulnerabilityOrBuilder> 
        getVulnerabilitiesOrBuilderList();
    /**
     * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
     */
    cyclonedx.vex.VexOuterClass.VulnerabilityOrBuilder getVulnerabilitiesOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Defines a list of vulnerabilities.
   * </pre>
   *
   * Protobuf type {@code cyclonedx.vex.Vex}
   */
  public static final class Vex extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:cyclonedx.vex.Vex)
      VexOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 27,
        /* patch= */ 0,
        /* suffix= */ "-rc1",
        Vex.class.getName());
    }
    // Use Vex.newBuilder() to construct.
    private Vex(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Vex() {
      vulnerabilities_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Vex_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Vex_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cyclonedx.vex.VexOuterClass.Vex.class, cyclonedx.vex.VexOuterClass.Vex.Builder.class);
    }

    public static final int VULNERABILITIES_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<cyclonedx.vex.VexOuterClass.Vulnerability> vulnerabilities_;
    /**
     * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
     */
    @java.lang.Override
    public java.util.List<cyclonedx.vex.VexOuterClass.Vulnerability> getVulnerabilitiesList() {
      return vulnerabilities_;
    }
    /**
     * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends cyclonedx.vex.VexOuterClass.VulnerabilityOrBuilder> 
        getVulnerabilitiesOrBuilderList() {
      return vulnerabilities_;
    }
    /**
     * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
     */
    @java.lang.Override
    public int getVulnerabilitiesCount() {
      return vulnerabilities_.size();
    }
    /**
     * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
     */
    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.Vulnerability getVulnerabilities(int index) {
      return vulnerabilities_.get(index);
    }
    /**
     * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
     */
    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.VulnerabilityOrBuilder getVulnerabilitiesOrBuilder(
        int index) {
      return vulnerabilities_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < vulnerabilities_.size(); i++) {
        output.writeMessage(1, vulnerabilities_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < vulnerabilities_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, vulnerabilities_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cyclonedx.vex.VexOuterClass.Vex)) {
        return super.equals(obj);
      }
      cyclonedx.vex.VexOuterClass.Vex other = (cyclonedx.vex.VexOuterClass.Vex) obj;

      if (!getVulnerabilitiesList()
          .equals(other.getVulnerabilitiesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getVulnerabilitiesCount() > 0) {
        hash = (37 * hash) + VULNERABILITIES_FIELD_NUMBER;
        hash = (53 * hash) + getVulnerabilitiesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cyclonedx.vex.VexOuterClass.Vex parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Vex parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Vex parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Vex parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Vex parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cyclonedx.vex.VexOuterClass.Vex parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Vex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.vex.VexOuterClass.Vex parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static cyclonedx.vex.VexOuterClass.Vex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static cyclonedx.vex.VexOuterClass.Vex parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cyclonedx.vex.VexOuterClass.Vex parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static cyclonedx.vex.VexOuterClass.Vex parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cyclonedx.vex.VexOuterClass.Vex prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines a list of vulnerabilities.
     * </pre>
     *
     * Protobuf type {@code cyclonedx.vex.Vex}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cyclonedx.vex.Vex)
        cyclonedx.vex.VexOuterClass.VexOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Vex_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Vex_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cyclonedx.vex.VexOuterClass.Vex.class, cyclonedx.vex.VexOuterClass.Vex.Builder.class);
      }

      // Construct using cyclonedx.vex.VexOuterClass.Vex.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (vulnerabilitiesBuilder_ == null) {
          vulnerabilities_ = java.util.Collections.emptyList();
        } else {
          vulnerabilities_ = null;
          vulnerabilitiesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cyclonedx.vex.VexOuterClass.internal_static_cyclonedx_vex_Vex_descriptor;
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Vex getDefaultInstanceForType() {
        return cyclonedx.vex.VexOuterClass.Vex.getDefaultInstance();
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Vex build() {
        cyclonedx.vex.VexOuterClass.Vex result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cyclonedx.vex.VexOuterClass.Vex buildPartial() {
        cyclonedx.vex.VexOuterClass.Vex result = new cyclonedx.vex.VexOuterClass.Vex(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(cyclonedx.vex.VexOuterClass.Vex result) {
        if (vulnerabilitiesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            vulnerabilities_ = java.util.Collections.unmodifiableList(vulnerabilities_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.vulnerabilities_ = vulnerabilities_;
        } else {
          result.vulnerabilities_ = vulnerabilitiesBuilder_.build();
        }
      }

      private void buildPartial0(cyclonedx.vex.VexOuterClass.Vex result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cyclonedx.vex.VexOuterClass.Vex) {
          return mergeFrom((cyclonedx.vex.VexOuterClass.Vex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cyclonedx.vex.VexOuterClass.Vex other) {
        if (other == cyclonedx.vex.VexOuterClass.Vex.getDefaultInstance()) return this;
        if (vulnerabilitiesBuilder_ == null) {
          if (!other.vulnerabilities_.isEmpty()) {
            if (vulnerabilities_.isEmpty()) {
              vulnerabilities_ = other.vulnerabilities_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureVulnerabilitiesIsMutable();
              vulnerabilities_.addAll(other.vulnerabilities_);
            }
            onChanged();
          }
        } else {
          if (!other.vulnerabilities_.isEmpty()) {
            if (vulnerabilitiesBuilder_.isEmpty()) {
              vulnerabilitiesBuilder_.dispose();
              vulnerabilitiesBuilder_ = null;
              vulnerabilities_ = other.vulnerabilities_;
              bitField0_ = (bitField0_ & ~0x00000001);
              vulnerabilitiesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getVulnerabilitiesFieldBuilder() : null;
            } else {
              vulnerabilitiesBuilder_.addAllMessages(other.vulnerabilities_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                cyclonedx.vex.VexOuterClass.Vulnerability m =
                    input.readMessage(
                        cyclonedx.vex.VexOuterClass.Vulnerability.parser(),
                        extensionRegistry);
                if (vulnerabilitiesBuilder_ == null) {
                  ensureVulnerabilitiesIsMutable();
                  vulnerabilities_.add(m);
                } else {
                  vulnerabilitiesBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<cyclonedx.vex.VexOuterClass.Vulnerability> vulnerabilities_ =
        java.util.Collections.emptyList();
      private void ensureVulnerabilitiesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          vulnerabilities_ = new java.util.ArrayList<cyclonedx.vex.VexOuterClass.Vulnerability>(vulnerabilities_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.vex.VexOuterClass.Vulnerability, cyclonedx.vex.VexOuterClass.Vulnerability.Builder, cyclonedx.vex.VexOuterClass.VulnerabilityOrBuilder> vulnerabilitiesBuilder_;

      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public java.util.List<cyclonedx.vex.VexOuterClass.Vulnerability> getVulnerabilitiesList() {
        if (vulnerabilitiesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(vulnerabilities_);
        } else {
          return vulnerabilitiesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public int getVulnerabilitiesCount() {
        if (vulnerabilitiesBuilder_ == null) {
          return vulnerabilities_.size();
        } else {
          return vulnerabilitiesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public cyclonedx.vex.VexOuterClass.Vulnerability getVulnerabilities(int index) {
        if (vulnerabilitiesBuilder_ == null) {
          return vulnerabilities_.get(index);
        } else {
          return vulnerabilitiesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public Builder setVulnerabilities(
          int index, cyclonedx.vex.VexOuterClass.Vulnerability value) {
        if (vulnerabilitiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVulnerabilitiesIsMutable();
          vulnerabilities_.set(index, value);
          onChanged();
        } else {
          vulnerabilitiesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public Builder setVulnerabilities(
          int index, cyclonedx.vex.VexOuterClass.Vulnerability.Builder builderForValue) {
        if (vulnerabilitiesBuilder_ == null) {
          ensureVulnerabilitiesIsMutable();
          vulnerabilities_.set(index, builderForValue.build());
          onChanged();
        } else {
          vulnerabilitiesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public Builder addVulnerabilities(cyclonedx.vex.VexOuterClass.Vulnerability value) {
        if (vulnerabilitiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVulnerabilitiesIsMutable();
          vulnerabilities_.add(value);
          onChanged();
        } else {
          vulnerabilitiesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public Builder addVulnerabilities(
          int index, cyclonedx.vex.VexOuterClass.Vulnerability value) {
        if (vulnerabilitiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVulnerabilitiesIsMutable();
          vulnerabilities_.add(index, value);
          onChanged();
        } else {
          vulnerabilitiesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public Builder addVulnerabilities(
          cyclonedx.vex.VexOuterClass.Vulnerability.Builder builderForValue) {
        if (vulnerabilitiesBuilder_ == null) {
          ensureVulnerabilitiesIsMutable();
          vulnerabilities_.add(builderForValue.build());
          onChanged();
        } else {
          vulnerabilitiesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public Builder addVulnerabilities(
          int index, cyclonedx.vex.VexOuterClass.Vulnerability.Builder builderForValue) {
        if (vulnerabilitiesBuilder_ == null) {
          ensureVulnerabilitiesIsMutable();
          vulnerabilities_.add(index, builderForValue.build());
          onChanged();
        } else {
          vulnerabilitiesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public Builder addAllVulnerabilities(
          java.lang.Iterable<? extends cyclonedx.vex.VexOuterClass.Vulnerability> values) {
        if (vulnerabilitiesBuilder_ == null) {
          ensureVulnerabilitiesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, vulnerabilities_);
          onChanged();
        } else {
          vulnerabilitiesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public Builder clearVulnerabilities() {
        if (vulnerabilitiesBuilder_ == null) {
          vulnerabilities_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          vulnerabilitiesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public Builder removeVulnerabilities(int index) {
        if (vulnerabilitiesBuilder_ == null) {
          ensureVulnerabilitiesIsMutable();
          vulnerabilities_.remove(index);
          onChanged();
        } else {
          vulnerabilitiesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public cyclonedx.vex.VexOuterClass.Vulnerability.Builder getVulnerabilitiesBuilder(
          int index) {
        return getVulnerabilitiesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public cyclonedx.vex.VexOuterClass.VulnerabilityOrBuilder getVulnerabilitiesOrBuilder(
          int index) {
        if (vulnerabilitiesBuilder_ == null) {
          return vulnerabilities_.get(index);  } else {
          return vulnerabilitiesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public java.util.List<? extends cyclonedx.vex.VexOuterClass.VulnerabilityOrBuilder> 
           getVulnerabilitiesOrBuilderList() {
        if (vulnerabilitiesBuilder_ != null) {
          return vulnerabilitiesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(vulnerabilities_);
        }
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public cyclonedx.vex.VexOuterClass.Vulnerability.Builder addVulnerabilitiesBuilder() {
        return getVulnerabilitiesFieldBuilder().addBuilder(
            cyclonedx.vex.VexOuterClass.Vulnerability.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public cyclonedx.vex.VexOuterClass.Vulnerability.Builder addVulnerabilitiesBuilder(
          int index) {
        return getVulnerabilitiesFieldBuilder().addBuilder(
            index, cyclonedx.vex.VexOuterClass.Vulnerability.getDefaultInstance());
      }
      /**
       * <code>repeated .cyclonedx.vex.Vulnerability vulnerabilities = 1;</code>
       */
      public java.util.List<cyclonedx.vex.VexOuterClass.Vulnerability.Builder> 
           getVulnerabilitiesBuilderList() {
        return getVulnerabilitiesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          cyclonedx.vex.VexOuterClass.Vulnerability, cyclonedx.vex.VexOuterClass.Vulnerability.Builder, cyclonedx.vex.VexOuterClass.VulnerabilityOrBuilder> 
          getVulnerabilitiesFieldBuilder() {
        if (vulnerabilitiesBuilder_ == null) {
          vulnerabilitiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              cyclonedx.vex.VexOuterClass.Vulnerability, cyclonedx.vex.VexOuterClass.Vulnerability.Builder, cyclonedx.vex.VexOuterClass.VulnerabilityOrBuilder>(
                  vulnerabilities_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          vulnerabilities_ = null;
        }
        return vulnerabilitiesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:cyclonedx.vex.Vex)
    }

    // @@protoc_insertion_point(class_scope:cyclonedx.vex.Vex)
    private static final cyclonedx.vex.VexOuterClass.Vex DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cyclonedx.vex.VexOuterClass.Vex();
    }

    public static cyclonedx.vex.VexOuterClass.Vex getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Vex>
        PARSER = new com.google.protobuf.AbstractParser<Vex>() {
      @java.lang.Override
      public Vex parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Vex> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Vex> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cyclonedx.vex.VexOuterClass.Vex getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_vex_Cwe_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_vex_Cwe_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_vex_Score_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_vex_Score_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_vex_Rating_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_vex_Rating_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_vex_Source_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_vex_Source_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_vex_Vulnerability_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_vex_Vulnerability_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cyclonedx_vex_Vex_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_cyclonedx_vex_Vex_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\tvex.proto\022\rcyclonedx.vex\"\022\n\003Cwe\022\013\n\003cwe" +
      "\030\001 \001(\005\"=\n\005Score\022\014\n\004base\030\001 \001(\001\022\016\n\006impact\030" +
      "\002 \001(\001\022\026\n\016exploitability\030\003 \001(\001\"\224\001\n\006Rating" +
      "\022#\n\005score\030\001 \001(\0132\024.cyclonedx.vex.Score\022)\n" +
      "\010severity\030\002 \001(\0162\027.cyclonedx.vex.Severity" +
      "\022*\n\006method\030\003 \001(\0162\032.cyclonedx.vex.ScoreSo" +
      "urce\022\016\n\006vector\030\004 \001(\t\"#\n\006Source\022\013\n\003url\030\001 " +
      "\001(\t\022\014\n\004name\030\002 \001(\t\"\333\001\n\rVulnerability\022\013\n\003r" +
      "ef\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\022%\n\006source\030\003 \001(\0132\025.c" +
      "yclonedx.vex.Source\022&\n\007ratings\030\004 \003(\0132\025.c" +
      "yclonedx.vex.Rating\022 \n\004cwes\030\005 \003(\0132\022.cycl" +
      "onedx.vex.Cwe\022\023\n\013description\030\006 \001(\t\022\027\n\017re" +
      "commendations\030\007 \003(\t\022\022\n\nadvisories\030\010 \003(\t\"" +
      "<\n\003Vex\0225\n\017vulnerabilities\030\001 \003(\0132\034.cyclon" +
      "edx.vex.Vulnerability*N\n\010Severity\022\010\n\004NON" +
      "E\020\000\022\007\n\003LOW\020\001\022\n\n\006MEDIUM\020\002\022\010\n\004HIGH\020\003\022\014\n\010CR" +
      "ITICAL\020\004\022\013\n\007UNKNOWN\020\005*O\n\013ScoreSource\022\n\n\006" +
      "CVSSv2\020\000\022\n\n\006CVSSv3\020\001\022\016\n\nOWASP_RISK\020\002\022\r\n\t" +
      "OPEN_FAIR\020\003\022\t\n\005OTHER\020\004b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_cyclonedx_vex_Cwe_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_cyclonedx_vex_Cwe_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_vex_Cwe_descriptor,
        new java.lang.String[] { "Cwe", });
    internal_static_cyclonedx_vex_Score_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_cyclonedx_vex_Score_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_vex_Score_descriptor,
        new java.lang.String[] { "Base", "Impact", "Exploitability", });
    internal_static_cyclonedx_vex_Rating_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_cyclonedx_vex_Rating_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_vex_Rating_descriptor,
        new java.lang.String[] { "Score", "Severity", "Method", "Vector", });
    internal_static_cyclonedx_vex_Source_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_cyclonedx_vex_Source_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_vex_Source_descriptor,
        new java.lang.String[] { "Url", "Name", });
    internal_static_cyclonedx_vex_Vulnerability_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_cyclonedx_vex_Vulnerability_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_vex_Vulnerability_descriptor,
        new java.lang.String[] { "Ref", "Id", "Source", "Ratings", "Cwes", "Description", "Recommendations", "Advisories", });
    internal_static_cyclonedx_vex_Vex_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_cyclonedx_vex_Vex_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_cyclonedx_vex_Vex_descriptor,
        new java.lang.String[] { "Vulnerabilities", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
